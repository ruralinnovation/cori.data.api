{"version":3,"file":"cori.data.api207.js","sources":["../../node_modules/d3-textwrap/node_modules/d3-selection/src/selection/data.js"],"sourcesContent":["import {Selection} from \"./index\";\nimport {EnterNode} from \"./enter\";\nimport constant from \"../constant\";\n\nvar keyPrefix = \"$\"; // Protect against keys like “__proto__”.\n\nfunction bindIndex(parent, group, enter, update, exit, data) {\n  var i = 0,\n      node,\n      groupLength = group.length,\n      dataLength = data.length;\n\n  // Put any non-null nodes that fit into update.\n  // Put any null nodes into enter.\n  // Put any remaining data into enter.\n  for (; i < dataLength; ++i) {\n    if (node = group[i]) {\n      node.__data__ = data[i];\n      update[i] = node;\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Put any non-null nodes that don’t fit into exit.\n  for (; i < groupLength; ++i) {\n    if (node = group[i]) {\n      exit[i] = node;\n    }\n  }\n}\n\nfunction bindKey(parent, group, enter, update, exit, data, key) {\n  var i,\n      node,\n      nodeByKeyValue = {},\n      groupLength = group.length,\n      dataLength = data.length,\n      keyValues = new Array(groupLength),\n      keyValue;\n\n  // Compute the key for each node.\n  // If multiple nodes have the same key, the duplicates are added to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if (node = group[i]) {\n      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);\n      if (keyValue in nodeByKeyValue) {\n        exit[i] = node;\n      } else {\n        nodeByKeyValue[keyValue] = node;\n      }\n    }\n  }\n\n  // Compute the key for each datum.\n  // If there a node associated with this key, join and add it to update.\n  // If there is not (or the key is a duplicate), add it to enter.\n  for (i = 0; i < dataLength; ++i) {\n    keyValue = keyPrefix + key.call(parent, data[i], i, data);\n    if (node = nodeByKeyValue[keyValue]) {\n      update[i] = node;\n      node.__data__ = data[i];\n      nodeByKeyValue[keyValue] = null;\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Add any remaining nodes that were not bound to data to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {\n      exit[i] = node;\n    }\n  }\n}\n\nexport default function(value, key) {\n  if (!value) {\n    data = new Array(this.size()), j = -1;\n    this.each(function(d) { data[++j] = d; });\n    return data;\n  }\n\n  var bind = key ? bindKey : bindIndex,\n      parents = this._parents,\n      groups = this._groups;\n\n  if (typeof value !== \"function\") value = constant(value);\n\n  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\n    var parent = parents[j],\n        group = groups[j],\n        groupLength = group.length,\n        data = value.call(parent, parent && parent.__data__, j, parents),\n        dataLength = data.length,\n        enterGroup = enter[j] = new Array(dataLength),\n        updateGroup = update[j] = new Array(dataLength),\n        exitGroup = exit[j] = new Array(groupLength);\n\n    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);\n\n    // Now connect the enter nodes to their following update node, such that\n    // appendChild can insert the materialized enter node before this node,\n    // rather than at the end of the parent node.\n    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\n      if (previous = enterGroup[i0]) {\n        if (i0 >= i1) i1 = i0 + 1;\n        while (!(next = updateGroup[i1]) && ++i1 < dataLength);\n        previous._next = next || null;\n      }\n    }\n  }\n\n  update = new Selection(update, parents);\n  update._enter = enter;\n  update._exit = exit;\n  return update;\n}\n"],"names":["keyPrefix","bindIndex","parent","group","enter","update","exit","data","i","node","groupLength","dataLength","EnterNode","bindKey","key","nodeByKeyValue","keyValues","keyValue","selection_data","value","j","d","bind","parents","groups","constant","m","enterGroup","updateGroup","exitGroup","i0","i1","previous","next","Selection"],"mappings":"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","x_google_ignoreList":[0]}