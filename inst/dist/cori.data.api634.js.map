{"version":3,"file":"cori.data.api634.js","sources":["../../node_modules/micromark-core-commonmark/lib/block-quote.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}"],"names":["blockQuote","tokenizeBlockQuoteStart","tokenizeBlockQuoteContinuation","exit","effects","ok","nok","self","start","code","state","after","markdownSpace","contStart","factorySpace","contBefore"],"mappings":";;;;;;;;AAWY,MAACA,IAAa;AAAA,EACxB,MAAM;AAAA,EACN,UAAUC;AAAA,EACV,cAAc;AAAA,IACZ,UAAUC;AAAA,EACX;AAAA,EACD,MAAAC;AACF;AAMA,SAASF,EAAwBG,GAASC,GAAIC,GAAK;AACjD,QAAMC,IAAO;AACb,SAAOC;AAYP,WAASA,EAAMC,GAAM;AACnB,QAAIA,MAAS,IAAI;AACf,YAAMC,IAAQH,EAAK;AACnB,aAAKG,EAAM,SACTN,EAAQ,MAAM,cAAc;AAAA,QAC1B,YAAY;AAAA,MACtB,CAAS,GACDM,EAAM,OAAO,KAEfN,EAAQ,MAAM,kBAAkB,GAChCA,EAAQ,MAAM,kBAAkB,GAChCA,EAAQ,QAAQK,CAAI,GACpBL,EAAQ,KAAK,kBAAkB,GACxBO;AAAA,IACR;AACD,WAAOL,EAAIG,CAAI;AAAA,EAChB;AAYD,WAASE,EAAMF,GAAM;AACnB,WAAIG,EAAcH,CAAI,KACpBL,EAAQ,MAAM,4BAA4B,GAC1CA,EAAQ,QAAQK,CAAI,GACpBL,EAAQ,KAAK,4BAA4B,GACzCA,EAAQ,KAAK,kBAAkB,GACxBC,MAETD,EAAQ,KAAK,kBAAkB,GACxBC,EAAGI,CAAI;AAAA,EACf;AACH;AAcA,SAASP,EAA+BE,GAASC,GAAIC,GAAK;AACxD,QAAMC,IAAO;AACb,SAAOM;AAeP,WAASA,EAAUJ,GAAM;AACvB,WAAIG,EAAcH,CAAI,IAGbK,EAAaV,GAASW,GAAY,cAAcR,EAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,IAAI,SAAY,CAAC,EAAEE,CAAI,IAEpIM,EAAWN,CAAI;AAAA,EACvB;AAeD,WAASM,EAAWN,GAAM;AACxB,WAAOL,EAAQ,QAAQJ,GAAYK,GAAIC,CAAG,EAAEG,CAAI;AAAA,EACjD;AACH;AAGA,SAASN,EAAKC,GAAS;AACrB,EAAAA,EAAQ,KAAK,YAAY;AAC3B;","x_google_ignoreList":[0]}