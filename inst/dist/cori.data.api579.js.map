{"version":3,"file":"cori.data.api579.js","sources":["../../node_modules/apache-arrow/fb/record-batch.mjs"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { BodyCompression } from './body-compression.mjs';\nimport { Buffer } from './buffer.mjs';\nimport { FieldNode } from './field-node.mjs';\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n */\nexport class RecordBatch {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsRecordBatch(bb, obj) {\n        return (obj || new RecordBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsRecordBatch(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new RecordBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * number of records / rows. The arrays in the batch should all have this\n     * length\n     */\n    length() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt64(this.bb_pos + offset) : BigInt('0');\n    }\n    /**\n     * Nodes correspond to the pre-ordered flattened logical schema\n     */\n    nodes(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? (obj || new FieldNode()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n    nodesLength() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    /**\n     * Buffers correspond to the pre-ordered flattened buffer tree\n     *\n     * The number of buffers appended to this list depends on the schema. For\n     * example, most primitive arrays will have 2 buffers, 1 for the validity\n     * bitmap and 1 for the values. For struct arrays, there will only be a\n     * single buffer for the validity (nulls) bitmap\n     */\n    buffers(index, obj) {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? (obj || new Buffer()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n    }\n    buffersLength() {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n    }\n    /**\n     * Optional compression of the message body\n     */\n    compression(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? (obj || new BodyCompression()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    static startRecordBatch(builder) {\n        builder.startObject(4);\n    }\n    static addLength(builder, length) {\n        builder.addFieldInt64(0, length, BigInt('0'));\n    }\n    static addNodes(builder, nodesOffset) {\n        builder.addFieldOffset(1, nodesOffset, 0);\n    }\n    static startNodesVector(builder, numElems) {\n        builder.startVector(16, numElems, 8);\n    }\n    static addBuffers(builder, buffersOffset) {\n        builder.addFieldOffset(2, buffersOffset, 0);\n    }\n    static startBuffersVector(builder, numElems) {\n        builder.startVector(16, numElems, 8);\n    }\n    static addCompression(builder, compressionOffset) {\n        builder.addFieldOffset(3, compressionOffset, 0);\n    }\n    static endRecordBatch(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n}\n\n//# sourceMappingURL=record-batch.mjs.map\n"],"names":["RecordBatch","i","bb","obj","flatbuffers.SIZE_PREFIX_LENGTH","offset","index","FieldNode","Buffer","BodyCompression","builder","length","nodesOffset","numElems","buffersOffset","compressionOffset"],"mappings":"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","x_google_ignoreList":[0]}