{"version":3,"file":"window-state.js","sources":["../../../../../../../node_modules/arquero/src/engine/window/window-state.js"],"sourcesContent":["import ascending from '../../util/ascending';\nimport bisector from '../../util/bisector';\nimport concat from '../../util/concat';\nimport unroll from '../../util/unroll';\n\nconst bisect = bisector(ascending);\n\nexport default function(data, frame, adjust, ops, aggrs) {\n  let rows, peer, cells, result, key;\n  const isPeer = index => peer[index - 1] === peer[index];\n  const numOps = ops.length;\n  const numAgg = aggrs.length;\n\n  const evaluate = ops.length\n    ? unroll(\n        ['w', 'r', 'k'],\n        '{' + concat(ops, (_, i) => `r[_${i}.id][k]=_${i}.value(w,_${i}.get);`) + '}',\n        ops\n      )\n    : () => {};\n\n  const w = {\n    i0: 0,\n    i1: 0,\n    index: 0,\n    size: 0,\n    peer: isPeer,\n\n    init(partition, peers, results, group) {\n      w.index = w.i0 = w.i1 = 0;\n      w.size = peers.length;\n      rows = partition;\n      peer = peers;\n      result = results;\n      key = group;\n\n      // initialize aggregates\n      cells = aggrs ? aggrs.map(aggr => aggr.init()) : null;\n\n      // initialize window ops\n      for (let i = 0; i < numOps; ++i) {\n        ops[i].init();\n      }\n\n      return w;\n    },\n\n    value(index, get) {\n      return get(rows[index], data);\n    },\n\n    step(idx) {\n      const [f0, f1] = frame;\n      const n = w.size;\n      const p0 = w.i0;\n      const p1 = w.i1;\n\n      w.i0 = f0 != null ? Math.max(0, idx - Math.abs(f0)) : 0;\n      w.i1 = f1 != null ? Math.min(n, idx + Math.abs(f1) + 1) : n;\n      w.index = idx;\n\n      if (adjust) {\n        if (w.i0 > 0 && isPeer(w.i0)) {\n          w.i0 = bisect.left(peer, peer[w.i0]);\n        }\n        if (w.i1 < n && isPeer(w.i1)) {\n          w.i1 = bisect.right(peer, peer[w.i1 - 1]);\n        }\n      }\n\n      // evaluate aggregates\n      for (let i = 0; i < numAgg; ++i) {\n        const aggr = aggrs[i];\n        const cell = cells[i];\n        for (let j = p0; j < w.i0; ++j) {\n          aggr.rem(cell, rows[j], data);\n        }\n        for (let j = p1; j < w.i1; ++j) {\n          aggr.add(cell, rows[j], data);\n        }\n        aggr.write(cell, result, key);\n      }\n\n      // evaluate window ops\n      evaluate(w, result, key);\n\n      return result;\n    }\n  };\n\n  return w;\n}"],"names":[],"mappings":"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","x_google_ignoreList":[0]}