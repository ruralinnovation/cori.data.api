{"version":3,"file":"cori.data.api474.js","sources":["../../node_modules/mdast-util-to-string/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the nodeâ€™s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n"],"names":["emptyOptions","toString","value","options","settings","includeImageAlt","includeHtml","one","node","all","values","result","index"],"mappings":";;;;;;AAYA,MAAMA,IAAe,CAAE;AAehB,SAASC,EAASC,GAAOC,GAAS;AACvC,QAAMC,IAAsBJ,GACtBK,IACJ,OAAOD,EAAS,mBAAoB,YAChCA,EAAS,kBACT,IACAE,IACJ,OAAOF,EAAS,eAAgB,YAAYA,EAAS,cAAc;AAErE,SAAOG,EAAIL,GAAOG,GAAiBC,CAAW;AAChD;AAcA,SAASC,EAAIL,GAAOG,GAAiBC,GAAa;AAChD,MAAIE,EAAKN,CAAK,GAAG;AACf,QAAI,WAAWA;AACb,aAAOA,EAAM,SAAS,UAAU,CAACI,IAAc,KAAKJ,EAAM;AAG5D,QAAIG,KAAmB,SAASH,KAASA,EAAM;AAC7C,aAAOA,EAAM;AAGf,QAAI,cAAcA;AAChB,aAAOO,EAAIP,EAAM,UAAUG,GAAiBC,CAAW;AAAA,EAE1D;AAED,SAAI,MAAM,QAAQJ,CAAK,IACdO,EAAIP,GAAOG,GAAiBC,CAAW,IAGzC;AACT;AAcA,SAASG,EAAIC,GAAQL,GAAiBC,GAAa;AAEjD,QAAMK,IAAS,CAAE;AACjB,MAAIC,IAAQ;AAEZ,SAAO,EAAEA,IAAQF,EAAO;AACtB,IAAAC,EAAOC,CAAK,IAAIL,EAAIG,EAAOE,CAAK,GAAGP,GAAiBC,CAAW;AAGjE,SAAOK,EAAO,KAAK,EAAE;AACvB;AAUA,SAASH,EAAKN,GAAO;AACnB,SAAO,GAAQA,KAAS,OAAOA,KAAU;AAC3C;","x_google_ignoreList":[0]}