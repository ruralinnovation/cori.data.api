{"version":3,"file":"cori.data.api653.js","sources":["../../node_modules/micromark-core-commonmark/lib/character-escape.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}"],"names":["characterEscape","tokenizeCharacterEscape","effects","ok","nok","start","code","inside","asciiPunctuation"],"mappings":";;;;;;;AASY,MAACA,IAAkB;AAAA,EAC7B,MAAM;AAAA,EACN,UAAUC;AACZ;AAMA,SAASA,EAAwBC,GAASC,GAAIC,GAAK;AACjD,SAAOC;AAYP,WAASA,EAAMC,GAAM;AACnB,WAAAJ,EAAQ,MAAM,iBAAiB,GAC/BA,EAAQ,MAAM,cAAc,GAC5BA,EAAQ,QAAQI,CAAI,GACpBJ,EAAQ,KAAK,cAAc,GACpBK;AAAA,EACR;AAYD,WAASA,EAAOD,GAAM;AAEpB,WAAIE,EAAiBF,CAAI,KACvBJ,EAAQ,MAAM,sBAAsB,GACpCA,EAAQ,QAAQI,CAAI,GACpBJ,EAAQ,KAAK,sBAAsB,GACnCA,EAAQ,KAAK,iBAAiB,GACvBC,KAEFC,EAAIE,CAAI;AAAA,EAChB;AACH;","x_google_ignoreList":[0]}