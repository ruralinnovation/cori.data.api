{"version":3,"file":"cori.data.api123.js","sources":["../../node_modules/html-to-image/es/embed-webfonts.js"],"sourcesContent":["import { toArray } from './util';\nimport { fetchAsDataURL } from './dataurl';\nimport { shouldEmbed, embedResources } from './embed-resources';\nconst cssFetchCache = {};\nasync function fetchCSS(url) {\n    let cache = cssFetchCache[url];\n    if (cache != null) {\n        return cache;\n    }\n    const res = await fetch(url);\n    const cssText = await res.text();\n    cache = { url, cssText };\n    cssFetchCache[url] = cache;\n    return cache;\n}\nasync function embedFonts(data, options) {\n    let cssText = data.cssText;\n    const regexUrl = /url\\([\"']?([^\"')]+)[\"']?\\)/g;\n    const fontLocs = cssText.match(/url\\([^)]+\\)/g) || [];\n    const loadFonts = fontLocs.map(async (loc) => {\n        let url = loc.replace(regexUrl, '$1');\n        if (!url.startsWith('https://')) {\n            url = new URL(url, data.url).href;\n        }\n        return fetchAsDataURL(url, options.fetchRequestInit, ({ result }) => {\n            cssText = cssText.replace(loc, `url(${result})`);\n            return [loc, result];\n        });\n    });\n    return Promise.all(loadFonts).then(() => cssText);\n}\nfunction parseCSS(source) {\n    if (source == null) {\n        return [];\n    }\n    const result = [];\n    const commentsRegex = /(\\/\\*[\\s\\S]*?\\*\\/)/gi;\n    // strip out comments\n    let cssText = source.replace(commentsRegex, '');\n    // eslint-disable-next-line prefer-regex-literals\n    const keyframesRegex = new RegExp('((@.*?keyframes [\\\\s\\\\S]*?){([\\\\s\\\\S]*?}\\\\s*?)})', 'gi');\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        const matches = keyframesRegex.exec(cssText);\n        if (matches === null) {\n            break;\n        }\n        result.push(matches[0]);\n    }\n    cssText = cssText.replace(keyframesRegex, '');\n    const importRegex = /@import[\\s\\S]*?url\\([^)]*\\)[\\s\\S]*?;/gi;\n    // to match css & media queries together\n    const combinedCSSRegex = '((\\\\s*?(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)?\\\\s*?@media[\\\\s\\\\S]' +\n        '*?){([\\\\s\\\\S]*?)}\\\\s*?})|(([\\\\s\\\\S]*?){([\\\\s\\\\S]*?)})';\n    // unified regex\n    const unifiedRegex = new RegExp(combinedCSSRegex, 'gi');\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        let matches = importRegex.exec(cssText);\n        if (matches === null) {\n            matches = unifiedRegex.exec(cssText);\n            if (matches === null) {\n                break;\n            }\n            else {\n                importRegex.lastIndex = unifiedRegex.lastIndex;\n            }\n        }\n        else {\n            unifiedRegex.lastIndex = importRegex.lastIndex;\n        }\n        result.push(matches[0]);\n    }\n    return result;\n}\nasync function getCSSRules(styleSheets, options) {\n    const ret = [];\n    const deferreds = [];\n    // First loop inlines imports\n    styleSheets.forEach((sheet) => {\n        if ('cssRules' in sheet) {\n            try {\n                toArray(sheet.cssRules || []).forEach((item, index) => {\n                    if (item.type === CSSRule.IMPORT_RULE) {\n                        let importIndex = index + 1;\n                        const url = item.href;\n                        const deferred = fetchCSS(url)\n                            .then((metadata) => embedFonts(metadata, options))\n                            .then((cssText) => parseCSS(cssText).forEach((rule) => {\n                            try {\n                                sheet.insertRule(rule, rule.startsWith('@import')\n                                    ? (importIndex += 1)\n                                    : sheet.cssRules.length);\n                            }\n                            catch (error) {\n                                console.error('Error inserting rule from remote css', {\n                                    rule,\n                                    error,\n                                });\n                            }\n                        }))\n                            .catch((e) => {\n                            console.error('Error loading remote css', e.toString());\n                        });\n                        deferreds.push(deferred);\n                    }\n                });\n            }\n            catch (e) {\n                const inline = styleSheets.find((a) => a.href == null) || document.styleSheets[0];\n                if (sheet.href != null) {\n                    deferreds.push(fetchCSS(sheet.href)\n                        .then((metadata) => embedFonts(metadata, options))\n                        .then((cssText) => parseCSS(cssText).forEach((rule) => {\n                        inline.insertRule(rule, sheet.cssRules.length);\n                    }))\n                        .catch((err) => {\n                        console.error('Error loading remote stylesheet', err);\n                    }));\n                }\n                console.error('Error inlining remote css file', e);\n            }\n        }\n    });\n    return Promise.all(deferreds).then(() => {\n        // Second loop parses rules\n        styleSheets.forEach((sheet) => {\n            if ('cssRules' in sheet) {\n                try {\n                    toArray(sheet.cssRules || []).forEach((item) => {\n                        ret.push(item);\n                    });\n                }\n                catch (e) {\n                    console.error(`Error while reading CSS rules from ${sheet.href}`, e);\n                }\n            }\n        });\n        return ret;\n    });\n}\nfunction getWebFontRules(cssRules) {\n    return cssRules\n        .filter((rule) => rule.type === CSSRule.FONT_FACE_RULE)\n        .filter((rule) => shouldEmbed(rule.style.getPropertyValue('src')));\n}\nasync function parseWebFontRules(node, options) {\n    if (node.ownerDocument == null) {\n        throw new Error('Provided element is not within a Document');\n    }\n    const styleSheets = toArray(node.ownerDocument.styleSheets);\n    const cssRules = await getCSSRules(styleSheets, options);\n    return getWebFontRules(cssRules);\n}\nexport async function getWebFontCSS(node, options) {\n    const rules = await parseWebFontRules(node, options);\n    const cssTexts = await Promise.all(rules.map((rule) => {\n        const baseUrl = rule.parentStyleSheet ? rule.parentStyleSheet.href : null;\n        return embedResources(rule.cssText, baseUrl, options);\n    }));\n    return cssTexts.join('\\n');\n}\nexport async function embedWebFonts(clonedNode, options) {\n    const cssText = options.fontEmbedCSS != null\n        ? options.fontEmbedCSS\n        : options.skipFonts\n            ? null\n            : await getWebFontCSS(clonedNode, options);\n    if (cssText) {\n        const styleNode = document.createElement('style');\n        const sytleContent = document.createTextNode(cssText);\n        styleNode.appendChild(sytleContent);\n        if (clonedNode.firstChild) {\n            clonedNode.insertBefore(styleNode, clonedNode.firstChild);\n        }\n        else {\n            clonedNode.appendChild(styleNode);\n        }\n    }\n}\n//# sourceMappingURL=embed-webfonts.js.map"],"names":["cssFetchCache","fetchCSS","url","cache","cssText","embedFonts","data","options","regexUrl","loadFonts","loc","fetchAsDataURL","result","parseCSS","source","commentsRegex","keyframesRegex","matches","importRegex","combinedCSSRegex","unifiedRegex","getCSSRules","styleSheets","ret","deferreds","sheet","toArray","item","index","importIndex","deferred","metadata","rule","error","e","inline","a","err","getWebFontRules","cssRules","shouldEmbed","parseWebFontRules","node","getWebFontCSS","rules","baseUrl","embedResources","embedWebFonts","clonedNode","styleNode","sytleContent"],"mappings":"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","x_google_ignoreList":[0]}