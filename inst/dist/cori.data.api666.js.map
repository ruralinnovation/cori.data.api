{"version":3,"file":"cori.data.api666.js","sources":["../../node_modules/apache-arrow/fb/body-compression.mjs"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { BodyCompressionMethod } from './body-compression-method.mjs';\nimport { CompressionType } from './compression-type.mjs';\n/**\n * Optional compression for the memory buffers constituting IPC message\n * bodies. Intended for use with RecordBatch but could be used for other\n * message types\n */\nexport class BodyCompression {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsBodyCompression(bb, obj) {\n        return (obj || new BodyCompression()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsBodyCompression(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new BodyCompression()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * Compressor library.\n     * For LZ4_FRAME, each compressed buffer must consist of a single frame.\n     */\n    codec() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt8(this.bb_pos + offset) : CompressionType.LZ4_FRAME;\n    }\n    /**\n     * Indicates the way the record batch body was compressed\n     */\n    method() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.readInt8(this.bb_pos + offset) : BodyCompressionMethod.BUFFER;\n    }\n    static startBodyCompression(builder) {\n        builder.startObject(2);\n    }\n    static addCodec(builder, codec) {\n        builder.addFieldInt8(0, codec, CompressionType.LZ4_FRAME);\n    }\n    static addMethod(builder, method) {\n        builder.addFieldInt8(1, method, BodyCompressionMethod.BUFFER);\n    }\n    static endBodyCompression(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createBodyCompression(builder, codec, method) {\n        BodyCompression.startBodyCompression(builder);\n        BodyCompression.addCodec(builder, codec);\n        BodyCompression.addMethod(builder, method);\n        return BodyCompression.endBodyCompression(builder);\n    }\n}\n\n//# sourceMappingURL=body-compression.mjs.map\n"],"names":["BodyCompression","i","bb","obj","flatbuffers.SIZE_PREFIX_LENGTH","offset","CompressionType","BodyCompressionMethod","builder","codec","method"],"mappings":";;;;;;;;;;;AASO,MAAMA,EAAgB;AAAA,EACzB,cAAc;AACV,SAAK,KAAK,MACV,KAAK,SAAS;AAAA,EACjB;AAAA,EACD,OAAOC,GAAGC,GAAI;AACV,gBAAK,SAASD,GACd,KAAK,KAAKC,GACH;AAAA,EACV;AAAA,EACD,OAAO,yBAAyBA,GAAIC,GAAK;AACrC,YAAQA,KAAO,IAAIH,EAAe,GAAI,OAAOE,EAAG,UAAUA,EAAG,SAAU,CAAA,IAAIA,EAAG,SAAU,GAAEA,CAAE;AAAA,EAC/F;AAAA,EACD,OAAO,qCAAqCA,GAAIC,GAAK;AACjD,WAAAD,EAAG,YAAYA,EAAG,SAAU,IAAGE,CAA8B,IACrDD,KAAO,IAAIH,EAAe,GAAI,OAAOE,EAAG,UAAUA,EAAG,SAAU,CAAA,IAAIA,EAAG,SAAU,GAAEA,CAAE;AAAA,EAC/F;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,QAAQ;AACJ,UAAMG,IAAS,KAAK,GAAG,SAAS,KAAK,QAAQ,CAAC;AAC9C,WAAOA,IAAS,KAAK,GAAG,SAAS,KAAK,SAASA,CAAM,IAAIC,EAAgB;AAAA,EAC5E;AAAA;AAAA;AAAA;AAAA,EAID,SAAS;AACL,UAAMD,IAAS,KAAK,GAAG,SAAS,KAAK,QAAQ,CAAC;AAC9C,WAAOA,IAAS,KAAK,GAAG,SAAS,KAAK,SAASA,CAAM,IAAIE,EAAsB;AAAA,EAClF;AAAA,EACD,OAAO,qBAAqBC,GAAS;AACjC,IAAAA,EAAQ,YAAY,CAAC;AAAA,EACxB;AAAA,EACD,OAAO,SAASA,GAASC,GAAO;AAC5B,IAAAD,EAAQ,aAAa,GAAGC,GAAOH,EAAgB,SAAS;AAAA,EAC3D;AAAA,EACD,OAAO,UAAUE,GAASE,GAAQ;AAC9B,IAAAF,EAAQ,aAAa,GAAGE,GAAQH,EAAsB,MAAM;AAAA,EAC/D;AAAA,EACD,OAAO,mBAAmBC,GAAS;AAE/B,WADeA,EAAQ;EAE1B;AAAA,EACD,OAAO,sBAAsBA,GAASC,GAAOC,GAAQ;AACjD,WAAAV,EAAgB,qBAAqBQ,CAAO,GAC5CR,EAAgB,SAASQ,GAASC,CAAK,GACvCT,EAAgB,UAAUQ,GAASE,CAAM,GAClCV,EAAgB,mBAAmBQ,CAAO;AAAA,EACpD;AACL;","x_google_ignoreList":[0]}