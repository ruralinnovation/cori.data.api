{"version":3,"file":"regroup.js","sources":["../../../../../../node_modules/arquero/src/table/regroup.js"],"sourcesContent":["import { array_agg, entries_agg, map_agg, object_agg } from '../op/op-api';\nimport error from '../util/error';\nimport uniqueName from '../util/unique-name';\n\n/**\n * Regroup table rows in response to a BitSet filter.\n * @param {GroupBySpec} groups The current groupby specification.\n * @param {BitSet} filter The filter to apply.\n */\nexport function regroup(groups, filter) {\n  if (!groups || !filter) return groups;\n\n  // check for presence of rows for each group\n  const { keys, rows, size } = groups;\n  const map = new Int32Array(size);\n  filter.scan(row => map[keys[row]] = 1);\n\n  // check sum, exit early if all groups occur\n  const sum = map.reduce((sum, val) => sum + val, 0);\n  if (sum === size) return groups;\n\n  // create group index map, filter exemplar rows\n  const _rows = Array(sum);\n  let _size = 0;\n  for (let i = 0; i < size; ++i) {\n    if (map[i]) _rows[map[i] = _size++] = rows[i];\n  }\n\n  // re-index the group keys\n  const _keys = new Uint32Array(keys.length);\n  filter.scan(row => _keys[row] = map[keys[row]]);\n\n  return { ...groups, keys: _keys, rows: _rows, size: _size };\n}\n\n/**\n * Regroup table rows in response to a re-indexing.\n * This operation may or may not involve filtering of rows.\n * @param {GroupBySpec} groups The current groupby specification.\n * @param {Function} scan Function to scan new row indices.\n * @param {boolean} filter Flag indicating if filtering may occur.\n * @param {number} nrows The number of rows in the new table.\n */\nexport function reindex(groups, scan, filter, nrows) {\n  const { keys, rows, size } = groups;\n  let _rows = rows;\n  let _size = size;\n  let map = null;\n\n  if (filter) {\n    // check for presence of rows for each group\n    map = new Int32Array(size);\n    scan(row => map[keys[row]] = 1);\n\n    // check sum, regroup if not all groups occur\n    const sum = map.reduce((sum, val) => sum + val, 0);\n    if (sum !== size) {\n      // create group index map, filter exemplar rows\n      _rows = Array(sum);\n      _size = 0;\n      for (let i = 0; i < size; ++i) {\n        if (map[i]) _rows[map[i] = _size++] = rows[i];\n      }\n    }\n  }\n\n  // re-index the group keys\n  let r = -1;\n  const _keys = new Uint32Array(nrows);\n  const fn = _size !== size\n    ? row => _keys[++r] = map[keys[row]]\n    : row => _keys[++r] = keys[row];\n  scan(fn);\n\n  return { ...groups, keys: _keys, rows: _rows, size: _size };\n}\n\nexport function nest(table, idx, obj, type) {\n  const agg = type === 'map' || type === true ? map_agg\n    : type === 'entries' ? entries_agg\n    : type === 'object' ? object_agg\n    : error('groups option must be \"map\", \"entries\", or \"object\".');\n\n  const { names } = table.groups();\n  const col = uniqueName(table.columnNames(), '_');\n\n  // create table with one column of row objects\n  // then aggregate into per-group arrays\n  let t = table\n    .select()\n    .reify(idx)\n    .create({ data: { [col]: obj } })\n    .rollup({ [col]: array_agg(col) });\n\n  // create nested structures for each level of grouping\n  for (let i = names.length; --i >= 0;) {\n    t = t\n      .groupby(names.slice(0, i))\n      .rollup({ [col]: agg(names[i], col) });\n  }\n\n  // return the final aggregated structure\n  return t.get(col);\n}"],"names":[],"mappings":"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","x_google_ignoreList":[0]}