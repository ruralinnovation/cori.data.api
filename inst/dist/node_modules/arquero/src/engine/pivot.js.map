{"version":3,"file":"pivot.js","sources":["../../../../../../node_modules/arquero/src/engine/pivot.js"],"sourcesContent":["import { aggregate, aggregateGet, groupOutput } from './reduce/util';\nimport columnSet from '../table/column-set';\n\nconst opt = (value, defaultValue) => value != null ? value : defaultValue;\n\nexport default function(table, on, values, options = {}) {\n  const { keys, keyColumn } = pivotKeys(table, on, options);\n  const vsep = opt(options.valueSeparator, '_');\n  const namefn = values.names.length > 1\n    ? (i, name) => name + vsep + keys[i]\n    : i => keys[i];\n\n  // perform separate aggregate operations for each key\n  // if keys do not match, emit NaN so aggregate skips it\n  // use custom toString method for proper field resolution\n  const results = keys.map(\n    k => aggregate(table, values.ops.map(op => {\n      if (op.name === 'count') { // fix #273\n        const fn = r => k === keyColumn[r] ? 1 : NaN;\n        fn.toString = () => k + ':1';\n        return { ...op, name: 'sum', fields: [fn] };\n      }\n      const fields = op.fields.map(f => {\n        const fn = (r, d) => k === keyColumn[r] ? f(r, d) : NaN;\n        fn.toString = () => k + ':' + f;\n        return fn;\n      });\n      return { ...op, fields };\n    }))\n  );\n\n  return table.create(output(values, namefn, table.groups(), results));\n}\n\nfunction pivotKeys(table, on, options) {\n  const limit = options.limit > 0 ? +options.limit : Infinity;\n  const sort = opt(options.sort, true);\n  const ksep = opt(options.keySeparator, '_');\n\n  // construct key accessor function\n  const get = aggregateGet(table, on.ops, on.exprs);\n  const key = get.length === 1\n    ? get[0]\n    : (row, data) => get.map(fn => fn(row, data)).join(ksep);\n\n  // generate vector of per-row key values\n  const kcol = Array(table.totalRows());\n  table.scan((row, data) => kcol[row] = key(row, data));\n\n  // collect unique key values\n  const uniq = aggregate(\n    table.ungroup(),\n    [ {\n      id: 0,\n      name: 'array_agg_distinct',\n      fields: [(row => kcol[row])], params: []\n    } ]\n  )[0][0];\n\n  // get ordered set of unique key values\n  const keys = sort ? uniq.sort() : uniq;\n\n  // return key values\n  return {\n    keys: Number.isFinite(limit) ? keys.slice(0, limit) : keys,\n    keyColumn: kcol\n  };\n}\n\nfunction output({ names, exprs }, namefn, groups, results) {\n  const size = groups ? groups.size : 1;\n  const cols = columnSet();\n  const m = results.length;\n  const n = names.length;\n\n  let result;\n  const op = (id, row) => result[id][row];\n\n  // write groupby fields to output\n  if (groups) groupOutput(cols, groups);\n\n  // write pivot values to output\n  for (let i = 0; i < n; ++i) {\n    const get = exprs[i];\n    if (get.field != null) {\n      // if expression is op only, use aggregates directly\n      for (let j = 0; j < m; ++j) {\n        cols.add(namefn(j, names[i]), results[j][get.field]);\n      }\n    } else if (size > 1) {\n      // if multiple groups, evaluate expression for each\n      for (let j = 0; j < m; ++j) {\n        result = results[j];\n        const col = cols.add(namefn(j, names[i]), Array(size));\n        for (let k = 0; k < size; ++k) {\n          col[k] = get(k, null, op);\n        }\n      }\n    } else {\n      // if only one group, no need to loop\n      for (let j = 0; j < m; ++j) {\n        result = results[j];\n        cols.add(namefn(j, names[i]), [ get(0, null, op) ]);\n      }\n    }\n  }\n\n  return cols.new();\n}"],"names":[],"mappings":"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","x_google_ignoreList":[0]}