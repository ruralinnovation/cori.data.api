{"version":3,"file":"cori.data.api678.js","sources":["../../node_modules/micromark-core-commonmark/lib/thematic-break.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}"],"names":["thematicBreak","tokenizeThematicBreak","effects","ok","nok","size","marker","start","code","before","atBreak","sequence","markdownLineEnding","markdownSpace","factorySpace"],"mappings":";;;;;;;;AAWY,MAACA,IAAgB;AAAA,EAC3B,MAAM;AAAA,EACN,UAAUC;AACZ;AAMA,SAASA,EAAsBC,GAASC,GAAIC,GAAK;AAC/C,MAAIC,IAAO,GAEPC;AACJ,SAAOC;AAYP,WAASA,EAAMC,GAAM;AACnB,WAAAN,EAAQ,MAAM,eAAe,GAEtBO,EAAOD,CAAI;AAAA,EACnB;AAYD,WAASC,EAAOD,GAAM;AACpB,WAAAF,IAASE,GACFE,EAAQF,CAAI;AAAA,EACpB;AAYD,WAASE,EAAQF,GAAM;AACrB,WAAIA,MAASF,KACXJ,EAAQ,MAAM,uBAAuB,GAC9BS,EAASH,CAAI,KAElBH,KAAQ,MAAMG,MAAS,QAAQI,EAAmBJ,CAAI,MACxDN,EAAQ,KAAK,eAAe,GACrBC,EAAGK,CAAI,KAETJ,EAAII,CAAI;AAAA,EAChB;AAYD,WAASG,EAASH,GAAM;AACtB,WAAIA,MAASF,KACXJ,EAAQ,QAAQM,CAAI,GACpBH,KACOM,MAETT,EAAQ,KAAK,uBAAuB,GAC7BW,EAAcL,CAAI,IAAIM,EAAaZ,GAASQ,GAAS,YAAY,EAAEF,CAAI,IAAIE,EAAQF,CAAI;AAAA,EAC/F;AACH;","x_google_ignoreList":[0]}