{"version":3,"file":"codegen.js","sources":["../../../../../../node_modules/arquero/src/expression/codegen.js"],"sourcesContent":["import error from '../util/error';\nimport toString from '../util/to-string';\n\nconst visit = (node, opt) => {\n  const f = visitors[node.type];\n  return f\n    ? f(node, opt)\n    : error(`Unsupported expression construct: ${node.type}`);\n};\n\nconst binary = (node, opt) => {\n  return '(' + visit(node.left, opt) + ' ' + node.operator + ' ' + visit(node.right, opt) + ')';\n};\n\nconst func = (node, opt) => {\n  return '(' + list(node.params, opt) + ')=>' + visit(node.body, opt);\n};\n\nconst call = (node, opt) => {\n  return visit(node.callee, opt) + '(' + list(node.arguments, opt) + ')';\n};\n\nconst list = (array, opt, delim = ',') => {\n  return array.map(node => visit(node, opt)).join(delim);\n};\n\nconst name = node => node.computed\n  ? `[${toString(node.name)}]`\n  : `.${node.name}`;\n\nconst ref = (node, opt, method) => {\n  const table = node.table || '';\n  return `data${table}${name(node)}.${method}(${opt.index}${table})`;\n};\n\nconst visitors = {\n  Constant: node => node.raw,\n  Column: (node, opt) => ref(node, opt, 'get'),\n  Dictionary: (node, opt) => ref(node, opt, 'key'),\n  Function: node => `fn.${node.name}`,\n  Parameter: node => `$${name(node)}`,\n  Op: (node, opt) => `op(${toString(node.name)},${opt.op || opt.index})`,\n  Literal: node => node.raw,\n  Identifier: node => node.name,\n  TemplateLiteral: (node, opt) => {\n    const { quasis, expressions } = node;\n    const n = expressions.length;\n    let t = quasis[0].value.raw;\n    for (let i = 0; i < n;) {\n      t += '${' + visit(expressions[i], opt) + '}' + quasis[++i].value.raw;\n    }\n    return '`' + t + '`';\n  },\n  MemberExpression: (node, opt) => {\n    const d = !node.computed;\n    const o = visit(node.object, opt);\n    const p = visit(node.property, opt);\n    return o + (d ? '.' + p : '[' + p + ']');\n  },\n  CallExpression: call,\n  NewExpression: (node, opt) => {\n    return 'new ' + call(node, opt);\n  },\n  ArrayExpression: (node, opt) => {\n    return '[' + list(node.elements, opt) + ']';\n  },\n  AssignmentExpression: binary,\n  BinaryExpression: binary,\n  LogicalExpression: binary,\n  UnaryExpression: (node, opt) => {\n    return '(' + node.operator + visit(node.argument, opt) + ')';\n  },\n  ConditionalExpression: (node, opt) => {\n    return '(' + visit(node.test, opt) +\n      '?' + visit(node.consequent, opt) +\n      ':' + visit(node.alternate, opt) + ')';\n  },\n  ObjectExpression: (node, opt) => {\n    return '({' + list(node.properties, opt) + '})';\n  },\n  Property: (node, opt) => {\n    const key = visit(node.key, opt);\n    return (node.computed ? `[${key}]` : key) + ':' + visit(node.value, opt);\n  },\n\n  ArrowFunctionExpression: func,\n  FunctionExpression: func,\n  FunctionDeclaration: func,\n\n  ArrayPattern: (node, opt) => {\n    return '[' + list(node.elements, opt) + ']';\n  },\n  ObjectPattern: (node, opt) => {\n    return '{' + list(node.properties, opt) + '}';\n  },\n  VariableDeclaration: (node, opt) => {\n    return node.kind + ' ' + list(node.declarations, opt, ',');\n  },\n  VariableDeclarator: (node, opt) => {\n    return visit(node.id, opt) + '=' + visit(node.init, opt);\n  },\n  SpreadElement: (node, opt) => {\n    return '...' + visit(node.argument, opt);\n  },\n\n  BlockStatement: (node, opt) => {\n    return '{' + list(node.body, opt, ';') + ';}';\n  },\n  BreakStatement: () => {\n    return 'break';\n  },\n  ExpressionStatement: (node, opt) => {\n    return visit(node.expression, opt);\n  },\n  IfStatement: (node, opt) => {\n    return 'if (' + visit(node.test, opt) + ')'\n      + visit(node.consequent, opt)\n      + (node.alternate ? ' else ' + visit(node.alternate, opt) : '');\n  },\n  SwitchStatement: (node, opt) => {\n    return 'switch (' + visit(node.discriminant, opt) + ') {'\n     + list(node.cases, opt, '')\n     + '}';\n  },\n  SwitchCase: (node, opt) => {\n    return (node.test ? 'case ' + visit(node.test, opt) : 'default')\n      + ': '\n      + list(node.consequent, opt, ';') + ';';\n  },\n  ReturnStatement: (node, opt) => {\n    return 'return ' + visit(node.argument, opt);\n  },\n  Program: (node, opt) => visit(node.body[0], opt)\n};\n\nexport default function(node, opt = { index: 'row' }) {\n  return visit(node, opt);\n}"],"names":[],"mappings":";;;;;;;;;AAGA,MAAM,KAAK,GAAG,CAAC,IAAI,EAAE,GAAG,KAAK;AAC7B,EAAE,MAAM,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAChC,EAAE,OAAO,CAAC;AACV,MAAM,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC;AAClB,MAAM,KAAK,CAAC,CAAC,kCAAkC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC9D,CAAC,CAAC;AACF;AACA,MAAM,MAAM,GAAG,CAAC,IAAI,EAAE,GAAG,KAAK;AAC9B,EAAE,OAAO,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC;AAChG,CAAC,CAAC;AACF;AACA,MAAM,IAAI,GAAG,CAAC,IAAI,EAAE,GAAG,KAAK;AAC5B,EAAE,OAAO,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;AACtE,CAAC,CAAC;AACF;AACA,MAAM,IAAI,GAAG,CAAC,IAAI,EAAE,GAAG,KAAK;AAC5B,EAAE,OAAO,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC;AACzE,CAAC,CAAC;AACF;AACA,MAAM,IAAI,GAAG,CAAC,KAAK,EAAE,GAAG,EAAE,KAAK,GAAG,GAAG,KAAK;AAC1C,EAAE,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACzD,CAAC,CAAC;AACF;AACA,MAAM,IAAI,GAAG,IAAI,IAAI,IAAI,CAAC,QAAQ;AAClC,IAAI,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC9B,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AACpB;AACA,MAAM,GAAG,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,KAAK;AACnC,EAAE,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;AACjC,EAAE,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;AACrE,CAAC,CAAC;AACF;AACA,MAAM,QAAQ,GAAG;AACjB,EAAE,QAAQ,EAAE,IAAI,IAAI,IAAI,CAAC,GAAG;AAC5B,EAAE,MAAM,EAAE,CAAC,IAAI,EAAE,GAAG,KAAK,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,CAAC;AAC9C,EAAE,UAAU,EAAE,CAAC,IAAI,EAAE,GAAG,KAAK,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,CAAC;AAClD,EAAE,QAAQ,EAAE,IAAI,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;AACrC,EAAE,SAAS,EAAE,IAAI,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AACrC,EAAE,EAAE,EAAE,CAAC,IAAI,EAAE,GAAG,KAAK,CAAC,GAAG,EAAE,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;AACxE,EAAE,OAAO,EAAE,IAAI,IAAI,IAAI,CAAC,GAAG;AAC3B,EAAE,UAAU,EAAE,IAAI,IAAI,IAAI,CAAC,IAAI;AAC/B,EAAE,eAAe,EAAE,CAAC,IAAI,EAAE,GAAG,KAAK;AAClC,IAAI,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC;AACzC,IAAI,MAAM,CAAC,GAAG,WAAW,CAAC,MAAM,CAAC;AACjC,IAAI,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC;AAChC,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG;AAC5B,MAAM,CAAC,IAAI,IAAI,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC;AAC3E,KAAK;AACL,IAAI,OAAO,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AACzB,GAAG;AACH,EAAE,gBAAgB,EAAE,CAAC,IAAI,EAAE,GAAG,KAAK;AACnC,IAAI,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;AAC7B,IAAI,MAAM,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AACtC,IAAI,MAAM,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;AACxC,IAAI,OAAO,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAC7C,GAAG;AACH,EAAE,cAAc,EAAE,IAAI;AACtB,EAAE,aAAa,EAAE,CAAC,IAAI,EAAE,GAAG,KAAK;AAChC,IAAI,OAAO,MAAM,GAAG,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;AACpC,GAAG;AACH,EAAE,eAAe,EAAE,CAAC,IAAI,EAAE,GAAG,KAAK;AAClC,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC;AAChD,GAAG;AACH,EAAE,oBAAoB,EAAE,MAAM;AAC9B,EAAE,gBAAgB,EAAE,MAAM;AAC1B,EAAE,iBAAiB,EAAE,MAAM;AAC3B,EAAE,eAAe,EAAE,CAAC,IAAI,EAAE,GAAG,KAAK;AAClC,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC;AACjE,GAAG;AACH,EAAE,qBAAqB,EAAE,CAAC,IAAI,EAAE,GAAG,KAAK;AACxC,IAAI,OAAO,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC;AACtC,MAAM,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,CAAC;AACvC,MAAM,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC;AAC7C,GAAG;AACH,EAAE,gBAAgB,EAAE,CAAC,IAAI,EAAE,GAAG,KAAK;AACnC,IAAI,OAAO,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC;AACpD,GAAG;AACH,EAAE,QAAQ,EAAE,CAAC,IAAI,EAAE,GAAG,KAAK;AAC3B,IAAI,MAAM,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AACrC,IAAI,OAAO,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;AAC7E,GAAG;AACH;AACA,EAAE,uBAAuB,EAAE,IAAI;AAC/B,EAAE,kBAAkB,EAAE,IAAI;AAC1B,EAAE,mBAAmB,EAAE,IAAI;AAC3B;AACA,EAAE,YAAY,EAAE,CAAC,IAAI,EAAE,GAAG,KAAK;AAC/B,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC;AAChD,GAAG;AACH,EAAE,aAAa,EAAE,CAAC,IAAI,EAAE,GAAG,KAAK;AAChC,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC;AAClD,GAAG;AACH,EAAE,mBAAmB,EAAE,CAAC,IAAI,EAAE,GAAG,KAAK;AACtC,IAAI,OAAO,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AAC/D,GAAG;AACH,EAAE,kBAAkB,EAAE,CAAC,IAAI,EAAE,GAAG,KAAK;AACrC,IAAI,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;AAC7D,GAAG;AACH,EAAE,aAAa,EAAE,CAAC,IAAI,EAAE,GAAG,KAAK;AAChC,IAAI,OAAO,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;AAC7C,GAAG;AACH;AACA,EAAE,cAAc,EAAE,CAAC,IAAI,EAAE,GAAG,KAAK;AACjC,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC;AAClD,GAAG;AACH,EAAE,cAAc,EAAE,MAAM;AACxB,IAAI,OAAO,OAAO,CAAC;AACnB,GAAG;AACH,EAAE,mBAAmB,EAAE,CAAC,IAAI,EAAE,GAAG,KAAK;AACtC,IAAI,OAAO,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;AACvC,GAAG;AACH,EAAE,WAAW,EAAE,CAAC,IAAI,EAAE,GAAG,KAAK;AAC9B,IAAI,OAAO,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,GAAG;AAC/C,QAAQ,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,CAAC;AACnC,SAAS,IAAI,CAAC,SAAS,GAAG,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;AACtE,GAAG;AACH,EAAE,eAAe,EAAE,CAAC,IAAI,EAAE,GAAG,KAAK;AAClC,IAAI,OAAO,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,YAAY,EAAE,GAAG,CAAC,GAAG,KAAK;AAC7D,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC;AAChC,OAAO,GAAG,CAAC;AACX,GAAG;AACH,EAAE,UAAU,EAAE,CAAC,IAAI,EAAE,GAAG,KAAK;AAC7B,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,SAAS;AACnE,QAAQ,IAAI;AACZ,QAAQ,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC;AAC9C,GAAG;AACH,EAAE,eAAe,EAAE,CAAC,IAAI,EAAE,GAAG,KAAK;AAClC,IAAI,OAAO,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;AACjD,GAAG;AACH,EAAE,OAAO,EAAE,CAAC,IAAI,EAAE,GAAG,KAAK,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC;AAClD,CAAC,CAAC;AACF;AACe,gBAAQ,CAAC,IAAI,EAAE,GAAG,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE;AACtD,EAAE,OAAO,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;AAC1B;;;;","x_google_ignoreList":[0]}