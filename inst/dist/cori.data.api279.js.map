{"version":3,"file":"cori.data.api279.js","sources":["../../node_modules/arquero/src/format/to-json.js"],"sourcesContent":["import ColumnTable from '../table/column-table'; // eslint-disable-line no-unused-vars\n\nimport { columns } from './util';\nimport { formatUTCDate } from '../util/format-date';\nimport defaultTrue from '../util/default-true';\nimport isDate from '../util/is-date';\n\n/**\n * Options for JSON formatting.\n * @typedef {object} JSONFormatOptions\n * @property {number} [limit=Infinity] The maximum number of rows to print.\n * @property {number} [offset=0] The row offset indicating how many initial\n *  rows to skip.\n * @property {boolean} [schema=true] Flag indicating if table schema metadata\n *  should be included in the JSON output. If false, only the data payload\n *  is included.\n * @property {import('./util').ColumnSelectOptions} [columns] Ordered list\n *  of column names to include. If function-valued, the function should\n *  accept a table as input and return an array of column name strings.\n * @property {Object.<string, (value: any) => any>} [format] Object of column\n *  format options. The object keys should be column names. The object values\n *  should be formatting functions to invoke to transform column values prior\n *  to output. If specified, these override automatically inferred options.\n */\n\nconst defaultFormatter = value => isDate(value)\n  ? formatUTCDate(value, true)\n  : value;\n\n/**\n * Format a table as a JavaScript Object Notation (JSON) string.\n * @param {ColumnTable} table The table to format.\n * @param {JSONFormatOptions} options The formatting options.\n * @return {string} A JSON string.\n */\nexport default function(table, options = {}) {\n  const schema = defaultTrue(options.schema);\n  const format = options.format || {};\n  const names = columns(table, options.columns);\n  let text = '{';\n\n  if (schema) {\n    text += '\"schema\":{\"fields\":'\n      + JSON.stringify(names.map(name => ({ name })))\n      + '},\"data\":{';\n  }\n\n  names.forEach((name, i) => {\n    text += (i ? ',' : '') + JSON.stringify(name) + ':[';\n\n    const column = table.column(name);\n    const formatter = format[name] || defaultFormatter;\n    let r = -1;\n    table.scan(row => {\n      const value = column.get(row);\n      text += (++r ? ',' : '') + JSON.stringify(formatter(value));\n    }, true, options.limit, options.offset);\n\n    text += ']';\n  });\n\n  return text + '}' + (schema ? '}' : '');\n}"],"names":["defaultFormatter","value","isDate","formatUTCDate","toJSON","table","options","schema","defaultTrue","format","names","columns","text","name","i","column","formatter","r","row"],"mappings":";;;;;;;;;;;;AAyBA,MAAMA,IAAmB,CAAAC,MAASC,EAAOD,CAAK,IAC1CE,EAAcF,GAAO,EAAI,IACzBA;AAQW,SAAAG,EAASC,GAAOC,IAAU,IAAI;AAC3C,QAAMC,IAASC,EAAYF,EAAQ,MAAM,GACnCG,IAASH,EAAQ,UAAU,IAC3BI,IAAQC,EAAQN,GAAOC,EAAQ,OAAO;AAC5C,MAAIM,IAAO;AAEX,SAAIL,MACFK,KAAQ,wBACJ,KAAK,UAAUF,EAAM,IAAI,CAAAG,OAAS,EAAE,MAAAA,EAAM,EAAC,CAAC,IAC5C,eAGNH,EAAM,QAAQ,CAACG,GAAMC,MAAM;AACzB,IAAAF,MAASE,IAAI,MAAM,MAAM,KAAK,UAAUD,CAAI,IAAI;AAEhD,UAAME,IAASV,EAAM,OAAOQ,CAAI,GAC1BG,IAAYP,EAAOI,CAAI,KAAKb;AAClC,QAAIiB,IAAI;AACR,IAAAZ,EAAM,KAAK,CAAAa,MAAO;AAChB,YAAMjB,IAAQc,EAAO,IAAIG,CAAG;AAC5B,MAAAN,MAAS,EAAEK,IAAI,MAAM,MAAM,KAAK,UAAUD,EAAUf,CAAK,CAAC;AAAA,IAC3D,GAAE,IAAMK,EAAQ,OAAOA,EAAQ,MAAM,GAEtCM,KAAQ;AAAA,EACZ,CAAG,GAEMA,IAAO,OAAOL,IAAS,MAAM;AACtC;","x_google_ignoreList":[0]}