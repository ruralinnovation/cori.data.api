{"version":3,"file":"cori.data.api349.js","sources":["../../node_modules/arquero/src/query/to-ast.js"],"sourcesContent":["import error from '../util/error';\nimport isArray from '../util/is-array';\nimport isFunction from '../util/is-function';\nimport isNumber from '../util/is-number';\nimport isObject from '../util/is-object';\nimport isString from '../util/is-string';\nimport toArray from '../util/to-array';\nimport parse from '../expression/parse';\nimport { isSelection, toObject } from './util';\n\nimport { Column } from '../expression/ast/constants';\nimport {\n  Descending,\n  Expr,\n  ExprList,\n  ExprNumber,\n  ExprObject,\n  JoinKeys,\n  JoinValues,\n  Options,\n  OrderbyKeys,\n  Selection,\n  SelectionList,\n  TableRef,\n  TableRefList,\n  Window\n} from './constants';\n\nconst Methods = {\n  [Expr]: astExpr,\n  [ExprList]: astExprList,\n  [ExprNumber]: astExprNumber,\n  [ExprObject]: astExprObject,\n  [JoinKeys]: astJoinKeys,\n  [JoinValues]: astJoinValues,\n  [OrderbyKeys]: astExprList,\n  [SelectionList]: astSelectionList\n};\n\nexport default function(value, type, propTypes) {\n  return type === TableRef ? astTableRef(value)\n    : type === TableRefList ? value.map(astTableRef)\n    : ast(toObject(value), type, propTypes);\n}\n\nfunction ast(value, type, propTypes) {\n  return type === Options\n    ? (value ? astOptions(value, propTypes) : value)\n    : Methods[type](value);\n}\n\nfunction astOptions(value, types = {}) {\n  const output = {};\n  for (const key in value) {\n    const prop = value[key];\n    output[key] = types[key] ? ast(prop, types[key]) : prop;\n  }\n  return output;\n}\n\nfunction astParse(expr, opt) {\n  return parse({ expr }, { ...opt, ast: true }).exprs[0];\n}\n\nfunction astColumn(name) {\n  return { type: Column, name };\n}\n\nfunction astColumnIndex(index) {\n  return { type: Column, index };\n}\n\nfunction astExprObject(obj, opt) {\n  if (isString(obj)) {\n    return astParse(obj, opt);\n  }\n\n  if (obj.expr) {\n    let ast;\n    if (obj.field === true) {\n      ast = astColumn(obj.expr);\n    } else if (obj.func === true) {\n      ast = astExprObject(obj.expr, opt);\n    }\n    if (ast) {\n      if (obj.desc) {\n        ast = { type: Descending, expr: ast };\n      }\n      if (obj.window) {\n        ast = { type: Window, expr: ast, ...obj.window };\n      }\n      return ast;\n    }\n  }\n\n  return Object.keys(obj)\n    .map(key => ({\n      ...astExprObject(obj[key], opt),\n      as: key\n    }));\n}\n\nfunction astSelection(sel) {\n  const type = Selection;\n  return sel.all ? { type, operator: 'all' }\n    : sel.not ? { type, operator: 'not', arguments: astExprList(sel.not) }\n    : sel.range ? { type, operator: 'range', arguments: astExprList(sel.range) }\n    : sel.matches ? { type, operator: 'matches', arguments: sel.matches }\n    : error('Invalid input');\n}\n\nfunction astSelectionList(arr) {\n  return toArray(arr).map(astSelectionItem).flat();\n}\n\nfunction astSelectionItem(val) {\n  return isSelection(val) ? astSelection(val)\n    : isNumber(val) ? astColumnIndex(val)\n    : isString(val) ? astColumn(val)\n    : isObject(val) ? Object.keys(val)\n      .map(name => ({ type: Column, name, as: val[name] }))\n    : error('Invalid input');\n}\n\nfunction astExpr(val) {\n  return isSelection(val) ? astSelection(val)\n    : isNumber(val) ? astColumnIndex(val)\n    : isString(val) ? astColumn(val)\n    : isObject(val) ? astExprObject(val)\n    : error('Invalid input');\n}\n\nfunction astExprList(arr) {\n  return toArray(arr).map(astExpr).flat();\n}\n\nfunction astExprNumber(val) {\n  return isNumber(val) ? val : astExprObject(val);\n}\n\nfunction astJoinKeys(val) {\n  return isArray(val)\n    ? val.map(astExprList)\n    : astExprObject(val, { join: true });\n}\n\nfunction astJoinValues(val) {\n  return isArray(val)\n    ? val.map((v, i) => i < 2\n        ? astExprList(v)\n        : astExprObject(v, { join: true })\n      )\n    : astExprObject(val, { join: true });\n}\n\nfunction astTableRef(value) {\n  return value && isFunction(value.toAST)\n    ? value.toAST()\n    : value;\n}"],"names":["Methods","Expr","astExpr","ExprList","astExprList","ExprNumber","astExprNumber","ExprObject","astExprObject","JoinKeys","astJoinKeys","JoinValues","astJoinValues","OrderbyKeys","SelectionList","astSelectionList","toAST","value","type","propTypes","TableRef","astTableRef","TableRefList","ast","toObject","Options","astOptions","types","output","key","prop","astParse","expr","opt","parse","astColumn","name","Column","astColumnIndex","index","obj","isString","Descending","Window","astSelection","sel","Selection","error","arr","toArray","astSelectionItem","val","isSelection","isNumber","isObject","isArray","v","i","isFunction"],"mappings":"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","x_google_ignoreList":[0]}