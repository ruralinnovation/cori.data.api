{"version":3,"file":"verb.js","sources":["../../../../../../node_modules/arquero/src/query/verb.js"],"sourcesContent":["import { Verb as VerbType } from './constants';\n\nimport {\n  fromObject,\n  getTable,\n  joinKeys,\n  joinValues,\n  orderbyKeys,\n  toObject\n} from './util';\n\nimport {\n  Expr,\n  ExprList,\n  ExprNumber,\n  ExprObject,\n  JoinKeys,\n  JoinValues,\n  Options,\n  OrderbyKeys,\n  SelectionList,\n  TableRef,\n  TableRefList\n} from './constants';\n\nimport toAST from './to-ast';\n\n/**\n * Model an Arquero verb as a serializable object.\n */\nexport class Verb {\n\n  /**\n   * Construct a new verb instance.\n   * @param {string} verb The verb name.\n   * @param {object[]} schema Schema describing verb parameters.\n   * @param {any[]} params Array of parameter values.\n   */\n  constructor(verb, schema = [], params = []) {\n    this.verb = verb;\n    this.schema = schema;\n    schema.forEach((s, index) => {\n      const type = s.type;\n      const param = params[index];\n      const value = type === JoinKeys ? joinKeys(param)\n        : type === JoinValues ? joinValues(param)\n        : type === OrderbyKeys ? orderbyKeys(param)\n        : param;\n      this[s.name] = value !== undefined ? value : s.default;\n    });\n  }\n\n  /**\n   * Create new verb instance from the given serialized object.\n   * @param {object} object A serialized verb representation, such as\n   *  those generated by Verb.toObject.\n   * @returns {Verb} The instantiated verb.\n   */\n  static from(object) {\n    const verb = Verbs[object.verb];\n    const params = (verb.schema || [])\n      .map(({ name }) => fromObject(object[name]));\n    return verb(...params);\n  }\n\n  /**\n   * Evaluate this verb against a given table and catalog.\n   * @param {Table} table The Arquero table to process.\n   * @param {Function} catalog A table lookup function that accepts a table\n   *  name string as input and returns a corresponding Arquero table.\n   * @returns {Table} The resulting Arquero table.\n   */\n  evaluate(table, catalog) {\n    const params = this.schema.map(({ name, type }) => {\n      const value = this[name];\n      return type === TableRef ? getTable(catalog, value)\n        : type === TableRefList ? value.map(t => getTable(catalog, t))\n        : value;\n    });\n    return table[this.verb](...params);\n  }\n\n  /**\n   * Serialize this verb as a JSON-compatible object. The resulting\n   * object can be passed to Verb.from to re-instantiate this verb.\n   * @returns {object} A JSON-compatible object representing this verb.\n   */\n  toObject() {\n    const obj = { verb: this.verb };\n    this.schema.forEach(({ name }) => {\n      obj[name] = toObject(this[name]);\n    });\n    return obj;\n  }\n\n  /**\n   * Serialize this verb to a JSON-compatible abstract syntax tree.\n   * All table expressions will be parsed and represented as AST instances\n   * using a modified form of the Mozilla JavaScript AST format.\n   * This method can be used to output parsed and serialized representations\n   * to translate Arquero verbs to alternative data processing platforms.\n   * @returns {object} A JSON-compatible abstract syntax tree object.\n   */\n  toAST() {\n    const obj = { type: VerbType, verb: this.verb };\n    this.schema.forEach(({ name, type, props }) => {\n      obj[name] = toAST(this[name], type, props);\n    });\n    return obj;\n  }\n}\n\n/**\n * Verb parameter type.\n * @typedef {Expr|ExprList|ExprNumber|ExprObject|JoinKeys|JoinValues|Options|OrderbyKeys|SelectionList|TableRef|TableRefList} ParamType\n */\n\n/**\n * Verb parameter schema.\n * @typedef {object} ParamDef\n * @property {string} name The name of the parameter.\n * @property {ParamType} type The type of the parameter.\n * @property {{ [key: string]: ParamType }} [props] Types for non-literal properties.\n */\n\n/**\n * Create a new constructors.\n * @param {string} name The name of the verb.\n * @param {ParamDef[]} schema The verb parameter schema.\n * @return {Function} A verb constructor function.\n */\nexport function createVerb(name, schema) {\n  return Object.assign(\n    (...params) => new Verb(name, schema, params),\n    { schema }\n  );\n}\n\n/**\n * A lookup table of verb classes.\n */\nexport const Verbs = {\n  count:      createVerb('count', [\n                { name: 'options', type: Options }\n              ]),\n  derive:     createVerb('derive', [\n                { name: 'values', type: ExprObject },\n                { name: 'options', type: Options,\n                  props: { before: SelectionList, after: SelectionList }\n                }\n              ]),\n  filter:     createVerb('filter', [\n                { name: 'criteria', type: ExprObject }\n              ]),\n  groupby:    createVerb('groupby', [\n                { name: 'keys', type: ExprList }\n              ]),\n  orderby:    createVerb('orderby', [\n                { name: 'keys', type: OrderbyKeys }\n              ]),\n  relocate:   createVerb('relocate', [\n                { name: 'columns', type: SelectionList },\n                { name: 'options', type: Options,\n                  props: { before: SelectionList, after: SelectionList }\n                }\n              ]),\n  rename:     createVerb('rename', [\n                { name: 'columns', type: SelectionList }\n              ]),\n  rollup:     createVerb('rollup', [\n                { name: 'values', type: ExprObject }\n              ]),\n  sample:     createVerb('sample', [\n                { name: 'size', type: ExprNumber },\n                { name: 'options', type: Options, props: { weight: Expr } }\n              ]),\n  select:     createVerb('select', [\n                { name: 'columns', type: SelectionList }\n              ]),\n  ungroup:    createVerb('ungroup'),\n  unorder:    createVerb('unorder'),\n  reify:      createVerb('reify'),\n  dedupe:     createVerb('dedupe', [\n                { name: 'keys', type: ExprList, default: [] }\n              ]),\n  impute:     createVerb('impute', [\n                { name: 'values', type: ExprObject },\n                { name: 'options', type: Options, props: { expand: ExprList } }\n              ]),\n  fold:       createVerb('fold', [\n                { name: 'values', type: ExprList },\n                { name: 'options', type: Options }\n              ]),\n  pivot:      createVerb('pivot', [\n                { name: 'keys', type: ExprList },\n                { name: 'values', type: ExprList },\n                { name: 'options', type: Options }\n              ]),\n  spread:     createVerb('spread', [\n                { name: 'values', type: ExprList },\n                { name: 'options', type: Options }\n              ]),\n  unroll:     createVerb('unroll', [\n                { name: 'values', type: ExprList },\n                { name: 'options', type: Options, props: { drop: ExprList } }\n              ]),\n  lookup:     createVerb('lookup', [\n                { name: 'table', type: TableRef },\n                { name: 'on', type: JoinKeys },\n                { name: 'values', type: ExprList }\n              ]),\n  join:       createVerb('join', [\n                { name: 'table', type: TableRef },\n                { name: 'on', type: JoinKeys },\n                { name: 'values', type: JoinValues },\n                { name: 'options', type: Options }\n              ]),\n  cross:      createVerb('cross', [\n                { name: 'table', type: TableRef },\n                { name: 'values', type: JoinValues },\n                { name: 'options', type: Options }\n              ]),\n  semijoin:   createVerb('semijoin', [\n                { name: 'table', type: TableRef },\n                { name: 'on', type: JoinKeys }\n              ]),\n  antijoin:   createVerb('antijoin', [\n                { name: 'table', type: TableRef },\n                { name: 'on', type: JoinKeys }\n              ]),\n  concat:     createVerb('concat', [\n                { name: 'tables', type: TableRefList }\n              ]),\n  union:      createVerb('union', [\n                { name: 'tables', type: TableRefList }\n              ]),\n  intersect:  createVerb('intersect', [\n                { name: 'tables', type: TableRefList }\n              ]),\n  except:     createVerb('except', [\n                { name: 'tables', type: TableRefList }\n              ])\n};\n\n/**\n * Abstract class representing a data table.\n * @typedef {import('../table/table').default} Table\n */\n"],"names":["VerbType"],"mappings":"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","x_google_ignoreList":[0]}