{"version":3,"file":"cori.data.api557.js","sources":["../../node_modules/apache-arrow/visitor/indexof.mjs"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Type } from '../enum.mjs';\nimport { Visitor } from '../visitor.mjs';\nimport { instance as getVisitor } from './get.mjs';\nimport { getBool, BitIterator } from '../util/bit.mjs';\nimport { createElementComparator } from '../util/vector.mjs';\n/** @ignore */\nexport class IndexOfVisitor extends Visitor {\n}\n/** @ignore */\nfunction nullIndexOf(data, searchElement) {\n    // if you're looking for nulls and the vector isn't empty, we've got 'em!\n    return searchElement === null && data.length > 0 ? 0 : -1;\n}\n/** @ignore */\nfunction indexOfNull(data, fromIndex) {\n    const { nullBitmap } = data;\n    if (!nullBitmap || data.nullCount <= 0) {\n        return -1;\n    }\n    let i = 0;\n    for (const isValid of new BitIterator(nullBitmap, data.offset + (fromIndex || 0), data.length, nullBitmap, getBool)) {\n        if (!isValid) {\n            return i;\n        }\n        ++i;\n    }\n    return -1;\n}\n/** @ignore */\nfunction indexOfValue(data, searchElement, fromIndex) {\n    if (searchElement === undefined) {\n        return -1;\n    }\n    if (searchElement === null) {\n        switch (data.typeId) {\n            // Unions don't have a nullBitmap of its own, so compare the `searchElement` to `get()`.\n            case Type.Union:\n                break;\n            // Dictionaries do have a nullBitmap, but their dictionary could also have null elements.\n            case Type.Dictionary:\n                break;\n            // All other types can iterate the null bitmap\n            default:\n                return indexOfNull(data, fromIndex);\n        }\n    }\n    const get = getVisitor.getVisitFn(data);\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = data.length; ++i < n;) {\n        if (compare(get(data, i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n/** @ignore */\nfunction indexOfUnion(data, searchElement, fromIndex) {\n    // Unions are special -- they do have a nullBitmap, but so can their children.\n    // If the searchElement is null, we don't know whether it came from the Union's\n    // bitmap or one of its children's. So we don't interrogate the Union's bitmap,\n    // since that will report the wrong index if a child has a null before the Union.\n    const get = getVisitor.getVisitFn(data);\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = data.length; ++i < n;) {\n        if (compare(get(data, i))) {\n            return i;\n        }\n    }\n    return -1;\n}\nIndexOfVisitor.prototype.visitNull = nullIndexOf;\nIndexOfVisitor.prototype.visitBool = indexOfValue;\nIndexOfVisitor.prototype.visitInt = indexOfValue;\nIndexOfVisitor.prototype.visitInt8 = indexOfValue;\nIndexOfVisitor.prototype.visitInt16 = indexOfValue;\nIndexOfVisitor.prototype.visitInt32 = indexOfValue;\nIndexOfVisitor.prototype.visitInt64 = indexOfValue;\nIndexOfVisitor.prototype.visitUint8 = indexOfValue;\nIndexOfVisitor.prototype.visitUint16 = indexOfValue;\nIndexOfVisitor.prototype.visitUint32 = indexOfValue;\nIndexOfVisitor.prototype.visitUint64 = indexOfValue;\nIndexOfVisitor.prototype.visitFloat = indexOfValue;\nIndexOfVisitor.prototype.visitFloat16 = indexOfValue;\nIndexOfVisitor.prototype.visitFloat32 = indexOfValue;\nIndexOfVisitor.prototype.visitFloat64 = indexOfValue;\nIndexOfVisitor.prototype.visitUtf8 = indexOfValue;\nIndexOfVisitor.prototype.visitLargeUtf8 = indexOfValue;\nIndexOfVisitor.prototype.visitBinary = indexOfValue;\nIndexOfVisitor.prototype.visitLargeBinary = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeBinary = indexOfValue;\nIndexOfVisitor.prototype.visitDate = indexOfValue;\nIndexOfVisitor.prototype.visitDateDay = indexOfValue;\nIndexOfVisitor.prototype.visitDateMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestamp = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampSecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampNanosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTime = indexOfValue;\nIndexOfVisitor.prototype.visitTimeSecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimeNanosecond = indexOfValue;\nIndexOfVisitor.prototype.visitDecimal = indexOfValue;\nIndexOfVisitor.prototype.visitList = indexOfValue;\nIndexOfVisitor.prototype.visitStruct = indexOfValue;\nIndexOfVisitor.prototype.visitUnion = indexOfValue;\nIndexOfVisitor.prototype.visitDenseUnion = indexOfUnion;\nIndexOfVisitor.prototype.visitSparseUnion = indexOfUnion;\nIndexOfVisitor.prototype.visitDictionary = indexOfValue;\nIndexOfVisitor.prototype.visitInterval = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalDayTime = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalYearMonth = indexOfValue;\nIndexOfVisitor.prototype.visitDuration = indexOfValue;\nIndexOfVisitor.prototype.visitDurationSecond = indexOfValue;\nIndexOfVisitor.prototype.visitDurationMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitDurationMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitDurationNanosecond = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeList = indexOfValue;\nIndexOfVisitor.prototype.visitMap = indexOfValue;\n/** @ignore */\nexport const instance = new IndexOfVisitor();\n\n//# sourceMappingURL=indexof.mjs.map\n"],"names":["IndexOfVisitor","Visitor","nullIndexOf","data","searchElement","indexOfNull","fromIndex","nullBitmap","i","isValid","BitIterator","getBool","indexOfValue","Type","get","getVisitor","compare","createElementComparator","n","indexOfUnion","instance"],"mappings":";;;;;;;;;;;AAsBO,MAAMA,UAAuBC,EAAQ;AAC5C;AAEA,SAASC,EAAYC,GAAMC,GAAe;AAEtC,SAAOA,MAAkB,QAAQD,EAAK,SAAS,IAAI,IAAI;AAC3D;AAEA,SAASE,EAAYF,GAAMG,GAAW;AAClC,QAAM,EAAE,YAAAC,EAAY,IAAGJ;AACvB,MAAI,CAACI,KAAcJ,EAAK,aAAa;AACjC,WAAO;AAEX,MAAIK,IAAI;AACR,aAAWC,KAAW,IAAIC,EAAYH,GAAYJ,EAAK,UAAUG,KAAa,IAAIH,EAAK,QAAQI,GAAYI,CAAO,GAAG;AACjH,QAAI,CAACF;AACD,aAAOD;AAEX,MAAEA;AAAA,EACL;AACD,SAAO;AACX;AAEA,SAASI,EAAaT,GAAMC,GAAeE,GAAW;AAClD,MAAIF,MAAkB;AAClB,WAAO;AAEX,MAAIA,MAAkB;AAClB,YAAQD,EAAK,QAAM;AAAA,MAEf,KAAKU,EAAK;AACN;AAAA,MAEJ,KAAKA,EAAK;AACN;AAAA,MAEJ;AACI,eAAOR,EAAYF,GAAMG,CAAS;AAAA,IACzC;AAEL,QAAMQ,IAAMC,EAAW,WAAWZ,CAAI,GAChCa,IAAUC,EAAwBb,CAAa;AACrD,WAASI,KAAKF,KAAa,KAAK,GAAGY,IAAIf,EAAK,QAAQ,EAAEK,IAAIU;AACtD,QAAIF,EAAQF,EAAIX,GAAMK,CAAC,CAAC;AACpB,aAAOA;AAGf,SAAO;AACX;AAEA,SAASW,EAAahB,GAAMC,GAAeE,GAAW;AAKlD,QAAMQ,IAAMC,EAAW,WAAWZ,CAAI,GAChCa,IAAUC,EAAwBb,CAAa;AACrD,WAASI,KAAKF,KAAa,KAAK,GAAGY,IAAIf,EAAK,QAAQ,EAAEK,IAAIU;AACtD,QAAIF,EAAQF,EAAIX,GAAMK,CAAC,CAAC;AACpB,aAAOA;AAGf,SAAO;AACX;AACAR,EAAe,UAAU,YAAYE;AACrCF,EAAe,UAAU,YAAYY;AACrCZ,EAAe,UAAU,WAAWY;AACpCZ,EAAe,UAAU,YAAYY;AACrCZ,EAAe,UAAU,aAAaY;AACtCZ,EAAe,UAAU,aAAaY;AACtCZ,EAAe,UAAU,aAAaY;AACtCZ,EAAe,UAAU,aAAaY;AACtCZ,EAAe,UAAU,cAAcY;AACvCZ,EAAe,UAAU,cAAcY;AACvCZ,EAAe,UAAU,cAAcY;AACvCZ,EAAe,UAAU,aAAaY;AACtCZ,EAAe,UAAU,eAAeY;AACxCZ,EAAe,UAAU,eAAeY;AACxCZ,EAAe,UAAU,eAAeY;AACxCZ,EAAe,UAAU,YAAYY;AACrCZ,EAAe,UAAU,iBAAiBY;AAC1CZ,EAAe,UAAU,cAAcY;AACvCZ,EAAe,UAAU,mBAAmBY;AAC5CZ,EAAe,UAAU,uBAAuBY;AAChDZ,EAAe,UAAU,YAAYY;AACrCZ,EAAe,UAAU,eAAeY;AACxCZ,EAAe,UAAU,uBAAuBY;AAChDZ,EAAe,UAAU,iBAAiBY;AAC1CZ,EAAe,UAAU,uBAAuBY;AAChDZ,EAAe,UAAU,4BAA4BY;AACrDZ,EAAe,UAAU,4BAA4BY;AACrDZ,EAAe,UAAU,2BAA2BY;AACpDZ,EAAe,UAAU,YAAYY;AACrCZ,EAAe,UAAU,kBAAkBY;AAC3CZ,EAAe,UAAU,uBAAuBY;AAChDZ,EAAe,UAAU,uBAAuBY;AAChDZ,EAAe,UAAU,sBAAsBY;AAC/CZ,EAAe,UAAU,eAAeY;AACxCZ,EAAe,UAAU,YAAYY;AACrCZ,EAAe,UAAU,cAAcY;AACvCZ,EAAe,UAAU,aAAaY;AACtCZ,EAAe,UAAU,kBAAkBmB;AAC3CnB,EAAe,UAAU,mBAAmBmB;AAC5CnB,EAAe,UAAU,kBAAkBY;AAC3CZ,EAAe,UAAU,gBAAgBY;AACzCZ,EAAe,UAAU,uBAAuBY;AAChDZ,EAAe,UAAU,yBAAyBY;AAClDZ,EAAe,UAAU,gBAAgBY;AACzCZ,EAAe,UAAU,sBAAsBY;AAC/CZ,EAAe,UAAU,2BAA2BY;AACpDZ,EAAe,UAAU,2BAA2BY;AACpDZ,EAAe,UAAU,0BAA0BY;AACnDZ,EAAe,UAAU,qBAAqBY;AAC9CZ,EAAe,UAAU,WAAWY;AAExB,MAACQ,IAAW,IAAIpB,EAAc;","x_google_ignoreList":[0]}