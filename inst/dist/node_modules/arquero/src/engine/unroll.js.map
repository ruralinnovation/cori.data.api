{"version":3,"file":"unroll.js","sources":["../../../../../../node_modules/arquero/src/engine/unroll.js"],"sourcesContent":["import { aggregateGet } from './reduce/util';\nimport columnSet from '../table/column-set';\nimport toArray from '../util/to-array';\n\nexport default function(table, { names = [], exprs = [], ops = [] }, options = {}) {\n  if (!names.length) return table;\n\n  const limit = options.limit > 0 ? +options.limit : Infinity;\n  const index = options.index\n    ? options.index === true ? 'index' : options.index + ''\n    : null;\n  const drop = new Set(options.drop);\n  const get = aggregateGet(table, ops, exprs);\n\n  // initialize output columns\n  const cols = columnSet();\n  const nset = new Set(names);\n  const priors = [];\n  const copies = [];\n  const unroll = [];\n\n  // original and copied columns\n  table.columnNames().forEach(name => {\n    if (!drop.has(name)) {\n      const col = cols.add(name, []);\n      if (!nset.has(name)) {\n        priors.push(table.column(name));\n        copies.push(col);\n      }\n    }\n  });\n\n  // unrolled output columns\n  names.forEach(name => {\n    if (!drop.has(name)) {\n      if (!cols.has(name)) cols.add(name, []);\n      unroll.push(cols.data[name]);\n    }\n  });\n\n  // index column, if requested\n  const icol = index ? cols.add(index, []) : null;\n\n  let start = 0;\n  const m = priors.length;\n  const n = unroll.length;\n\n  const copy = (row, maxlen) => {\n    for (let i = 0; i < m; ++i) {\n      copies[i].length = start + maxlen;\n      copies[i].fill(priors[i].get(row), start, start + maxlen);\n    }\n  };\n\n  const indices = icol\n    ? (row, maxlen) => {\n        for (let i = 0; i < maxlen; ++i) {\n          icol[row + i] = i;\n        }\n      }\n    : () => {};\n\n  if (n === 1) {\n    // optimize common case of one array-valued column\n    const fn = get[0];\n    const col = unroll[0];\n\n    table.scan((row, data) => {\n      // extract array data\n      const array = toArray(fn(row, data));\n      const maxlen = Math.min(array.length, limit);\n\n      // copy original table data\n      copy(row, maxlen);\n\n      // copy unrolled array data\n      for (let j = 0; j < maxlen; ++j) {\n        col[start + j] = array[j];\n      }\n\n      // fill in array indices\n      indices(start, maxlen);\n\n      start += maxlen;\n    });\n  } else {\n    table.scan((row, data) => {\n      let maxlen = 0;\n\n      // extract parallel array data\n      const arrays = get.map(fn => {\n        const value = toArray(fn(row, data));\n        maxlen = Math.min(Math.max(maxlen, value.length), limit);\n        return value;\n      });\n\n      // copy original table data\n      copy(row, maxlen);\n\n      // copy unrolled array data\n      for (let i = 0; i < n; ++i) {\n        const col = unroll[i];\n        const arr = arrays[i];\n        for (let j = 0; j < maxlen; ++j) {\n          col[start + j] = arr[j];\n        }\n      }\n\n      // fill in array indices\n      indices(start, maxlen);\n\n      start += maxlen;\n    });\n  }\n\n  return table.create(cols.new());\n}"],"names":[],"mappings":"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","x_google_ignoreList":[0]}