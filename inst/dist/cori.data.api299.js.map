{"version":3,"file":"cori.data.api299.js","sources":["../../node_modules/arquero/src/engine/reduce/util.js"],"sourcesContent":["import fieldReducer from './field-reducer';\nimport repeat from '../../util/repeat';\n\nexport function aggregateGet(table, ops, get) {\n  if (ops.length) {\n    const data = table.data();\n    const { keys } = table.groups() || {};\n    const result = aggregate(table, ops);\n    const op = keys\n      ? (name, row) => result[name][keys[row]]\n      : name => result[name][0];\n    get = get.map(f => row => f(row, data, op));\n  }\n\n  return get;\n}\n\nexport function aggregate(table, ops, result) {\n  if (!ops.length) return result; // early exit\n\n  // instantiate aggregators and result store\n  const aggrs = reducers(ops);\n  const groups = table.groups();\n  const size = groups ? groups.size : 1;\n  result = result || repeat(ops.length, () => Array(size));\n\n  // compute aggregates, extract results\n  if (size > 1) {\n    aggrs.forEach(aggr => {\n      const cells = reduceGroups(table, aggr, groups);\n      for (let i = 0; i < size; ++i) {\n        aggr.write(cells[i], result, i);\n      }\n    });\n  } else {\n    aggrs.forEach(aggr => {\n      const cell = reduceFlat(table, aggr);\n      aggr.write(cell, result, 0);\n    });\n  }\n\n  return result;\n}\n\nexport function reducers(ops, stream) {\n  const aggrs = [];\n  const fields = {};\n\n  // group operators by field inputs\n  for (const op of ops) {\n    const key = op.fields.map(f => f + '').join(',');\n    (fields[key] || (fields[key] = [])).push(op);\n  }\n\n  // generate a field reducer for each field\n  for (const key in fields) {\n    aggrs.push(fieldReducer(fields[key], stream));\n  }\n\n  return aggrs;\n}\n\nexport function reduceFlat(table, reducer) {\n  // initialize aggregation cell\n  const cell = reducer.init();\n\n  // compute aggregate values\n  // inline the following for performance:\n  // table.scan((row, data) => reducer.add(cell, row, data));\n  const n = table.totalRows();\n  const data = table.data();\n  const bits = table.mask();\n\n  if (table.isOrdered()) {\n    const idx = table.indices();\n    for (let i = 0; i < n; ++i) {\n      reducer.add(cell, idx[i], data);\n    }\n  } else if (bits) {\n    for (let i = bits.next(0); i >= 0; i = bits.next(i + 1)) {\n      reducer.add(cell, i, data);\n    }\n  } else {\n    for (let i = 0; i < n; ++i) {\n      reducer.add(cell, i, data);\n    }\n  }\n\n  return cell;\n}\n\nexport function reduceGroups(table, reducer, groups) {\n  const { keys, size } = groups;\n\n  // initialize aggregation cells\n  const cells = repeat(size, () => reducer.init());\n\n  // compute aggregate values\n  // inline the following for performance:\n  // table.scan((row, data) => reducer.add(cells[keys[row]], row, data));\n  const data = table.data();\n\n  if (table.isOrdered()) {\n    const idx = table.indices();\n    const m = idx.length;\n    for (let i = 0; i < m; ++i) {\n      const row = idx[i];\n      reducer.add(cells[keys[row]], row, data);\n    }\n  } else if (table.isFiltered()) {\n    const bits = table.mask();\n    for (let i = bits.next(0); i >= 0; i = bits.next(i + 1)) {\n      reducer.add(cells[keys[i]], i, data);\n    }\n  } else {\n    const n = table.totalRows();\n    for (let i = 0; i < n; ++i) {\n      reducer.add(cells[keys[i]], i, data);\n    }\n  }\n\n  return cells;\n}\n\nexport function groupOutput(cols, groups) {\n  const { get, names, rows, size } = groups;\n\n  // write group values to output columns\n  const m = names.length;\n  for (let j = 0; j < m; ++j) {\n    const col = cols.add(names[j], Array(size));\n    const val = get[j];\n    for (let i = 0; i < size; ++i) {\n      col[i] = val(rows[i]);\n    }\n  }\n}"],"names":["aggregateGet","table","ops","get","data","keys","result","aggregate","op","name","row","f","aggrs","reducers","groups","size","repeat","aggr","cells","reduceGroups","i","cell","reduceFlat","stream","fields","key","fieldReducer","reducer","n","bits","idx","m","groupOutput","cols","names","rows","j","col","val"],"mappings":"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","x_google_ignoreList":[0]}