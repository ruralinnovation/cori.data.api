{"version":3,"file":"cori.data.api456.js","sources":["../../node_modules/micromark-util-decode-string/index.js"],"sourcesContent":["import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n"],"names":["characterEscapeOrReference","decodeString","value","decode","$0","$1","$2","head","hex","decodeNumericCharacterReference","decodeNamedCharacterReference"],"mappings":";;;;;;;;AAEA,MAAMA,IACJ;AAcK,SAASC,EAAaC,GAAO;AAClC,SAAOA,EAAM,QAAQF,GAA4BG,CAAM;AACzD;AAQA,SAASA,EAAOC,GAAIC,GAAIC,GAAI;AAC1B,MAAID;AAEF,WAAOA;AAKT,MADaC,EAAG,WAAW,CAAC,MACf,IAAI;AACf,UAAMC,IAAOD,EAAG,WAAW,CAAC,GACtBE,IAAMD,MAAS,OAAOA,MAAS;AACrC,WAAOE,EAAgCH,EAAG,MAAME,IAAM,IAAI,CAAC,GAAGA,IAAM,KAAK,EAAE;AAAA,EAC5E;AACD,SAAOE,EAA8BJ,CAAE,KAAKF;AAC9C;","x_google_ignoreList":[0]}