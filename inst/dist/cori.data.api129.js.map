{"version":3,"file":"cori.data.api129.js","sources":["../../node_modules/d3-scale/src/continuous.js"],"sourcesContent":["import {bisect} from \"d3-array\";\nimport {interpolate as interpolateValue, interpolateNumber, interpolateRound} from \"d3-interpolate\";\nimport constant from \"./constant.js\";\nimport number from \"./number.js\";\n\nvar unit = [0, 1];\n\nexport function identity(x) {\n  return x;\n}\n\nfunction normalize(a, b) {\n  return (b -= (a = +a))\n      ? function(x) { return (x - a) / b; }\n      : constant(isNaN(b) ? NaN : 0.5);\n}\n\nfunction clamper(a, b) {\n  var t;\n  if (a > b) t = a, a = b, b = t;\n  return function(x) { return Math.max(a, Math.min(b, x)); };\n}\n\n// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\nfunction bimap(domain, range, interpolate) {\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);\n  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n  return function(x) { return r0(d0(x)); };\n}\n\nfunction polymap(domain, range, interpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = normalize(domain[i], domain[i + 1]);\n    r[i] = interpolate(range[i], range[i + 1]);\n  }\n\n  return function(x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nexport function copy(source, target) {\n  return target\n      .domain(source.domain())\n      .range(source.range())\n      .interpolate(source.interpolate())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nexport function transformer() {\n  var domain = unit,\n      range = unit,\n      interpolate = interpolateValue,\n      transform,\n      untransform,\n      unknown,\n      clamp = identity,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    var n = Math.min(domain.length, range.length);\n    if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);\n    piecewise = n > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\n  }\n\n  scale.invert = function(y) {\n    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = Array.from(_), interpolate = interpolateRound, rescale();\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t, u) {\n    transform = t, untransform = u;\n    return rescale();\n  };\n}\n\nexport default function continuous() {\n  return transformer()(identity, identity);\n}\n"],"names":["unit","identity","x","normalize","a","b","constant","clamper","t","bimap","domain","range","interpolate","d0","d1","r0","r1","polymap","j","d","r","i","bisect","copy","source","target","transformer","interpolateValue","transform","untransform","unknown","clamp","piecewise","output","input","rescale","n","scale","y","interpolateNumber","_","number","interpolateRound","u","continuous"],"mappings":"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","x_google_ignoreList":[0]}