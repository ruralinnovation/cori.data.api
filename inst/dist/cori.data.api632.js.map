{"version":3,"file":"cori.data.api632.js","sources":["../../node_modules/micromark/lib/initialize/document.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {undefined}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {undefined}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n"],"names":["document","initializeDocument","containerConstruct","tokenizeContainer","effects","self","stack","continued","childFlow","childToken","lineStartOffset","start","code","item","documentContinue","checkNewContainers","closeFlow","indexBeforeExits","indexBeforeFlow","point","exitContainers","index","splice","documentContinued","flowStart","thereIsANewContainer","thereIsNoNewContainer","containerContinue","flowContinue","writeToChild","markdownLineEnding","token","eof","stream","seen","size","entry","ok","nok","factorySpace"],"mappings":"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","x_google_ignoreList":[0]}