{"version":3,"file":"cori.data.api364.js","sources":["../../node_modules/mdast-util-to-hast/lib/handlers/table-row.js"],"sourcesContent":["/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n"],"names":["tableRow","state","node","parent","siblings","tagName","align","length","cellIndex","cells","cell","properties","alignValue","result"],"mappings":";;;;;;AAwBO,SAASA,EAASC,GAAOC,GAAMC,GAAQ;AAC5C,QAAMC,IAAWD,IAASA,EAAO,WAAW,QAGtCE,KADWD,IAAWA,EAAS,QAAQF,CAAI,IAAI,OACxB,IAAI,OAAO,MAElCI,IAAQH,KAAUA,EAAO,SAAS,UAAUA,EAAO,QAAQ,QAC3DI,IAASD,IAAQA,EAAM,SAASJ,EAAK,SAAS;AACpD,MAAIM,IAAY;AAEhB,QAAMC,IAAQ,CAAE;AAEhB,SAAO,EAAED,IAAYD,KAAQ;AAE3B,UAAMG,IAAOR,EAAK,SAASM,CAAS,GAE9BG,IAAa,CAAE,GACfC,IAAaN,IAAQA,EAAME,CAAS,IAAI;AAE9C,IAAII,MACFD,EAAW,QAAQC;AAIrB,QAAIC,IAAS,EAAC,MAAM,WAAW,SAAAR,GAAS,YAAAM,GAAY,UAAU,GAAE;AAEhE,IAAID,MACFG,EAAO,WAAWZ,EAAM,IAAIS,CAAI,GAChCT,EAAM,MAAMS,GAAMG,CAAM,GACxBA,IAASZ,EAAM,UAAUS,GAAMG,CAAM,IAGvCJ,EAAM,KAAKI,CAAM;AAAA,EAClB;AAGD,QAAMA,IAAS;AAAA,IACb,MAAM;AAAA,IACN,SAAS;AAAA,IACT,YAAY,CAAE;AAAA,IACd,UAAUZ,EAAM,KAAKQ,GAAO,EAAI;AAAA,EACjC;AACD,SAAAR,EAAM,MAAMC,GAAMW,CAAM,GACjBZ,EAAM,UAAUC,GAAMW,CAAM;AACrC;","x_google_ignoreList":[0]}