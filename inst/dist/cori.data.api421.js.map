{"version":3,"file":"cori.data.api421.js","sources":["../../node_modules/apache-arrow/vector.mjs"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nvar _a;\nimport { Type } from './enum.mjs';\nimport { clampRange } from './util/vector.mjs';\nimport { DataType, strideForType } from './type.mjs';\nimport { Data, makeData } from './data.mjs';\nimport { isChunkedValid, computeChunkOffsets, computeChunkNullable, computeChunkNullCounts, sliceChunks, wrapChunkedCall1, wrapChunkedCall2, wrapChunkedIndexOf, } from './util/chunk.mjs';\nimport { instance as getVisitor } from './visitor/get.mjs';\nimport { instance as setVisitor } from './visitor/set.mjs';\nimport { instance as indexOfVisitor } from './visitor/indexof.mjs';\nimport { instance as iteratorVisitor } from './visitor/iterator.mjs';\nconst visitorsByTypeId = {};\nconst vectorPrototypesByTypeId = {};\n/**\n * Array-like data structure. Use the convenience method {@link makeVector} and {@link vectorFromArray} to create vectors.\n */\nexport class Vector {\n    constructor(input) {\n        var _b, _c, _d;\n        const data = input[0] instanceof Vector\n            ? input.flatMap(x => x.data)\n            : input;\n        if (data.length === 0 || data.some((x) => !(x instanceof Data))) {\n            throw new TypeError('Vector constructor expects an Array of Data instances.');\n        }\n        const type = (_b = data[0]) === null || _b === void 0 ? void 0 : _b.type;\n        switch (data.length) {\n            case 0:\n                this._offsets = [0];\n                break;\n            case 1: {\n                // special case for unchunked vectors\n                const { get, set, indexOf } = visitorsByTypeId[type.typeId];\n                const unchunkedData = data[0];\n                this.isValid = (index) => isChunkedValid(unchunkedData, index);\n                this.get = (index) => get(unchunkedData, index);\n                this.set = (index, value) => set(unchunkedData, index, value);\n                this.indexOf = (index) => indexOf(unchunkedData, index);\n                this._offsets = [0, unchunkedData.length];\n                break;\n            }\n            default:\n                Object.setPrototypeOf(this, vectorPrototypesByTypeId[type.typeId]);\n                this._offsets = computeChunkOffsets(data);\n                break;\n        }\n        this.data = data;\n        this.type = type;\n        this.stride = strideForType(type);\n        this.numChildren = (_d = (_c = type.children) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0;\n        this.length = this._offsets.at(-1);\n    }\n    /**\n     * The aggregate size (in bytes) of this Vector's buffers and/or child Vectors.\n     */\n    get byteLength() {\n        return this.data.reduce((byteLength, data) => byteLength + data.byteLength, 0);\n    }\n    /**\n     * Whether this Vector's elements can contain null values.\n     */\n    get nullable() {\n        return computeChunkNullable(this.data);\n    }\n    /**\n     * The number of null elements in this Vector.\n     */\n    get nullCount() {\n        return computeChunkNullCounts(this.data);\n    }\n    /**\n     * The Array or TypedArray constructor used for the JS representation\n     *  of the element's values in {@link Vector.prototype.toArray `toArray()`}.\n     */\n    get ArrayType() { return this.type.ArrayType; }\n    /**\n     * The name that should be printed when the Vector is logged in a message.\n     */\n    get [Symbol.toStringTag]() {\n        return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`;\n    }\n    /**\n     * The name of this Vector.\n     */\n    get VectorName() { return `${Type[this.type.typeId]}Vector`; }\n    /**\n     * Check whether an element is null.\n     * @param index The index at which to read the validity bitmap.\n     */\n    // @ts-ignore\n    isValid(index) { return false; }\n    /**\n     * Get an element value by position.\n     * @param index The index of the element to read.\n     */\n    // @ts-ignore\n    get(index) { return null; }\n    /**\n     * Set an element value by position.\n     * @param index The index of the element to write.\n     * @param value The value to set.\n     */\n    // @ts-ignore\n    set(index, value) { return; }\n    /**\n     * Retrieve the index of the first occurrence of a value in an Vector.\n     * @param element The value to locate in the Vector.\n     * @param offset The index at which to begin the search. If offset is omitted, the search starts at index 0.\n     */\n    // @ts-ignore\n    indexOf(element, offset) { return -1; }\n    includes(element, offset) {\n        // eslint-disable-next-line unicorn/prefer-includes\n        return this.indexOf(element, offset) > -1;\n    }\n    /**\n     * Iterator for the Vector's elements.\n     */\n    [Symbol.iterator]() {\n        return iteratorVisitor.visit(this);\n    }\n    /**\n     * Combines two or more Vectors of the same type.\n     * @param others Additional Vectors to add to the end of this Vector.\n     */\n    concat(...others) {\n        return new Vector(this.data.concat(others.flatMap((x) => x.data).flat(Number.POSITIVE_INFINITY)));\n    }\n    /**\n     * Return a zero-copy sub-section of this Vector.\n     * @param start The beginning of the specified portion of the Vector.\n     * @param end The end of the specified portion of the Vector. This is exclusive of the element at the index 'end'.\n     */\n    slice(begin, end) {\n        return new Vector(clampRange(this, begin, end, ({ data, _offsets }, begin, end) => sliceChunks(data, _offsets, begin, end)));\n    }\n    toJSON() { return [...this]; }\n    /**\n     * Return a JavaScript Array or TypedArray of the Vector's elements.\n     *\n     * @note If this Vector contains a single Data chunk and the Vector's type is a\n     *  primitive numeric type corresponding to one of the JavaScript TypedArrays, this\n     *  method returns a zero-copy slice of the underlying TypedArray values. If there's\n     *  more than one chunk, the resulting TypedArray will be a copy of the data from each\n     *  chunk's underlying TypedArray values.\n     *\n     * @returns An Array or TypedArray of the Vector's elements, based on the Vector's DataType.\n     */\n    toArray() {\n        const { type, data, length, stride, ArrayType } = this;\n        // Fast case, return subarray if possible\n        switch (type.typeId) {\n            case Type.Int:\n            case Type.Float:\n            case Type.Decimal:\n            case Type.Time:\n            case Type.Timestamp:\n                switch (data.length) {\n                    case 0: return new ArrayType();\n                    case 1: return data[0].values.subarray(0, length * stride);\n                    default: return data.reduce((memo, { values, length: chunk_length }) => {\n                        memo.array.set(values.subarray(0, chunk_length * stride), memo.offset);\n                        memo.offset += chunk_length * stride;\n                        return memo;\n                    }, { array: new ArrayType(length * stride), offset: 0 }).array;\n                }\n        }\n        // Otherwise if not primitive, slow copy\n        return [...this];\n    }\n    /**\n     * Returns a string representation of the Vector.\n     *\n     * @returns A string representation of the Vector.\n     */\n    toString() {\n        return `[${[...this].join(',')}]`;\n    }\n    /**\n     * Returns a child Vector by name, or null if this Vector has no child with the given name.\n     * @param name The name of the child to retrieve.\n     */\n    getChild(name) {\n        var _b;\n        return this.getChildAt((_b = this.type.children) === null || _b === void 0 ? void 0 : _b.findIndex((f) => f.name === name));\n    }\n    /**\n     * Returns a child Vector by index, or null if this Vector has no child at the supplied index.\n     * @param index The index of the child to retrieve.\n     */\n    getChildAt(index) {\n        if (index > -1 && index < this.numChildren) {\n            return new Vector(this.data.map(({ children }) => children[index]));\n        }\n        return null;\n    }\n    get isMemoized() {\n        if (DataType.isDictionary(this.type)) {\n            return this.data[0].dictionary.isMemoized;\n        }\n        return false;\n    }\n    /**\n     * Adds memoization to the Vector's {@link get} method. For dictionary\n     * vectors, this method return a vector that memoizes only the dictionary\n     * values.\n     *\n     * Memoization is very useful when decoding a value is expensive such as\n     * Utf8. The memoization creates a cache of the size of the Vector and\n     * therefore increases memory usage.\n     *\n     * @returns A new vector that memoizes calls to {@link get}.\n     */\n    memoize() {\n        if (DataType.isDictionary(this.type)) {\n            const dictionary = new MemoizedVector(this.data[0].dictionary);\n            const newData = this.data.map((data) => {\n                const cloned = data.clone();\n                cloned.dictionary = dictionary;\n                return cloned;\n            });\n            return new Vector(newData);\n        }\n        return new MemoizedVector(this);\n    }\n    /**\n     * Returns a vector without memoization of the {@link get} method. If this\n     * vector is not memoized, this method returns this vector.\n     *\n     * @returns A new vector without memoization.\n     */\n    unmemoize() {\n        if (DataType.isDictionary(this.type) && this.isMemoized) {\n            const dictionary = this.data[0].dictionary.unmemoize();\n            const newData = this.data.map((data) => {\n                const newData = data.clone();\n                newData.dictionary = dictionary;\n                return newData;\n            });\n            return new Vector(newData);\n        }\n        return this;\n    }\n}\n_a = Symbol.toStringTag;\n// Initialize this static property via an IIFE so bundlers don't tree-shake\n// out this logic, but also so we're still compliant with `\"sideEffects\": false`\nVector[_a] = ((proto) => {\n    proto.type = DataType.prototype;\n    proto.data = [];\n    proto.length = 0;\n    proto.stride = 1;\n    proto.numChildren = 0;\n    proto._offsets = new Uint32Array([0]);\n    proto[Symbol.isConcatSpreadable] = true;\n    const typeIds = Object.keys(Type)\n        .map((T) => Type[T])\n        .filter((T) => typeof T === 'number' && T !== Type.NONE);\n    for (const typeId of typeIds) {\n        const get = getVisitor.getVisitFnByTypeId(typeId);\n        const set = setVisitor.getVisitFnByTypeId(typeId);\n        const indexOf = indexOfVisitor.getVisitFnByTypeId(typeId);\n        visitorsByTypeId[typeId] = { get, set, indexOf };\n        vectorPrototypesByTypeId[typeId] = Object.create(proto, {\n            ['isValid']: { value: wrapChunkedCall1(isChunkedValid) },\n            ['get']: { value: wrapChunkedCall1(getVisitor.getVisitFnByTypeId(typeId)) },\n            ['set']: { value: wrapChunkedCall2(setVisitor.getVisitFnByTypeId(typeId)) },\n            ['indexOf']: { value: wrapChunkedIndexOf(indexOfVisitor.getVisitFnByTypeId(typeId)) },\n        });\n    }\n    return 'Vector';\n})(Vector.prototype);\nclass MemoizedVector extends Vector {\n    constructor(vector) {\n        super(vector.data);\n        const get = this.get;\n        const set = this.set;\n        const slice = this.slice;\n        const cache = new Array(this.length);\n        Object.defineProperty(this, 'get', {\n            value(index) {\n                const cachedValue = cache[index];\n                if (cachedValue !== undefined) {\n                    return cachedValue;\n                }\n                const value = get.call(this, index);\n                cache[index] = value;\n                return value;\n            }\n        });\n        Object.defineProperty(this, 'set', {\n            value(index, value) {\n                set.call(this, index, value);\n                cache[index] = value;\n            }\n        });\n        Object.defineProperty(this, 'slice', {\n            value: (begin, end) => new MemoizedVector(slice.call(this, begin, end))\n        });\n        Object.defineProperty(this, 'isMemoized', { value: true });\n        Object.defineProperty(this, 'unmemoize', {\n            value: () => new Vector(this.data)\n        });\n        Object.defineProperty(this, 'memoize', {\n            value: () => this\n        });\n    }\n}\nimport * as dtypes from './type.mjs';\nexport function makeVector(init) {\n    if (init) {\n        if (init instanceof Data) {\n            return new Vector([init]);\n        }\n        if (init instanceof Vector) {\n            return new Vector(init.data);\n        }\n        if (init.type instanceof DataType) {\n            return new Vector([makeData(init)]);\n        }\n        if (Array.isArray(init)) {\n            return new Vector(init.flatMap(v => unwrapInputs(v)));\n        }\n        if (ArrayBuffer.isView(init)) {\n            if (init instanceof DataView) {\n                init = new Uint8Array(init.buffer);\n            }\n            const props = { offset: 0, length: init.length, nullCount: 0, data: init };\n            if (init instanceof Int8Array) {\n                return new Vector([makeData(Object.assign(Object.assign({}, props), { type: new dtypes.Int8 }))]);\n            }\n            if (init instanceof Int16Array) {\n                return new Vector([makeData(Object.assign(Object.assign({}, props), { type: new dtypes.Int16 }))]);\n            }\n            if (init instanceof Int32Array) {\n                return new Vector([makeData(Object.assign(Object.assign({}, props), { type: new dtypes.Int32 }))]);\n            }\n            if (init instanceof BigInt64Array) {\n                return new Vector([makeData(Object.assign(Object.assign({}, props), { type: new dtypes.Int64 }))]);\n            }\n            if (init instanceof Uint8Array || init instanceof Uint8ClampedArray) {\n                return new Vector([makeData(Object.assign(Object.assign({}, props), { type: new dtypes.Uint8 }))]);\n            }\n            if (init instanceof Uint16Array) {\n                return new Vector([makeData(Object.assign(Object.assign({}, props), { type: new dtypes.Uint16 }))]);\n            }\n            if (init instanceof Uint32Array) {\n                return new Vector([makeData(Object.assign(Object.assign({}, props), { type: new dtypes.Uint32 }))]);\n            }\n            if (init instanceof BigUint64Array) {\n                return new Vector([makeData(Object.assign(Object.assign({}, props), { type: new dtypes.Uint64 }))]);\n            }\n            if (init instanceof Float32Array) {\n                return new Vector([makeData(Object.assign(Object.assign({}, props), { type: new dtypes.Float32 }))]);\n            }\n            if (init instanceof Float64Array) {\n                return new Vector([makeData(Object.assign(Object.assign({}, props), { type: new dtypes.Float64 }))]);\n            }\n            throw new Error('Unrecognized input');\n        }\n    }\n    throw new Error('Unrecognized input');\n}\nfunction unwrapInputs(x) {\n    return x instanceof Data ? [x] : (x instanceof Vector ? x.data : makeVector(x).data);\n}\n\n//# sourceMappingURL=vector.mjs.map\n"],"names":["_a","visitorsByTypeId","vectorPrototypesByTypeId","Vector","input","_b","_c","_d","data","x","Data","type","get","set","indexOf","unchunkedData","index","isChunkedValid","value","computeChunkOffsets","strideForType","byteLength","computeChunkNullable","computeChunkNullCounts","Type","element","offset","iteratorVisitor","others","begin","end","clampRange","_offsets","sliceChunks","length","stride","ArrayType","memo","values","chunk_length","name","f","children","DataType","dictionary","MemoizedVector","newData","cloned","proto","typeIds","T","typeId","getVisitor","setVisitor","indexOfVisitor","wrapChunkedCall1","wrapChunkedCall2","wrapChunkedIndexOf","vector","slice","cache","cachedValue"],"mappings":"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","x_google_ignoreList":[0]}