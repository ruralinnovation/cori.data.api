{"version":3,"file":"cori.data.api298.js","sources":["../../node_modules/arquero/src/expression/compare.js"],"sourcesContent":["import codegen from './codegen';\nimport parse from './parse';\nimport { aggregate } from '../engine/reduce/util';\n\n// generate code to compare a single field\nconst _compare = (u, v, lt, gt) =>\n  `((u = ${u}) < (v = ${v}) || u == null) && v != null ? ${lt}\n    : (u > v || v == null) && u != null ? ${gt}\n    : ((v = v instanceof Date ? +v : v), (u = u instanceof Date ? +u : u)) !== u && v === v ? ${lt}\n    : v !== v && u === u ? ${gt} : `;\n\nexport default function(table, fields) {\n  // parse expressions, generate code for both a and b values\n  const names = [];\n  const exprs = [];\n  const fn = [];\n  let keys = null, opA = '0', opB = '0';\n  if (table.isGrouped()) {\n    keys = table.groups().keys;\n    opA = 'ka';\n    opB = 'kb';\n  }\n  const { ops } = parse(fields, {\n    table,\n    value: (name, node) => {\n      names.push(name);\n      if (node.escape) {\n        // if an escaped function, invoke it directly\n        const f = i => `fn[${fn.length}](${i}, data)`;\n        exprs.push([f('a'), f('b')]);\n        fn.push(node.escape);\n      } else {\n        // generate code to extract values to compare\n        exprs.push([\n          codegen(node, { index: 'a', op: opA }),\n          codegen(node, { index: 'b', op: opB })\n        ]);\n      }\n    },\n    window: false\n  });\n\n  // calculate aggregate values if needed\n  const result = aggregate(table, ops);\n  const op = (id, row) => result[id][row];\n\n  // generate comparison code for each field\n  const n = names.length;\n  let code = 'return (a, b) => {'\n    + (op && table.isGrouped() ? 'const ka = keys[a], kb = keys[b];' : '')\n    + 'let u, v; return ';\n  for (let i = 0; i < n; ++i) {\n    const o = fields.get(names[i]).desc ? -1 : 1;\n    const [u, v] = exprs[i];\n    code += _compare(u, v, -o, o);\n  }\n  code += '0;};';\n\n  // instantiate and return comparator function\n  return Function('op', 'keys', 'fn', 'data', code)(op, keys, fn, table.data());\n}"],"names":["_compare","u","v","lt","gt","parse","table","fields","names","exprs","fn","keys","opA","opB","ops","name","node","f","i","codegen","result","aggregate","op","id","row","n","code","o"],"mappings":";;;;;;;;;AAKA,MAAMA,IAAW,CAACC,GAAGC,GAAGC,GAAIC,MAC1B,SAASH,CAAC,YAAYC,CAAC,kCAAkCC,CAAE;AAAA,4CACjBC,CAAE;AAAA,gGACkDD,CAAE;AAAA,6BACrEC,CAAE;AAEhB,SAAAC,EAASC,GAAOC,GAAQ;AAErC,QAAMC,IAAQ,CAAA,GACRC,IAAQ,CAAA,GACRC,IAAK,CAAA;AACX,MAAIC,IAAO,MAAMC,IAAM,KAAKC,IAAM;AAClC,EAAIP,EAAM,gBACRK,IAAOL,EAAM,OAAQ,EAAC,MACtBM,IAAM,MACNC,IAAM;AAER,QAAM,EAAE,KAAAC,EAAG,IAAKT,EAAME,GAAQ;AAAA,IAC5B,OAAAD;AAAA,IACA,OAAO,CAACS,GAAMC,MAAS;AAErB,UADAR,EAAM,KAAKO,CAAI,GACXC,EAAK,QAAQ;AAEf,cAAMC,IAAI,CAAAC,MAAK,MAAMR,EAAG,MAAM,KAAKQ,CAAC;AACpC,QAAAT,EAAM,KAAK,CAACQ,EAAE,GAAG,GAAGA,EAAE,GAAG,CAAC,CAAC,GAC3BP,EAAG,KAAKM,EAAK,MAAM;AAAA,MAC3B;AAEQ,QAAAP,EAAM,KAAK;AAAA,UACTU,EAAQH,GAAM,EAAE,OAAO,KAAK,IAAIJ,GAAK;AAAA,UACrCO,EAAQH,GAAM,EAAE,OAAO,KAAK,IAAIH,GAAK;AAAA,QAC/C,CAAS;AAAA,IAEJ;AAAA,IACD,QAAQ;AAAA,EACZ,CAAG,GAGKO,IAASC,EAAUf,GAAOQ,CAAG,GAC7BQ,IAAK,CAACC,GAAIC,MAAQJ,EAAOG,CAAE,EAAEC,CAAG,GAGhCC,IAAIjB,EAAM;AAChB,MAAIkB,IAAO,wBACNJ,KAAMhB,EAAM,cAAc,sCAAsC,MACjE;AACJ,WAASY,IAAI,GAAGA,IAAIO,GAAG,EAAEP,GAAG;AAC1B,UAAMS,IAAIpB,EAAO,IAAIC,EAAMU,CAAC,CAAC,EAAE,OAAO,KAAK,GACrC,CAACjB,GAAGC,CAAC,IAAIO,EAAMS,CAAC;AACtB,IAAAQ,KAAQ1B,EAASC,GAAGC,GAAG,CAACyB,GAAGA,CAAC;AAAA,EAC7B;AACD,SAAAD,KAAQ,QAGD,SAAS,MAAM,QAAQ,MAAM,QAAQA,CAAI,EAAEJ,GAAIX,GAAMD,GAAIJ,EAAM,KAAM,CAAA;AAC9E;","x_google_ignoreList":[0]}