{"version":3,"file":"ApiContextProvider.js","sources":["../../../../lib/@cori-risi/cotexts/ApiContextProvider.tsx"],"sourcesContent":["import React, {\n    createContext,\n    ReactElement,\n    useContext,\n    useEffect,\n    useState\n} from \"react\";\nimport axios, { AxiosInstance } from 'axios';\nimport { fetchAuthSession, JWT } from \"@aws-amplify/auth\";\n// import { getCurrentUser } from \"@aws-amplify/auth/cognito\";\n// import { useAuthenticator, UseAuthenticator } from \"@aws-amplify/ui-react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import {\n//     updateUserId,\n//     updateUserName,\n//     updateUserTokens,\n//     selectUser\n// } from \"../features\";\n// import { User } from '../models';\n\n// import { AmplifyContext } from \"./AmplifyContextProvider\";\n\nimport \"./styles/ApiContextProvider.css\";\n\nconst BASE_URL = \"http://localhost:8000\"; // `${import.meta.env.VITE_CORI_DATA_API}`;\n// TODO: From now on must pass dev/prod API url in as param to ApiContextProvider because:\n// cori.data.api/lib/@cori-risi/cotexts/ApiContextProvider.tsx:22\n//     const BASE_URL = `${import.meta.env.VITE_CORI_DATA_API}`;\n//                               ^^^^\n//     SyntaxError: Cannot use 'import.meta' outside a module\n//\n\nconst apiClient: AxiosInstance = axios.create({\n    baseURL: BASE_URL,\n    headers: {\n        'Content-Type': 'application/json'\n    },\n});\n\ninterface ApiContextType {\n    apiClient: AxiosInstance;\n    authenticated: boolean;\n    // authenticated_user: User | null;\n    // autoSignOut: (() => void) | null;\n    baseURL: string;\n    token: JWT | null;\n    data: any;\n    setData: ((newData: any) => void) | null;\n}\n\nconst initState: ApiContextType = {\n    apiClient: apiClient,\n    authenticated: false,\n    // authenticated_user: null,\n    // autoSignOut: null,\n    baseURL: BASE_URL,\n    token: null,\n    data: {},\n    setData: null\n};\n\nexport const ApiContext = createContext<ApiContextType | null>(initState);\n\n// let hasAuthSession = false;\n// let hasAuthUser = false;\n// let hasAuthClient = false;\n\nexport default function ApiContextProvider (props: { children?: ReactElement, baseURL?: string }) {\n\n    // const amplifyContext = useContext(AmplifyContext);\n    // const authenticator = useAuthenticator();\n    // const userState = useSelector(selectUser);\n    // const dispatch = useDispatch();\n\n    // const [ authenticated_user, setAuthenticatedUser ] = useState<User>(userState);\n\n    const [ state, setState ] = useState<ApiContextType | null>(initState);\n\n    function setData(newData: any) {\n        const currentState:  ApiContextType = state!;\n        setState({\n            ...currentState,\n            data: {\n                ...currentState.data,\n                ...newData\n            },\n            setData: setData\n        });\n    }\n\n    useEffect(() => {\n\n        // if (\n        //     amplifyContext !== null\n        //     && !!amplifyContext .domain\n        //     && !!amplifyContext .region\n        //     && !!amplifyContext .identityPoolId\n        //     && !!amplifyContext .userPoolId\n        //     && !!amplifyContext .userPoolClientId\n        // ) {\n        //\n        //     const session = fetchAuthSession();\n        //     const user: Promise<User> = getCurrentUser();\n        //\n        //     session\n        //         .then((sess) => {\n        //\n        //             if (!hasAuthSession) {\n        //\n        //                 hasAuthSession = true;\n        //\n        //                 console.log(\"API Session is authenticated:\", hasAuthSession);\n        //                 console.log(\"API Session config:\", sess);\n        //\n        //                 const {\n        //                     // signIn,\n        //                     // signUp,\n        //                     // forceNewPassword,\n        //                     // confirmResetPassword,\n        //                     // confirmSignIn,\n        //                     // confirmSignUp,\n        //                     // confirmVerifyUser,\n        //                     // forgotPassword,\n        //                     // setupTotp,\n        //                     // verifyUser,\n        //                     signOut\n        //                 } = authenticator;\n        //\n        //                 const tokens = sess.tokens!;\n        //\n        //                 console.log(\"API tokens:\", tokens);\n        //\n        //                 if (!!tokens.idToken && !hasAuthClient) {\n        //\n        //                     hasAuthClient = true;\n        //\n        //                     // const autoSignOut = () => {\n        //                     //     signOut();\n        //                     //     window.alert(\"Please refresh this session by clicking the browser's reload button!\");\n        //                     //     (window as any).location = window.location.protocol + \"//\" + window.location.host + window.location.pathname;\n        //                     // };\n        //\n        //                     try {\n        //\n        //                         apiClient.interceptors.request.use(\n        //                             (config) => {\n        //                                 const accessToken = tokens.idToken!.toString();\n        //                                 if (!!accessToken) {\n        //                                     config.headers.Authorization = `Bearer ${accessToken}`;\n        //                                 }\n        //                                 if (!!props.baseURL) {\n        //                                     config.baseURL = props.baseURL;\n        //                                 }\n        //                                 return config;\n        //                             },\n        //                             (error) => Promise.reject(error)\n        //                         );\n        //\n        //                         setState({\n        //                             apiClient: apiClient,\n        //                             authenticated: true,\n        //                             // authenticated_user: authenticated_user,\n        //                             // autoSignOut: autoSignOut,\n        //                             baseURL: props.baseURL || BASE_URL,\n        //                             token: tokens.idToken,\n        //                             data: {},\n        //                             setData\n        //                         });\n        //\n        //                         // TODO: Use autoSignOut to prompt user to refresh session on API error\n        //                         // const remoteAPIStartTime = performance.now();\n        //                         // apiClient.get(...)\n        //                         //     .then(response => ...)\n        //                         //     .catch(error => {\n        //                         //             const remoteAPIEndTime = performance.now();\n        //                         //\n        //                         //             (window as any)[\"remoteAPIExecutionTime\"] = remoteAPIEndTime - remoteAPIStartTime;\n        //                         //             console.debug(`Remote API Call Execution took   ${(window as any)[\"remoteAPIExecutionTime\"]} ms`);\n        //                         //\n        //                         //             if (error.hasOwnProperty(\"code\")) {\n        //                         //                 console.log(\"Error code:\", error.code!);\n        //                         //                 if (error.code! === \"ERR_BAD_REQUEST\"\n        //                         //                     || error.code! === \"ERR_NETWORK\"\n        //                         //                 ) {\n        //                         //                     autoSignOut();\n        //                         //\n        //                         //                 } else if (error.code === 'ERR_NAME_NOT_RESOLVED') {\n        //                         //                     console.error('Invalid baseURL:', apiClient.defaults.baseURL);\n        //                         //                     // Handle invalid baseURL error\n        //                         //                 }\n        //                         //             } else {\n        //                         //                 console.log(error.toString());\n        //                         //             }\n        //                         //         });\n        //\n        //                     } catch (e: any) {\n        //                         console.log(\"Axios Error:\", e);\n        //                     }\n        //\n        //                     user.then((u) => {\n        //                         if (!hasAuthUser) {\n        //\n        //                             // console.log(\"Initial userState:\", userState);\n        //                             // console.log(\"user type:\", u.constructor.name);\n        //\n        //                             hasAuthUser = true;\n        //\n        //                             console.log(\"API User is authenticated:\", hasAuthSession);\n        //                             console.log(\"API User:\", u);\n        //\n        //                             // function updateUser (u: User) {\n        //                             //     try {\n        //                             //         if (!!u.userId) {\n        //                             //             console.log(\"Update userId:\", u.userId);\n        //                             //             dispatch(updateUserId(u.userId));\n        //                             //         }\n        //                             //         if (!!u.userId && !!u.username) {\n        //                             //             console.log(\"Update username:\", u.username);\n        //                             //             dispatch(updateUserName(u.username));\n        //                             //         }\n        //                             //\n        //                             //         if (!!tokens.idToken) {\n        //                             //             console.log(\"Update user tokens:\", tokens);\n        //                             //             dispatch(updateUserTokens(JSON.stringify(tokens)));\n        //                             //         }\n        //                             //\n        //                             //     } catch (e: any) {\n        //                             //         console.error(e);\n        //                             //     }\n        //                             //\n        //                             //     // setState({\n        //                             //     //     apiClient: (!!hasAuthClient) ? apiClient : axios.create({\n        //                             //     //         baseURL: props.baseURL || BASE_URL,\n        //                             //     //         headers: {\n        //                             //     //             'Content-Type': 'application/json',\n        //                             //     //             'Authorization': `Bearer ${accessToken}`,\n        //                             //     //         },\n        //                             //     //     }),\n        //                             //     //     authenticated: true,\n        //                             //     //     authenticated_user: u,\n        //                             //     //     baseURL: props.baseURL || BASE_URL,\n        //                             //     //     autoSignOut: signOut,\n        //                             //     //     token: tokens.idToken,\n        //                             //     //     data: {\n        //                             //     //         ...state.data,\n        //                             //     //     }\n        //                             //     // });\n        //                             //\n        //                             //     setAuthenticatedUser(u);\n        //                             // }\n        //\n        //                             // updateUser(u);\n        //                         }\n        //                     });\n        //                 }\n        //             }\n        //         })\n        //         .catch((e: any) => {\n        //             console.log(\"API Session ERROR:\", e);\n        //         });\n        //\n        // } else {\n\n            apiClient.interceptors.request.use(\n                (config) => {\n                    if (!!props.baseURL) {\n                        config.baseURL = props.baseURL;\n                    }\n                    return config;\n                },\n                (error) => Promise.reject(error)\n            );\n\n            setState({\n                apiClient: apiClient,\n                authenticated: false,\n                // authenticated_user: authenticated_user,\n                // autoSignOut: autoSignOut,\n                baseURL: props.baseURL || BASE_URL,\n                token: null,\n                data: {},\n                setData\n            });\n        // }\n\n    }, []);\n\n    return (<>\n        <ApiContext.Provider value={state}>\n            {/*<ApolloGraphQLProviderRedux aws_amplify_token={token} setReady={setReady}>*/}\n                {props.children}\n            {/*</ApolloGraphQLProviderRedux>*/}\n        </ApiContext.Provider>\n    </>);\n}\n"],"names":[],"mappings":";;;;;;;;;AAwBA,MAAM,QAAQ,GAAG,uBAAuB,CAAC;AACzC;AACA;AACA;AACA;AACA;AACA;AAEA,MAAM,SAAS,GAAkB,KAAK,CAAC,MAAM,CAAC;AAC1C,IAAA,OAAO,EAAE,QAAQ;AACjB,IAAA,OAAO,EAAE;AACL,QAAA,cAAc,EAAE,kBAAkB;AACrC,KAAA;AACJ,CAAA,CAAC,CAAC;AAaH,MAAM,SAAS,GAAmB;AAC9B,IAAA,SAAS,EAAE,SAAS;AACpB,IAAA,aAAa,EAAE,KAAK;;;AAGpB,IAAA,OAAO,EAAE,QAAQ;AACjB,IAAA,KAAK,EAAE,IAAI;AACX,IAAA,IAAI,EAAE,EAAE;AACR,IAAA,OAAO,EAAE,IAAI;CAChB,CAAC;MAEW,UAAU,GAAG,aAAa,CAAwB,SAAS,EAAE;AAE1E;AACA;AACA;AAEwB,SAAA,kBAAkB,CAAE,KAAoD,EAAA;;;;;;IAS5F,MAAM,CAAE,KAAK,EAAE,QAAQ,CAAE,GAAG,QAAQ,CAAwB,SAAS,CAAC,CAAC;IAEvE,SAAS,OAAO,CAAC,OAAY,EAAA;QACzB,MAAM,YAAY,GAAoB,KAAM,CAAC;AAC7C,QAAA,QAAQ,CACD,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,YAAY,CACf,EAAA,EAAA,IAAI,kCACG,YAAY,CAAC,IAAI,CAAA,EACjB,OAAO,CAEd,EAAA,OAAO,EAAE,OAAO,IAClB,CAAC;KACN;IAED,SAAS,CAAC,MAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QA6KP,SAAS,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAC9B,CAAC,MAAM,KAAI;AACP,YAAA,IAAI,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE;AACjB,gBAAA,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;aAClC;AACD,YAAA,OAAO,MAAM,CAAC;AAClB,SAAC,EACD,CAAC,KAAK,KAAK,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CACnC,CAAC;AAEF,QAAA,QAAQ,CAAC;AACL,YAAA,SAAS,EAAE,SAAS;AACpB,YAAA,aAAa,EAAE,KAAK;;;AAGpB,YAAA,OAAO,EAAE,KAAK,CAAC,OAAO,IAAI,QAAQ;AAClC,YAAA,KAAK,EAAE,IAAI;AACX,YAAA,IAAI,EAAE,EAAE;YACR,OAAO;AACV,SAAA,CAAC,CAAC;;KAGV,EAAE,EAAE,CAAC,CAAC;AAEP,IAAA,QAAQ,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA;AACJ,QAAA,KAAA,CAAA,aAAA,CAAC,UAAU,CAAC,QAAQ,EAAA,EAAC,KAAK,EAAE,KAAK,EAExB,EAAA,KAAK,CAAC,QAAQ,CAED,CACvB,EAAE;AACT;;;;"}