{"version":3,"file":"cori.data.api390.js","sources":["../../node_modules/arquero/src/format/util.js"],"sourcesContent":["import Table from '../table/table'; // eslint-disable-line no-unused-vars\n\nimport inferFormat from './infer';\nimport isFunction from '../util/is-function';\n\n/**\n * Column selection function.\n * @typedef {(table: Table) => string[]} ColumnSelectFunction\n */\n\n/**\n * Column selection options.\n * @typedef {string[]|ColumnSelectFunction} ColumnSelectOptions\n */\n\n/**\n * Column format options. The object keys should be column names.\n * The object values should be formatting functions or objects.\n * If specified, these override any automatically inferred options.\n * @typedef {Object.<string, import('./value').ValueFormatOptions} ColumnFormatOptions\n */\n\n/**\n * Column alignment options. The object keys should be column names.\n * The object values should be aligment strings, one of 'l' (left),\n * 'c' (center), or 'r' (right).\n * If specified, these override any automatically inferred options.\n * @typedef {Object.<string, 'l'|'c'|'r'>} ColumnAlignOptions\n */\n\nexport function columns(table, names) {\n  return isFunction(names)\n    ? names(table)\n    : names || table.columnNames();\n}\n\nexport function formats(table, names, options) {\n  const formatOpt = options.format || {};\n  const alignOpt = options.align || {};\n  const format = {};\n  const align = {};\n\n  names.forEach(name => {\n    const auto = inferFormat(values(table, name), options);\n    align[name] = alignOpt[name] || auto.align;\n    format[name] = formatOpt[name] || auto.format;\n  });\n\n  return { align, format };\n}\n\nfunction values(table, columnName) {\n  const column = table.column(columnName);\n  return fn => table.scan(row => fn(column.get(row)));\n}\n\nexport function scan(table, names, limit = 100, offset, ctx) {\n  const data = table.data();\n  const n = names.length;\n  table.scan(row => {\n    ctx.row(row);\n    for (let i = 0; i < n; ++i) {\n      const name = names[i];\n      ctx.cell(data[names[i]].get(row), name, i);\n    }\n  }, true, limit, offset);\n}"],"names":["columns","table","names","isFunction","formats","options","formatOpt","alignOpt","format","align","name","auto","inferFormat","values","columnName","column","fn","row","scan","limit","offset","ctx","data","n","i"],"mappings":";;;;;;;;AA8BO,SAASA,EAAQC,GAAOC,GAAO;AACpC,SAAOC,EAAWD,CAAK,IACnBA,EAAMD,CAAK,IACXC,KAASD,EAAM;AACrB;AAEO,SAASG,EAAQH,GAAOC,GAAOG,GAAS;AAC7C,QAAMC,IAAYD,EAAQ,UAAU,IAC9BE,IAAWF,EAAQ,SAAS,IAC5BG,IAAS,CAAA,GACTC,IAAQ,CAAA;AAEd,SAAAP,EAAM,QAAQ,CAAAQ,MAAQ;AACpB,UAAMC,IAAOC,EAAYC,EAAOZ,GAAOS,CAAI,GAAGL,CAAO;AACrD,IAAAI,EAAMC,CAAI,IAAIH,EAASG,CAAI,KAAKC,EAAK,OACrCH,EAAOE,CAAI,IAAIJ,EAAUI,CAAI,KAAKC,EAAK;AAAA,EAC3C,CAAG,GAEM,EAAE,OAAAF,GAAO,QAAAD;AAClB;AAEA,SAASK,EAAOZ,GAAOa,GAAY;AACjC,QAAMC,IAASd,EAAM,OAAOa,CAAU;AACtC,SAAO,CAAAE,MAAMf,EAAM,KAAK,CAAAgB,MAAOD,EAAGD,EAAO,IAAIE,CAAG,CAAC,CAAC;AACpD;AAEO,SAASC,EAAKjB,GAAOC,GAAOiB,IAAQ,KAAKC,GAAQC,GAAK;AAC3D,QAAMC,IAAOrB,EAAM,QACbsB,IAAIrB,EAAM;AAChB,EAAAD,EAAM,KAAK,CAAAgB,MAAO;AAChB,IAAAI,EAAI,IAAIJ,CAAG;AACX,aAASO,IAAI,GAAGA,IAAID,GAAG,EAAEC,GAAG;AAC1B,YAAMd,IAAOR,EAAMsB,CAAC;AACpB,MAAAH,EAAI,KAAKC,EAAKpB,EAAMsB,CAAC,CAAC,EAAE,IAAIP,CAAG,GAAGP,GAAMc,CAAC;AAAA,IAC1C;AAAA,EACL,GAAK,IAAML,GAAOC,CAAM;AACxB;","x_google_ignoreList":[0]}