{"version":3,"file":"cori.data.api7.js","sources":["../../lib/@cori-risi/components/LineChart.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport * as d3textwrap from \"d3-textwrap\";\n\nimport CategoricalLegend from './CategoricalLegend';\n\nimport { ERCData, MetricMetadata } from '../interfaces';\nimport { applyCORIStyles, getMaxYLabelWidth, saveChartAsPNG, getGEOIDColorRange } from '../utils';\nimport { chartStyle } from '../utils/constants';\n\nimport styles from \"./styles/Chart.module.css\";\n\ninterface LineChartProps {\n  primary_geoid: string,\n  metric: string,\n  data: ERCData[];\n  metadata: MetricMetadata,\n  width: number;\n  height: number;\n}\n\nfunction LineChart ({ primary_geoid, metric, data, metadata, width, height }: LineChartProps): JSX.Element {\n\n  const primary_dta = data.filter(d => d.geoid === primary_geoid && d.metric === metric);\n  const has_valid_data = !primary_dta.every(d => d.value === null);\n\n  const ref = React.useRef<HTMLDivElement>(null);\n  const svgRef = React.useRef<SVGSVGElement>(null);\n\n  const [colorScaleDomain, setColorScaleDomain] = useState<string[]>([]);\n  const [colorScaleRange, setColorScaleRange] = useState<unknown[]>([]);\n\n  useEffect(() => {\n\n    if (!svgRef.current) return;\n\n    // const margin = {...chartStyle.margin};\n    // const tick_number = Math.floor(width / 225);\n    // const y_axis_tick_size = 8;\n    //\n    // const svg = d3.select(svgRef.current)\n    //     .attr(\"viewBox\", `0 0 ${width} ${height}`)\n    //     .attr(\"preserveAspectRatio\", \"xMidYMid meet\");\n    //\n    // const xScale = d3\n    //     .scaleLinear()\n    //     .domain([d3.min(data, (d) => (+d.year))!, d3.max(data, (d) => (+d.year))! ])\n    //     .nice()\n    //     .range([margin.left, width - margin.right]);\n    //\n    // const yScale = d3\n    //     .scaleLinear()\n    //     .domain([\n    //       d3.max(data, (d) => d.value === null? undefined: (+d.value))!,\n    //       d3.min(data, (d) => d.value === null? undefined: (+d.value))!\n    //     ])\n    //     .nice()\n    //     .range([margin.top, height - margin.bottom]);\n    //\n    // const max_year: number = d3.max(data, (d) => +d.year) as number;\n    // const sortedGEOIDs = [...data]\n    //     .filter(d => +d.year === max_year)\n    //     .sort((a, b) => { // b.value - a.value\n    //       if (a.value === null && b.value === null) return 0;\n    //       if (a.value === null) return 1; // Treat null values as greater (will move to end)\n    //       if (b.value === null) return -1; // Treat null values as greater (will move to end)\n    //       return +b.value - +a.value;\n    //     });\n    //\n    // const geoid_domain = [...new Set(sortedGEOIDs.map(d => d.geoid.toString()))];\n    // const colorScale = d3.scaleOrdinal()\n    //     .domain(geoid_domain)\n    //     .range(geoid_domain.map(getGEOIDColorRange));\n    //\n    // setColorScaleDomain(colorScale.domain());\n    // setColorScaleRange(colorScale.range());\n    //\n    // let xAxis = d3.axisBottom<number>(xScale); // later is reassigned\n    // const yAxis = d3.axisLeft<number>(yScale)\n    //     .ticks(tick_number, metadata.yFormat)\n    //     .tickSize(y_axis_tick_size);\n    //\n    // svg\n    //     .select<SVGGElement>('.x-axis')\n    //     .attr('transform', `translate(0, ${height - margin.bottom})`)\n    //     .call(xAxis);\n    //\n    // svg.select<SVGGElement>('.y-axis')\n    //     .attr(\"transform\", `translate(${margin.left},0)`)\n    //     .call(yAxis)\n    //     .call(g => g.select(\".domain\").remove());\n    //\n    // // style y-axis text before calculating widths\n    // svg.selectAll(\".y-axis text\")\n    //     .style(\"font-family\", chartStyle.tickFontFamily)\n    //     .style(\"font-size\", chartStyle.tickFontSize)\n    //     .style(\"color\", chartStyle.tickFontColor)\n    //\n    // const maxw = getMaxYLabelWidth(svg);\n    //\n    // // If we need to wrap labels\n    // if (maxw > 200) {\n    //\n    //   // wrap the text\n    //   const textwrap_dimensions = {height: 20, width: 200};\n    //   const y_wrap = d3textwrap.textwrap().bounds(textwrap_dimensions);\n    //   svg.selectAll(\".y-axis text\")\n    //       .call(y_wrap)\n    //       .call(g => g.selectAll('foreignObject')\n    //           .style(\"transform\", 'translate(-' + textwrap_dimensions.width + 'px, -' + .5 + 'rem)')\n    //       );\n    //\n    //   xScale.range([margin.left, width - margin.right]);\n    //   xAxis = d3\n    //       .axisBottom<number>(xScale)\n    //       .tickSize(chartStyle.xTickSize)\n    //       .ticks(tick_number, metadata.xFormat);\n    //\n    //   svg\n    //       .select<SVGGElement>('.x-axis')\n    //       .attr('transform', `translate(0, ${height - margin.bottom})`)\n    //       .call(xAxis);\n    //\n    //   svg.select<SVGGElement>('.y-axis')\n    //       .attr(\"transform\", `translate(${margin.left},0)`);\n    //\n    // }\n    // else {\n    //\n    //   margin.left = maxw + y_axis_tick_size;\n    //\n    //   xScale.range([margin.left, width - margin.right]);\n    //   xAxis = d3\n    //       .axisBottom<number>(xScale)\n    //       .tickSize(12)\n    //       .ticks(tick_number, metadata.xFormat);\n    //\n    //   svg\n    //       .select<SVGGElement>('.x-axis')\n    //       .attr('transform', `translate(0, ${height - margin.bottom})`)\n    //       .call(xAxis);\n    //\n    //   svg.select<SVGGElement>('.y-axis')\n    //       .attr(\"transform\", `translate(${margin.left},0)`);\n    //\n    // }\n    //\n    // // Group data by geoid\n    // const sortedData = [...data].sort((a, b) => a.year - b.year);\n    // const nestedData = d3.group(sortedData, d => d.geoid);\n    //\n    // // Define line generator\n    // const line = d3.line<ERCData>()\n    //     .defined(d => d.value !== null)\n    //     .x(d => xScale(+d.year))\n    //     .y(d => yScale(+d.value!));\n    //\n    // // Add gridlines\n    // const GridLine = () => d3.axisLeft(yScale);\n    // svg.selectAll(\".grid\").remove();\n    // svg\n    //     .append(\"g\")\n    //     .attr(\"class\", \"grid\")\n    //     .call(GridLine().ticks(tick_number))\n    //     .call(g => g.select(\".domain\").remove())\n    //     .call(g => g.selectAll(\".tick line\")\n    //         .attr(\"x1\", margin.left)\n    //         .attr(\"x2\", width - margin.right)\n    //     );\n    //\n    // svg.selectAll(\".data-lines\").remove();\n    // nestedData.forEach((d) => {\n    //   svg\n    //       .append(\"path\")\n    //       .attr(\"class\", \"data-lines\")\n    //       .datum(d)\n    //       .attr(\"fill\", \"none\")\n    //       .attr(\"stroke\", function(d) {\n    //         const line_color: string | unknown = colorScale(d[0].geoid);\n    //         if (typeof line_color === \"string\")\n    //           return line_color;\n    //\n    //         return \"black\";\n    //       })\n    //       .attr(\"stroke-width\", chartStyle.strokeWidth)\n    //       .attr(\"stroke-opacity\", chartStyle.strokeOpacity)\n    //       .attr(\"d\", line);\n    // });\n    //\n    // // nestedData.forEach((d) => {\n    // //   svg\n    // //   .append(\"g\")\n    // //   .selectAll(\"dot\")\n    // //   .data(d)\n    // //   .enter()\n    // //   .append(\"circle\")\n    // //     .attr(\"cx\", function(d) { return xScale(+d.year) } )\n    // //     .attr(\"cy\", function(d) { return yScale(+d.value) } )\n    // //     .attr(\"r\", 5)\n    // //     .attr(\"fill\", \"#69b3a2\")\n    // // });\n    //\n    // svg.call(applyCORIStyles);\n\n  }, [data, width, height, metadata]);\n\n  const onButtonClick = useCallback(() => {\n    saveChartAsPNG(ref, metric + \".png\");\n  }, [ref, metric]);\n\n  return (\n      <div className={styles[\"chart-wrapper\"]}>\n        {data.length > 0 && (\n            <>\n              <div ref={ref} className={styles[\"chart\"]} style={{maxWidth: \"900px\", margin: \"0 auto\", padding: \"5px 20px\"}}>\n                {\n                    has_valid_data === false && (\n                        <div className={styles[\"no-data\"]}>\n                          <p>Note: Chart data is not available for the selected primary county</p>\n                        </div>\n                    )\n                }\n                <h3>{metadata.title}</h3>\n                {metadata.subtitle.length > 0? <p><em>{metadata.subtitle}</em></p>: <></>}\n                <CategoricalLegend domain_names={colorScaleDomain.map(c => data.filter(d => d.geoid === c).map(d => d.name)[0])} domain={colorScaleDomain} range={colorScaleRange} />\n                <svg ref={svgRef} style={{width: \"100%\"}}>\n                  <g className=\"x-axis\" />\n                  <g className=\"y-axis\" />\n                </svg>\n                <p className={styles['caption']}>{metadata[\"caption\"]}</p>\n              </div>\n              <button className={styles[\"download-chart\"]} onClick={onButtonClick}>Download image</button>\n            </>\n        )\n        }\n      </div>\n  );\n};\n\nexport default LineChart;\n"],"names":["LineChart","primary_geoid","metric","data","metadata","width","height","has_valid_data","d","ref","React","svgRef","colorScaleDomain","setColorScaleDomain","useState","colorScaleRange","setColorScaleRange","useEffect","onButtonClick","useCallback","saveChartAsPNG","jsx","styles","jsxs","Fragment","CategoricalLegend","c"],"mappings":";;;;;;;;;;;AAqBA,SAASA,EAAW,EAAE,eAAAC,GAAe,QAAAC,GAAQ,MAAAC,GAAM,UAAAC,GAAU,OAAAC,GAAO,QAAAC,KAAuC;AAGzG,QAAMC,IAAiB,CADHJ,EAAK,OAAO,CAAAK,MAAKA,EAAE,UAAUP,KAAiBO,EAAE,WAAWN,CAAM,EACjD,MAAM,CAAKM,MAAAA,EAAE,UAAU,IAAI,GAEzDC,IAAMC,EAAM,OAAuB,IAAI,GACvCC,IAASD,EAAM,OAAsB,IAAI,GAEzC,CAACE,GAAkBC,CAAmB,IAAIC,EAAA,SAAmB,CAAE,CAAA,GAC/D,CAACC,GAAiBC,CAAkB,IAAIF,EAAA,SAAoB,CAAE,CAAA;AAEpEG,EAAAA,EAAAA,UAAU,MAAM;AAEd,IAAKN,EAAO;AAAA,KA0KX,CAACR,GAAME,GAAOC,GAAQF,CAAQ,CAAC;AAE5B,QAAAc,IAAgBC,EAAAA,YAAY,MAAM;AACvB,IAAAC,EAAAX,GAAKP,IAAS,MAAM;AAAA,EAAA,GAClC,CAACO,GAAKP,CAAM,CAAC;AAGZ,SAAAmB,gBAAAA,EAAA,IAAC,SAAI,WAAWC,EAAO,eAAe,GACnC,UAAAnB,EAAK,SAAS,KAEToB,gBAAAA,EAAA,KAAAC,EAAA,UAAA,EAAA,UAAA;AAAA,IAAAD,gBAAAA,EAAA,KAAC,OAAI,EAAA,KAAAd,GAAU,WAAWa,EAAO,OAAU,OAAO,EAAC,UAAU,SAAS,QAAQ,UAAU,SAAS,WAE3F,GAAA,UAAA;AAAA,MAAmBf,MAAA,MACdc,gBAAAA,EAAA,IAAA,OAAA,EAAI,WAAWC,EAAO,SAAS,GAC9B,UAAAD,gBAAAA,EAAA,IAAC,KAAE,EAAA,UAAA,oEAAiE,CAAA,GACtE;AAAA,MAGRA,gBAAAA,EAAAA,IAAC,MAAI,EAAA,UAAAjB,EAAS,MAAM,CAAA;AAAA,MACnBA,EAAS,SAAS,SAAS,IAAIiB,gBAAAA,EAAAA,IAAA,KAAA,EAAE,UAACA,gBAAAA,EAAA,IAAA,MAAA,EAAI,UAASjB,EAAA,SAAS,CAAA,EAAK,CAAA,IAAQiB,gBAAAA,EAAA,IAAAG,EAAA,UAAA,EAAA;AAAA,MACtEH,gBAAAA,EAAAA,IAACI,GAAkB,EAAA,cAAcb,EAAiB,IAAI,OAAKT,EAAK,OAAO,CAAKK,MAAAA,EAAE,UAAUkB,CAAC,EAAE,IAAI,CAAAlB,MAAKA,EAAE,IAAI,EAAE,CAAC,CAAC,GAAG,QAAQI,GAAkB,OAAOG,EAAiB,CAAA;AAAA,MACnKQ,gBAAAA,OAAC,SAAI,KAAKZ,GAAQ,OAAO,EAAC,OAAO,OAC/B,GAAA,UAAA;AAAA,QAACU,gBAAAA,EAAAA,IAAA,KAAA,EAAE,WAAU,SAAS,CAAA;AAAA,QACtBA,gBAAAA,EAAAA,IAAC,KAAE,EAAA,WAAU,SAAS,CAAA;AAAA,MAAA,GACxB;AAAA,MACAA,gBAAAA,MAAC,OAAE,WAAWC,EAAO,SAAa,UAAAlB,EAAS,SAAW;AAAA,IAAA,GACxD;AAAA,IACAiB,gBAAAA,EAAAA,IAAC,YAAO,WAAWC,EAAO,gBAAgB,GAAG,SAASJ,GAAe,UAAc,kBAAA;AAAA,EAAA,EACrF,CAAA,EAGN,CAAA;AAEN;"}