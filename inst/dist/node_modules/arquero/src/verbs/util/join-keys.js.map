{"version":3,"file":"join-keys.js","sources":["../../../../../../../node_modules/arquero/src/verbs/util/join-keys.js"],"sourcesContent":["import parseKey from './parse-key';\nimport error from '../../util/error';\nimport intersect from '../../util/intersect';\nimport isArray from '../../util/is-array';\nimport isString from '../../util/is-string';\n\nexport function inferKeys(tableL, tableR, on) {\n  if (!on) {\n    // perform natural join if join condition not provided\n    const isect = intersect(tableL.columnNames(), tableR.columnNames());\n    if (!isect.length) error('Natural join requires shared column names.');\n    on = [isect, isect];\n  } else if (isString(on)) {\n    on = [on, on];\n  } else if (isArray(on) && on.length === 1) {\n    on = [on[0], on[0]];\n  }\n\n  return on;\n}\n\nexport function keyPredicate(tableL, tableR, onL, onR) {\n  if (onL.length !== onR.length) {\n    error('Mismatched number of join keys');\n  }\n  return [\n    parseKey('join', tableL, onL),\n    parseKey('join', tableR, onR)\n  ];\n}"],"names":[],"mappings":";;;;;;;;;;;;AAMO,SAAS,SAAS,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE,EAAE;AAC9C,EAAE,IAAI,CAAC,EAAE,EAAE;AACX;AACA,IAAI,MAAM,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC;AACxE,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,4CAA4C,CAAC,CAAC;AAC3E,IAAI,EAAE,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AACxB,GAAG,MAAM,IAAI,QAAQ,CAAC,EAAE,CAAC,EAAE;AAC3B,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;AAClB,GAAG,MAAM,IAAI,OAAO,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;AAC7C,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,GAAG;AACH;AACA,EAAE,OAAO,EAAE,CAAC;AACZ,CAAC;AACD;AACO,SAAS,YAAY,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE;AACvD,EAAE,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,MAAM,EAAE;AACjC,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;AAC5C,GAAG;AACH,EAAE,OAAO;AACT,IAAI,QAAQ,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,CAAC;AACjC,IAAI,QAAQ,CAAC,MAAM,EAAE,MAAM,EAAE,GAAG,CAAC;AACjC,GAAG,CAAC;AACJ;;;;","x_google_ignoreList":[0]}