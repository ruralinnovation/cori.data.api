{"version":3,"file":"rewrite.js","sources":["../../../../../../node_modules/arquero/src/expression/rewrite.js"],"sourcesContent":["import { Column, Dictionary, Literal } from './ast/constants';\nimport isFunction from '../util/is-function';\n\nconst dictOps = {\n  '==': 1,\n  '!=': 1,\n  '===': 1,\n  '!==': 1\n};\n\n/**\n * Rewrite AST node to be a table column reference.\n * Additionally optimizes dictionary column operations.\n * @param {object} ref AST node to rewrite to a column reference.\n * @param {string} name The name of the column.\n * @param {number} index The table index of the column.\n * @param {object} col The actual table column instance.\n * @param {object} op Parent AST node operating on the column reference.\n */\nexport default function(ref, name, index = 0, col, op) {\n  ref.type = Column;\n  ref.name = name;\n  ref.table = index;\n\n  // proceed only if has parent op and is a dictionary column\n  if (op && col && isFunction(col.keyFor)) {\n    // get other arg if op is an optimizeable operation\n    const lit = dictOps[op.operator]\n      ? op.left === ref ? op.right : op.left\n      : op.callee && op.callee.name === 'equal'\n      ? op.arguments[op.arguments[0] === ref ? 1 : 0]\n      : null;\n\n    // rewrite as dictionary lookup if other arg is a literal\n    if (lit && lit.type === Literal) {\n      rewriteDictionary(op, ref, lit, col.keyFor(lit.value));\n    }\n  }\n\n  return ref;\n}\n\nfunction rewriteDictionary(op, ref, lit, key) {\n  if (key < 0) {\n    // value not in dictionary, rewrite op as false literal\n    op.type = Literal;\n    op.value = false;\n    op.raw = 'false';\n  } else {\n    // rewrite ref as dict key access\n    ref.type = Dictionary;\n\n    // rewrite literal as target dict key\n    lit.value = key;\n    lit.raw = key + '';\n  }\n\n  return true;\n}"],"names":[],"mappings":";;;;;;;;;AAGA,MAAM,OAAO,GAAG;AAChB,EAAE,IAAI,EAAE,CAAC;AACT,EAAE,IAAI,EAAE,CAAC;AACT,EAAE,KAAK,EAAE,CAAC;AACV,EAAE,KAAK,EAAE,CAAC;AACV,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,gBAAQ,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,GAAG,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE;AACvD,EAAE,GAAG,CAAC,IAAI,GAAG,MAAM,CAAC;AACpB,EAAE,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC;AAClB,EAAE,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC;AACpB;AACA;AACA,EAAE,IAAI,EAAE,IAAI,GAAG,IAAI,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;AAC3C;AACA,IAAI,MAAM,GAAG,GAAG,OAAO,CAAC,EAAE,CAAC,QAAQ,CAAC;AACpC,QAAQ,EAAE,CAAC,IAAI,KAAK,GAAG,GAAG,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,IAAI;AAC5C,QAAQ,EAAE,CAAC,MAAM,IAAI,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,OAAO;AAC/C,QAAQ,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;AACrD,QAAQ,IAAI,CAAC;AACb;AACA;AACA,IAAI,IAAI,GAAG,IAAI,GAAG,CAAC,IAAI,KAAK,OAAO,EAAE;AACrC,MAAM,iBAAiB,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;AAC7D,KAAK;AACL,GAAG;AACH;AACA,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AACD;AACA,SAAS,iBAAiB,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;AAC9C,EAAE,IAAI,GAAG,GAAG,CAAC,EAAE;AACf;AACA,IAAI,EAAE,CAAC,IAAI,GAAG,OAAO,CAAC;AACtB,IAAI,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC;AACrB,IAAI,EAAE,CAAC,GAAG,GAAG,OAAO,CAAC;AACrB,GAAG,MAAM;AACT;AACA,IAAI,GAAG,CAAC,IAAI,GAAG,UAAU,CAAC;AAC1B;AACA;AACA,IAAI,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC;AACpB,IAAI,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC;AACvB,GAAG;AACH;AACA,EAAE,OAAO,IAAI,CAAC;AACd;;;;","x_google_ignoreList":[0]}