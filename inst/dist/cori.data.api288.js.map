{"version":3,"file":"cori.data.api288.js","sources":["../../node_modules/arquero/src/table/column-table.js"],"sourcesContent":["import { defaultColumnFactory } from './column';\nimport columnsFrom from './columns-from';\nimport columnSet from './column-set';\nimport Table from './table';\nimport { nest, regroup, reindex } from './regroup';\nimport { rowObjectBuilder } from '../expression/row-object';\nimport { default as toArrow, toArrowIPC } from '../format/to-arrow';\nimport toCSV from '../format/to-csv';\nimport toHTML from '../format/to-html';\nimport toJSON from '../format/to-json';\nimport toMarkdown from '../format/to-markdown';\nimport resolve, { all } from '../helpers/selection';\nimport arrayType from '../util/array-type';\nimport entries from '../util/entries';\nimport error from '../util/error';\nimport mapObject from '../util/map-object';\n\n/**\n * Class representing a table backed by a named set of columns.\n */\nexport default class ColumnTable extends Table {\n\n  /**\n   * Create a new ColumnTable from existing input data.\n   * @param {object[]|Iterable<object>|object|Map} values The backing table data values.\n   *  If array-valued, should be a list of JavaScript objects with\n   *  key-value properties for each column value.\n   *  If object- or Map-valued, a table with two columns (one for keys,\n   *  one for values) will be created.\n   * @param {string[]} [names] The named columns to include.\n   * @return {ColumnTable} A new ColumnTable instance.\n   */\n  static from(values, names) {\n    return new ColumnTable(columnsFrom(values, names), names);\n  }\n\n  /**\n   * Create a new table for a set of named columns.\n   * @param {object|Map} columns\n   *  The set of named column arrays. Keys are column names.\n   *  The enumeration order of the keys determines the column indices,\n   *  unless the names parameter is specified.\n   *  Values must be arrays (or array-like values) of identical length.\n   * @param {string[]} [names] Ordered list of column names. If specified,\n   *  this array determines the column indices. If not specified, the\n   *  key enumeration order of the columns object is used.\n   * @return {ColumnTable} the instantiated ColumnTable instance.\n   */\n  static new(columns, names) {\n    if (columns instanceof ColumnTable) return columns;\n    const data = {};\n    const keys = [];\n    for (const [key, value] of entries(columns)) {\n      data[key] = value;\n      keys.push(key);\n    }\n    return new ColumnTable(data, names || keys);\n  }\n\n  /**\n   * Instantiate a new ColumnTable instance.\n   * @param {object} columns An object mapping column names to values.\n   * @param {string[]} [names] An ordered list of column names.\n   * @param {BitSet} [filter] A filtering BitSet.\n   * @param {GroupBySpec} [group] A groupby specification.\n   * @param {RowComparator} [order] A row comparator function.\n   * @param {Params} [params] An object mapping parameter names to values.\n   */\n  constructor(columns, names, filter, group, order, params) {\n    mapObject(columns, defaultColumnFactory, columns);\n    names = names || Object.keys(columns);\n    const nrows = names.length ? columns[names[0]].length : 0;\n    super(names, nrows, columns, filter, group, order, params);\n  }\n\n  /**\n   * Create a new table with the same type as this table.\n   * The new table may have different data, filter, grouping, or ordering\n   * based on the values of the optional configuration argument. If a\n   * setting is not specified, it is inherited from the current table.\n   * @param {CreateOptions} [options] Creation options for the new table.\n   * @return {this} A newly created table.\n   */\n  create({ data, names, filter, groups, order }) {\n    const f = filter !== undefined ? filter : this.mask();\n\n    return new ColumnTable(\n      data || this._data,\n      names || (!data ? this._names : null),\n      f,\n      groups !== undefined ? groups : regroup(this._group, filter && f),\n      order !== undefined ? order : this._order,\n      this._params\n    );\n  }\n\n  /**\n   * Create a new table with additional columns drawn from one or more input\n   * tables. All tables must have the same numer of rows and are reified\n   * prior to assignment. In the case of repeated column names, input table\n   * columns overwrite existing columns.\n   * @param {...ColumnTable} tables The tables to merge with this table.\n   * @return {ColumnTable} A new table with merged columns.\n   * @example table.assign(table1, table2)\n   */\n  assign(...tables) {\n    const nrows = this.numRows();\n    const base = this.reify();\n    const cset = columnSet(base).groupby(base.groups());\n    tables.forEach(input => {\n      input = ColumnTable.new(input);\n      if (input.numRows() !== nrows) error('Assign row counts do not match');\n      input = input.reify();\n      input.columnNames(name => cset.add(name, input.column(name)));\n    });\n    return this.create(cset.new());\n  }\n\n  /**\n   * Get the backing set of columns for this table.\n   * @return {ColumnData} Object of named column instances.\n   */\n  columns() {\n    return this._data;\n  }\n\n  /**\n   * Get the column instance with the given name.\n   * @param {string} name The column name.\n   * @return {ColumnType | undefined} The named column, or undefined if it does not exist.\n   */\n  column(name) {\n    return this._data[name];\n  }\n\n  /**\n   * Get the column instance at the given index position.\n   * @param {number} index The zero-based column index.\n   * @return {ColumnType | undefined} The column, or undefined if it does not exist.\n   */\n  columnAt(index) {\n    return this._data[this._names[index]];\n  }\n\n  /**\n   * Get an array of values contained in a column. The resulting array\n   * respects any table filter or orderby criteria.\n   * @param {string} name The column name.\n   * @param {ArrayConstructor|TypedArrayConstructor} [constructor=Array]\n   *  The array constructor for instantiating the output array.\n   * @return {DataValue[]|TypedArray} The array of column values.\n   */\n  array(name, constructor = Array) {\n    const column = this.column(name);\n    const array = new constructor(this.numRows());\n    let idx = -1;\n    this.scan(row => array[++idx] = column.get(row), true);\n    return array;\n  }\n\n  /**\n   * Get the value for the given column and row.\n   * @param {string} name The column name.\n   * @param {number} [row=0] The row index, defaults to zero if not specified.\n   * @return {DataValue} The table value at (column, row).\n   */\n  get(name, row = 0) {\n    const column = this.column(name);\n    return this.isFiltered() || this.isOrdered()\n      ? column.get(this.indices()[row])\n      : column.get(row);\n  }\n\n  /**\n   * Returns an accessor (\"getter\") function for a column. The returned\n   * function takes a row index as its single argument and returns the\n   * corresponding column value.\n   * @param {string} name The column name.\n   * @return {ColumnGetter} The column getter function.\n   */\n  getter(name) {\n    const column = this.column(name);\n    const indices = this.isFiltered() || this.isOrdered() ? this.indices() : null;\n    return indices ? row => column.get(indices[row])\n      : column ? row => column.get(row)\n      : error(`Unrecognized column: ${name}`);\n  }\n\n  /**\n   * Returns an object representing a table row.\n   * @param {number} [row=0] The row index, defaults to zero if not specified.\n   * @return {object} A row object with named properties for each column.\n   */\n  object(row = 0) {\n    return objectBuilder(this)(row);\n  }\n\n  /**\n   * Returns an array of objects representing table rows.\n   * @param {ObjectsOptions} [options] The options for row object generation.\n   * @return {object[]} An array of row objects.\n   */\n  objects(options = {}) {\n    const { grouped, limit, offset } = options;\n\n    // generate array of row objects\n    const names = resolve(this, options.columns || all());\n    const create = rowObjectBuilder(names);\n    const obj = [];\n    this.scan(\n      (row, data) => obj.push(create(row, data)),\n      true, limit, offset\n    );\n\n    // produce nested output as requested\n    if (grouped && this.isGrouped()) {\n      const idx = [];\n      this.scan(row => idx.push(row), true, limit, offset);\n      return nest(this, idx, obj, grouped);\n    }\n\n    return obj;\n  }\n\n  /**\n   * Returns an iterator over objects representing table rows.\n   * @return {Iterator<object>} An iterator over row objects.\n   */\n  *[Symbol.iterator]() {\n    const create = objectBuilder(this);\n    const n = this.numRows();\n    for (let i = 0; i < n; ++i) {\n      yield create(i);\n    }\n  }\n\n  /**\n   * Create a new fully-materialized instance of this table.\n   * All filter and orderby settings are removed from the new table.\n   * Instead, the backing data itself is filtered and ordered as needed.\n   * @param {number[]} [indices] Ordered row indices to materialize.\n   *  If unspecified, all rows passing the table filter are used.\n   * @return {this} A reified table.\n   */\n  reify(indices) {\n    const nrows = indices ? indices.length : this.numRows();\n    const names = this._names;\n    let data, groups;\n\n    if (!indices && !this.isOrdered()) {\n      if (!this.isFiltered()) {\n        return this; // data already reified\n      } else if (nrows === this.totalRows()) {\n        data = this.data(); // all rows pass filter, skip copy\n      }\n    }\n\n    if (!data) {\n      const scan = indices ? f => indices.forEach(f) : f => this.scan(f, true);\n      const ncols = names.length;\n      data = {};\n\n      for (let i = 0; i < ncols; ++i) {\n        const name = names[i];\n        const prev = this.column(name);\n        const curr = data[name] = new (arrayType(prev))(nrows);\n        let r = -1;\n        scan(row => curr[++r] = prev.get(row));\n      }\n\n      if (this.isGrouped()) {\n        groups = reindex(this.groups(), scan, !!indices, nrows);\n      }\n    }\n\n    return this.create({ data, names, groups, filter: null, order: null });\n  }\n\n  /**\n   * Apply a sequence of transformations to this table. The output\n   * of each transform is passed as input to the next transform, and\n   * the output of the last transform is then returned.\n   * @param {...(Transform|Transform[])} transforms Transformation\n   *  functions to apply to the table in sequence. Each function should\n   *  take a single table as input and return a table as output.\n   * @return {ColumnTable} The output of the last transform.\n   */\n  transform(...transforms) {\n    return transforms.flat().reduce((t, f) => f(t), this);\n  }\n\n  /**\n   * Format this table as an Apache Arrow table.\n   * @param {ArrowFormatOptions} [options] The formatting options.\n   * @return {import('apache-arrow').Table} An Apache Arrow table.\n   */\n  toArrow(options) {\n    return toArrow(this, options);\n  }\n\n  /**\n   * Format this table as binary data in the Apache Arrow IPC format.\n   * @param {ArrowFormatOptions} [options] The formatting options. Set {format: 'stream'} \n   *        or {format:\"file\"} for specific IPC format\n   * @return {Uint8Array} A new Uint8Array of Arrow-encoded binary data.\n   */\n  toArrowBuffer(options) {\n    return toArrowIPC(this, options);\n  }\n\n  /**\n   * Format this table as a comma-separated values (CSV) string. Other\n   * delimiters, such as tabs or pipes ('|'), can be specified using\n   * the options argument.\n   * @param {CSVFormatOptions} [options] The formatting options.\n   * @return {string} A delimited value string.\n   */\n  toCSV(options) {\n    return toCSV(this, options);\n  }\n\n  /**\n   * Format this table as an HTML table string.\n   * @param {HTMLFormatOptions} [options] The formatting options.\n   * @return {string} An HTML table string.\n   */\n  toHTML(options) {\n    return toHTML(this, options);\n  }\n\n  /**\n   * Format this table as a JavaScript Object Notation (JSON) string.\n   * @param {JSONFormatOptions} [options] The formatting options.\n   * @return {string} A JSON string.\n   */\n  toJSON(options) {\n    return toJSON(this, options);\n  }\n\n  /**\n   * Format this table as a GitHub-Flavored Markdown table string.\n   * @param {MarkdownFormatOptions} [options] The formatting options.\n   * @return {string} A GitHub-Flavored Markdown table string.\n   */\n  toMarkdown(options) {\n    return toMarkdown(this, options);\n  }\n}\n\nfunction objectBuilder(table) {\n  let b = table._builder;\n\n  if (!b) {\n    const create = rowObjectBuilder(table.columnNames());\n    const data = table.data();\n    if (table.isOrdered() || table.isFiltered()) {\n      const indices = table.indices();\n      b = row => create(indices[row], data);\n    } else {\n      b = row => create(row, data);\n    }\n    table._builder = b;\n  }\n\n  return b;\n}\n\n/**\n * Options for derived table creation.\n * @typedef {import('./table').CreateOptions} CreateOptions\n */\n\n/**\n * A typed array constructor.\n * @typedef {import('./table').TypedArrayConstructor} TypedArrayConstructor\n */\n\n/**\n * A typed array instance.\n * @typedef {import('./table').TypedArray} TypedArray\n */\n\n/**\n * Table value.\n * @typedef {import('./table').DataValue} DataValue\n */\n\n/**\n * Column value accessor.\n * @typedef {import('./table').ColumnGetter} ColumnGetter\n */\n\n/**\n * Options for generating row objects.\n * @typedef {import('./table').ObjectsOptions} ObjectsOptions\n */\n\n/**\n * A table transformation.\n * @typedef {(table: ColumnTable) => ColumnTable} Transform\n */\n\n/**\n * Proxy type for BitSet class.\n * @typedef {import('./table').BitSet} BitSet\n */\n\n/**\n * Proxy type for ColumnType interface.\n * @typedef {import('./column').ColumnType} ColumnType\n */\n\n/**\n * A named collection of columns.\n * @typedef {{[key: string]: ColumnType}} ColumnData\n */\n\n/**\n * Proxy type for GroupBySpec.\n * @typedef {import('./table').GroupBySpec} GroupBySpec\n */\n\n/**\n * Proxy type for RowComparator.\n * @typedef {import('./table').RowComparator} RowComparator\n */\n\n/**\n * Proxy type for Params.\n * @typedef {import('./table').Params} Params\n */\n\n/**\n * Options for Arrow formatting.\n * @typedef {import('../arrow/encode').ArrowFormatOptions} ArrowFormatOptions\n */\n\n/**\n * Options for CSV formatting.\n * @typedef {import('../format/to-csv').CSVFormatOptions} CSVFormatOptions\n */\n\n/**\n * Options for HTML formatting.\n * @typedef {import('../format/to-html').HTMLFormatOptions} HTMLFormatOptions\n */\n\n/**\n * Options for JSON formatting.\n * @typedef {import('../format/to-json').JSONFormatOptions} JSONFormatOptions\n */\n\n/**\n * Options for Markdown formatting.\n * @typedef {import('../format/to-markdown').MarkdownFormatOptions} MarkdownFormatOptions\n */\n"],"names":["ColumnTable","Table","values","names","columnsFrom","columns","data","keys","key","value","entries","filter","group","order","params","mapObject","defaultColumnFactory","nrows","groups","f","regroup","tables","base","cset","columnSet","input","error","name","index","constructor","column","array","idx","row","indices","objectBuilder","options","grouped","limit","offset","resolve","all","create","rowObjectBuilder","obj","nest","n","i","scan","ncols","prev","curr","arrayType","r","reindex","transforms","t","toArrow","toArrowIPC","toCSV","toHTML","toJSON","toMarkdown","table","b"],"mappings":"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","x_google_ignoreList":[0]}