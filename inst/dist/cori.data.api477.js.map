{"version":3,"file":"cori.data.api477.js","sources":["../../node_modules/mdast-util-to-hast/lib/revert.js"],"sourcesContent":["/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n"],"names":["revert","state","node","subtype","suffix","contents","head","tail"],"mappings":";;;;;;AAsBO,SAASA,EAAOC,GAAOC,GAAM;AAClC,QAAMC,IAAUD,EAAK;AACrB,MAAIE,IAAS;AAQb,MANID,MAAY,cACdC,KAAU,OACDD,MAAY,WACrBC,KAAU,OAAOF,EAAK,SAASA,EAAK,cAAc,MAGhDA,EAAK,SAAS;AAChB,WAAO,CAAC,EAAC,MAAM,QAAQ,OAAO,OAAOA,EAAK,MAAME,EAAM,CAAC;AAGzD,QAAMC,IAAWJ,EAAM,IAAIC,CAAI,GACzBI,IAAOD,EAAS,CAAC;AAEvB,EAAIC,KAAQA,EAAK,SAAS,SACxBA,EAAK,QAAQ,MAAMA,EAAK,QAExBD,EAAS,QAAQ,EAAC,MAAM,QAAQ,OAAO,IAAG,CAAC;AAG7C,QAAME,IAAOF,EAASA,EAAS,SAAS,CAAC;AAEzC,SAAIE,KAAQA,EAAK,SAAS,SACxBA,EAAK,SAASH,IAEdC,EAAS,KAAK,EAAC,MAAM,QAAQ,OAAOD,EAAM,CAAC,GAGtCC;AACT;","x_google_ignoreList":[0]}