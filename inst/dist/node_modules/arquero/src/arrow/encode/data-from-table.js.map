{"version":3,"file":"data-from-table.js","sources":["../../../../../../../node_modules/arquero/src/arrow/encode/data-from-table.js"],"sourcesContent":["import {\n  Float32, Float64,\n  Int16, Int32, Int64, Int8,\n  Uint16, Uint32, Uint64, Uint8, Vector\n} from 'apache-arrow';\nimport { dataFromArray, dataFromScan } from './data-from';\nimport { profile } from './profiler';\nimport resolveType from '../builder/resolve-type';\nimport isTypedArray from '../../util/is-typed-array';\n\nexport default function(table, name, nrows, scan, type, nullable = true) {\n  type = resolveType(type);\n  const column = table.column(name);\n  const reified = !(table.isFiltered() || table.isOrdered());\n\n  // use existing arrow data if types match\n  const vec = arrowVector(column);\n  if (vec && reified && typeCompatible(vec.type, type)) {\n    return vec;\n  }\n\n  // if backing data is a typed array, leverage that\n  const data = column.data;\n  if (isTypedArray(data)) {\n    const dtype = typeFromArray(data);\n    if (reified && dtype && typeCompatible(dtype, type)) {\n      return dataFromArray(data, dtype);\n    } else {\n      type = type || dtype;\n      nullable = false;\n    }\n  }\n\n  // perform type inference if needed\n  if (!type) {\n    const p = profile(scan, column);\n    nullable = p.nulls > 0;\n    type = p.type();\n  }\n\n  return dataFromScan(nrows, scan, column, type, nullable);\n}\n\nfunction arrowVector(value) {\n  return value instanceof Vector ? value\n    : value.vector instanceof Vector ? value.vector\n    : null;\n}\n\nfunction typeFromArray(data) {\n  const types = {\n    Float32Array:    Float32,\n    Float64Array:    Float64,\n    Int8Array:       Int8,\n    Int16Array:      Int16,\n    Int32Array:      Int32,\n    Uint8Array:      Uint8,\n    Uint16Array:     Uint16,\n    Uint32Array:     Uint32,\n    BigInt64Array:   Int64,\n    BigUint64Array:  Uint64\n  };\n  const Type = types[data.constructor.name];\n  return Type ? new Type() : null;\n}\n\nfunction typeCompatible(a, b) {\n  return !a || !b ? true : a.compareTo(b);\n}"],"names":[],"mappings":";;;;;;;;;;;;;AAUe,sBAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,GAAG,IAAI,EAAE;AACzE,EAAE,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;AAC3B,EAAE,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACpC,EAAE,MAAM,OAAO,GAAG,EAAE,KAAK,CAAC,UAAU,EAAE,IAAI,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;AAC7D;AACA;AACA,EAAE,MAAM,GAAG,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;AAClC,EAAE,IAAI,GAAG,IAAI,OAAO,IAAI,cAAc,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE;AACxD,IAAI,OAAO,GAAG,CAAC;AACf,GAAG;AACH;AACA;AACA,EAAE,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;AAC3B,EAAE,IAAI,YAAY,CAAC,IAAI,CAAC,EAAE;AAC1B,IAAI,MAAM,KAAK,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;AACtC,IAAI,IAAI,OAAO,IAAI,KAAK,IAAI,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE;AACzD,MAAM,OAAO,aAAa,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACxC,KAAK,MAAM;AACX,MAAM,IAAI,GAAG,IAAI,IAAI,KAAK,CAAC;AAC3B,MAAM,QAAQ,GAAG,KAAK,CAAC;AACvB,KAAK;AACL,GAAG;AACH;AACA;AACA,EAAE,IAAI,CAAC,IAAI,EAAE;AACb,IAAI,MAAM,CAAC,GAAG,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AACpC,IAAI,QAAQ,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;AAC3B,IAAI,IAAI,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;AACpB,GAAG;AACH;AACA,EAAE,OAAO,YAAY,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;AAC3D,CAAC;AACD;AACA,SAAS,WAAW,CAAC,KAAK,EAAE;AAC5B,EAAE,OAAO,KAAK,YAAY,MAAM,GAAG,KAAK;AACxC,MAAM,KAAK,CAAC,MAAM,YAAY,MAAM,GAAG,KAAK,CAAC,MAAM;AACnD,MAAM,IAAI,CAAC;AACX,CAAC;AACD;AACA,SAAS,aAAa,CAAC,IAAI,EAAE;AAC7B,EAAE,MAAM,KAAK,GAAG;AAChB,IAAI,YAAY,KAAK,OAAO;AAC5B,IAAI,YAAY,KAAK,OAAO;AAC5B,IAAI,SAAS,QAAQ,IAAI;AACzB,IAAI,UAAU,OAAO,KAAK;AAC1B,IAAI,UAAU,OAAO,KAAK;AAC1B,IAAI,UAAU,OAAO,KAAK;AAC1B,IAAI,WAAW,MAAM,MAAM;AAC3B,IAAI,WAAW,MAAM,MAAM;AAC3B,IAAI,aAAa,IAAI,KAAK;AAC1B,IAAI,cAAc,GAAG,MAAM;AAC3B,GAAG,CAAC;AACJ,EAAE,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AAC5C,EAAE,OAAO,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG,IAAI,CAAC;AAClC,CAAC;AACD;AACA,SAAS,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE;AAC9B,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;AAC1C;;;;","x_google_ignoreList":[0]}