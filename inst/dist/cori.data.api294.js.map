{"version":3,"file":"cori.data.api294.js","sources":["../../node_modules/arquero/src/format/to-csv.js"],"sourcesContent":["import ColumnTable from '../table/column-table'; // eslint-disable-line no-unused-vars\n\nimport { columns, scan } from './util';\nimport { formatUTCDate } from '../util/format-date';\nimport isDate from '../util/is-date';\n\n/**\n * Options for CSV formatting.\n * @typedef {object} CSVFormatOptions\n * @property {string} [delimiter=','] The delimiter between values.\n * @property {number} [limit=Infinity] The maximum number of rows to print.\n * @property {number} [offset=0] The row offset indicating how many initial rows to skip.\n * @property {import('./util').ColumnSelectOptions} [columns] Ordered list\n *  of column names to include. If function-valued, the function should\n *  accept a table as input and return an array of column name strings.\n * @property {Object.<string, (value: any) => any>} [format] Object of column\n *  format options. The object keys should be column names. The object values\n *  should be formatting functions to invoke to transform column values prior\n *  to output. If specified, these override automatically inferred options.\n */\n\n/**\n * Format a table as a comma-separated values (CSV) string. Other\n * delimiters, such as tabs or pipes ('|'), can be specified using\n * the options argument.\n * @param {ColumnTable} table The table to format.\n * @param {CSVFormatOptions} options The formatting options.\n * @return {string} A delimited-value format string.\n */\nexport default function(table, options = {}) {\n  const names = columns(table, options.columns);\n  const format = options.format || {};\n  const delim = options.delimiter || ',';\n  const reFormat = new RegExp(`[\"${delim}\\n\\r]`);\n\n  const formatValue = value => value == null ? ''\n    : isDate(value) ? formatUTCDate(value, true)\n    : reFormat.test(value += '') ? '\"' + value.replace(/\"/g, '\"\"') + '\"'\n    : value;\n\n  const vals = names.map(formatValue);\n  let text = '';\n\n  scan(table, names, options.limit || Infinity, options.offset, {\n    row() {\n      text += vals.join(delim) + '\\n';\n    },\n    cell(value, name, index) {\n      vals[index] = formatValue(format[name] ? format[name](value) : value);\n    }\n  });\n\n  return text + vals.join(delim);\n}"],"names":["toCSV","table","options","names","columns","format","delim","reFormat","formatValue","value","isDate","formatUTCDate","vals","text","scan","name","index"],"mappings":";;;;;;;;;;;AA6Be,SAAAA,EAASC,GAAOC,IAAU,IAAI;AAC3C,QAAMC,IAAQC,EAAQH,GAAOC,EAAQ,OAAO,GACtCG,IAASH,EAAQ,UAAU,IAC3BI,IAAQJ,EAAQ,aAAa,KAC7BK,IAAW,IAAI,OAAO,KAAKD,CAAK;AAAA,IAAO,GAEvCE,IAAc,CAAAC,MAASA,KAAS,OAAO,KACzCC,EAAOD,CAAK,IAAIE,EAAcF,GAAO,EAAI,IACzCF,EAAS,KAAKE,KAAS,EAAE,IAAI,MAAMA,EAAM,QAAQ,MAAM,IAAI,IAAI,MAC/DA,GAEEG,IAAOT,EAAM,IAAIK,CAAW;AAClC,MAAIK,IAAO;AAEX,SAAAC,EAAKb,GAAOE,GAAOD,EAAQ,SAAS,OAAUA,EAAQ,QAAQ;AAAA,IAC5D,MAAM;AACJ,MAAAW,KAAQD,EAAK,KAAKN,CAAK,IAAI;AAAA;AAAA,IAC5B;AAAA,IACD,KAAKG,GAAOM,GAAMC,GAAO;AACvB,MAAAJ,EAAKI,CAAK,IAAIR,EAAYH,EAAOU,CAAI,IAAIV,EAAOU,CAAI,EAAEN,CAAK,IAAIA,CAAK;AAAA,IACrE;AAAA,EACL,CAAG,GAEMI,IAAOD,EAAK,KAAKN,CAAK;AAC/B;","x_google_ignoreList":[0]}