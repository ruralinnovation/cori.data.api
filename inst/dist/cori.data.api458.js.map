{"version":3,"file":"cori.data.api458.js","sources":["../../node_modules/decode-named-character-reference/index.dom.js"],"sourcesContent":["/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `Â¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n"],"names":["element","decodeNamedCharacterReference","value","characterReference","char"],"mappings":";;;;;;AAIA,MAAMA,IAAU,SAAS,cAAc,GAAG;AAMnC,SAASC,EAA8BC,GAAO;AACnD,QAAMC,IAAqB,MAAMD,IAAQ;AACzC,EAAAF,EAAQ,YAAYG;AACpB,QAAMC,IAAOJ,EAAQ;AAUrB,SAAII,EAAK,WAAWA,EAAK,SAAS,CAAC,MAAM,MAAgBF,MAAU,UAQ5DE,MAASD,IAPP,KAOoCC;AAC/C;","x_google_ignoreList":[0]}