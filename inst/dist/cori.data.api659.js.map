{"version":3,"file":"cori.data.api659.js","sources":["../../node_modules/micromark-core-commonmark/lib/blank-line.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > üëâ **Note**: `‚ê†` represents a space character.\n   *\n   * ```markdown\n   * > | ‚ê†‚ê†‚êä\n   *     ^\n   * > | ‚êä\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > üëâ **Note**: `‚ê†` represents a space character.\n   *\n   * ```markdown\n   * > | ‚ê†‚ê†‚êä\n   *       ^\n   * > | ‚êä\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}"],"names":["blankLine","tokenizeBlankLine","effects","ok","nok","start","code","markdownSpace","factorySpace","after","markdownLineEnding"],"mappings":";;;;;;;;AAUY,MAACA,IAAY;AAAA,EACvB,UAAUC;AAAA,EACV,SAAS;AACX;AAMA,SAASA,EAAkBC,GAASC,GAAIC,GAAK;AAC3C,SAAOC;AAgBP,WAASA,EAAMC,GAAM;AACnB,WAAOC,EAAcD,CAAI,IAAIE,EAAaN,GAASO,GAAO,YAAY,EAAEH,CAAI,IAAIG,EAAMH,CAAI;AAAA,EAC3F;AAgBD,WAASG,EAAMH,GAAM;AACnB,WAAOA,MAAS,QAAQI,EAAmBJ,CAAI,IAAIH,EAAGG,CAAI,IAAIF,EAAIE,CAAI;AAAA,EACvE;AACH;","x_google_ignoreList":[0]}