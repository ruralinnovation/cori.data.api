{"version":3,"file":"cori.data.api614.js","sources":["../../node_modules/apache-arrow/util/math.mjs"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nconst f64 = new Float64Array(1);\nconst u32 = new Uint32Array(f64.buffer);\n/**\n * Convert uint16 (logically a float16) to a JS float64. Inspired by numpy's `npy_half_to_double`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L29\n * @param h {number} the uint16 to convert\n * @private\n * @ignore\n */\nexport function uint16ToFloat64(h) {\n    const expo = (h & 0x7C00) >> 10;\n    const sigf = (h & 0x03FF) / 1024;\n    const sign = Math.pow((-1), ((h & 0x8000) >> 15));\n    switch (expo) {\n        case 0x1F: return sign * (sigf ? Number.NaN : 1 / 0);\n        case 0x00: return sign * (sigf ? 6.103515625e-5 * sigf : 0);\n    }\n    return sign * (Math.pow(2, (expo - 15))) * (1 + sigf);\n}\n/**\n * Convert a float64 to uint16 (assuming the float64 is logically a float16). Inspired by numpy's `npy_double_to_half`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L43\n * @param d {number} The float64 to convert\n * @private\n * @ignore\n */\nexport function float64ToUint16(d) {\n    if (d !== d) {\n        return 0x7E00;\n    } // NaN\n    f64[0] = d;\n    // Magic numbers:\n    // 0x80000000 = 10000000 00000000 00000000 00000000 -- masks the 32nd bit\n    // 0x7ff00000 = 01111111 11110000 00000000 00000000 -- masks the 21st-31st bits\n    // 0x000fffff = 00000000 00001111 11111111 11111111 -- masks the 1st-20th bit\n    const sign = (u32[1] & 0x80000000) >> 16 & 0xFFFF;\n    let expo = (u32[1] & 0x7FF00000), sigf = 0x0000;\n    if (expo >= 0x40F00000) {\n        //\n        // If exponent overflowed, the float16 is either NaN or Infinity.\n        // Rules to propagate the sign bit: mantissa > 0 ? NaN : +/-Infinity\n        //\n        // Magic numbers:\n        // 0x40F00000 = 01000000 11110000 00000000 00000000 -- 6-bit exponent overflow\n        // 0x7C000000 = 01111100 00000000 00000000 00000000 -- masks the 27th-31st bits\n        //\n        // returns:\n        // qNaN, aka 32256 decimal, 0x7E00 hex, or 01111110 00000000 binary\n        // sNaN, aka 32000 decimal, 0x7D00 hex, or 01111101 00000000 binary\n        // +inf, aka 31744 decimal, 0x7C00 hex, or 01111100 00000000 binary\n        // -inf, aka 64512 decimal, 0xFC00 hex, or 11111100 00000000 binary\n        //\n        // If mantissa is greater than 23 bits, set to +Infinity like numpy\n        if (u32[0] > 0) {\n            expo = 0x7C00;\n        }\n        else {\n            expo = (expo & 0x7C000000) >> 16;\n            sigf = (u32[1] & 0x000FFFFF) >> 10;\n        }\n    }\n    else if (expo <= 0x3F000000) {\n        //\n        // If exponent underflowed, the float is either signed zero or subnormal.\n        //\n        // Magic numbers:\n        // 0x3F000000 = 00111111 00000000 00000000 00000000 -- 6-bit exponent underflow\n        //\n        sigf = 0x100000 + (u32[1] & 0x000FFFFF);\n        sigf = 0x100000 + (sigf << ((expo >> 20) - 998)) >> 21;\n        expo = 0;\n    }\n    else {\n        //\n        // No overflow or underflow, rebase the exponent and round the mantissa\n        // Magic numbers:\n        // 0x200 = 00000010 00000000 -- masks off the 10th bit\n        //\n        // Ensure the first mantissa bit (the 10th one) is 1 and round\n        expo = (expo - 0x3F000000) >> 10;\n        sigf = ((u32[1] & 0x000FFFFF) + 0x200) >> 10;\n    }\n    return sign | expo | sigf & 0xFFFF;\n}\n\n//# sourceMappingURL=math.mjs.map\n"],"names":["f64","u32","uint16ToFloat64","h","expo","sigf","sign","float64ToUint16","d"],"mappings":";;;;;;AAgBA,MAAMA,IAAM,IAAI,aAAa,CAAC,GACxBC,IAAM,IAAI,YAAYD,EAAI,MAAM;AAQ/B,SAASE,EAAgBC,GAAG;AAC/B,QAAMC,KAAQD,IAAI,UAAW,IACvBE,KAAQF,IAAI,QAAU,MACtBG,IAAO,KAAK,IAAK,KAAOH,IAAI,UAAW;AAC7C,UAAQC,GAAI;AAAA,IACR,KAAK;AAAM,aAAOE,KAAQD,IAAO,OAAO,MAAM;AAAA,IAC9C,KAAK;AAAM,aAAOC,KAAQD,IAAO,iBAAiBA,IAAO;AAAA,EAC5D;AACD,SAAOC,IAAQ,KAAK,IAAI,GAAIF,IAAO,OAAS,IAAIC;AACpD;AAQO,SAASE,EAAgBC,GAAG;AAC/B,MAAIA,MAAMA;AACN,WAAO;AAEX,EAAAR,EAAI,CAAC,IAAIQ;AAKT,QAAMF,KAAQL,EAAI,CAAC,IAAI,eAAe,KAAK;AAC3C,MAAIG,IAAQH,EAAI,CAAC,IAAI,YAAaI,IAAO;AACzC,SAAID,KAAQ,aAgBJH,EAAI,CAAC,IAAI,IACTG,IAAO,SAGPA,KAAQA,IAAO,eAAe,IAC9BC,KAAQJ,EAAI,CAAC,IAAI,YAAe,MAG/BG,KAAQ,cAObC,IAAO,WAAYJ,EAAI,CAAC,IAAI,UAC5BI,IAAO,WAAYA,MAAUD,KAAQ,MAAM,QAAS,IACpDA,IAAO,MASPA,IAAQA,IAAO,cAAe,IAC9BC,KAASJ,EAAI,CAAC,IAAI,WAAc,OAAU,KAEvCK,IAAOF,IAAOC,IAAO;AAChC;","x_google_ignoreList":[0]}