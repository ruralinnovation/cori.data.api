{"version":3,"file":"util.js","sources":["../../../../../../../node_modules/arquero/src/engine/reduce/util.js"],"sourcesContent":["import fieldReducer from './field-reducer';\nimport repeat from '../../util/repeat';\n\nexport function aggregateGet(table, ops, get) {\n  if (ops.length) {\n    const data = table.data();\n    const { keys } = table.groups() || {};\n    const result = aggregate(table, ops);\n    const op = keys\n      ? (name, row) => result[name][keys[row]]\n      : name => result[name][0];\n    get = get.map(f => row => f(row, data, op));\n  }\n\n  return get;\n}\n\nexport function aggregate(table, ops, result) {\n  if (!ops.length) return result; // early exit\n\n  // instantiate aggregators and result store\n  const aggrs = reducers(ops);\n  const groups = table.groups();\n  const size = groups ? groups.size : 1;\n  result = result || repeat(ops.length, () => Array(size));\n\n  // compute aggregates, extract results\n  if (size > 1) {\n    aggrs.forEach(aggr => {\n      const cells = reduceGroups(table, aggr, groups);\n      for (let i = 0; i < size; ++i) {\n        aggr.write(cells[i], result, i);\n      }\n    });\n  } else {\n    aggrs.forEach(aggr => {\n      const cell = reduceFlat(table, aggr);\n      aggr.write(cell, result, 0);\n    });\n  }\n\n  return result;\n}\n\nexport function reducers(ops, stream) {\n  const aggrs = [];\n  const fields = {};\n\n  // group operators by field inputs\n  for (const op of ops) {\n    const key = op.fields.map(f => f + '').join(',');\n    (fields[key] || (fields[key] = [])).push(op);\n  }\n\n  // generate a field reducer for each field\n  for (const key in fields) {\n    aggrs.push(fieldReducer(fields[key], stream));\n  }\n\n  return aggrs;\n}\n\nexport function reduceFlat(table, reducer) {\n  // initialize aggregation cell\n  const cell = reducer.init();\n\n  // compute aggregate values\n  // inline the following for performance:\n  // table.scan((row, data) => reducer.add(cell, row, data));\n  const n = table.totalRows();\n  const data = table.data();\n  const bits = table.mask();\n\n  if (table.isOrdered()) {\n    const idx = table.indices();\n    for (let i = 0; i < n; ++i) {\n      reducer.add(cell, idx[i], data);\n    }\n  } else if (bits) {\n    for (let i = bits.next(0); i >= 0; i = bits.next(i + 1)) {\n      reducer.add(cell, i, data);\n    }\n  } else {\n    for (let i = 0; i < n; ++i) {\n      reducer.add(cell, i, data);\n    }\n  }\n\n  return cell;\n}\n\nexport function reduceGroups(table, reducer, groups) {\n  const { keys, size } = groups;\n\n  // initialize aggregation cells\n  const cells = repeat(size, () => reducer.init());\n\n  // compute aggregate values\n  // inline the following for performance:\n  // table.scan((row, data) => reducer.add(cells[keys[row]], row, data));\n  const data = table.data();\n\n  if (table.isOrdered()) {\n    const idx = table.indices();\n    const m = idx.length;\n    for (let i = 0; i < m; ++i) {\n      const row = idx[i];\n      reducer.add(cells[keys[row]], row, data);\n    }\n  } else if (table.isFiltered()) {\n    const bits = table.mask();\n    for (let i = bits.next(0); i >= 0; i = bits.next(i + 1)) {\n      reducer.add(cells[keys[i]], i, data);\n    }\n  } else {\n    const n = table.totalRows();\n    for (let i = 0; i < n; ++i) {\n      reducer.add(cells[keys[i]], i, data);\n    }\n  }\n\n  return cells;\n}\n\nexport function groupOutput(cols, groups) {\n  const { get, names, rows, size } = groups;\n\n  // write group values to output columns\n  const m = names.length;\n  for (let j = 0; j < m; ++j) {\n    const col = cols.add(names[j], Array(size));\n    const val = get[j];\n    for (let i = 0; i < size; ++i) {\n      col[i] = val(rows[i]);\n    }\n  }\n}"],"names":[],"mappings":"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","x_google_ignoreList":[0]}