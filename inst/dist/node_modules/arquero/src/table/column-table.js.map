{"version":3,"file":"column-table.js","sources":["../../../../../../node_modules/arquero/src/table/column-table.js"],"sourcesContent":["import { defaultColumnFactory } from './column';\nimport columnsFrom from './columns-from';\nimport columnSet from './column-set';\nimport Table from './table';\nimport { nest, regroup, reindex } from './regroup';\nimport { rowObjectBuilder } from '../expression/row-object';\nimport { default as toArrow, toArrowIPC } from '../format/to-arrow';\nimport toCSV from '../format/to-csv';\nimport toHTML from '../format/to-html';\nimport toJSON from '../format/to-json';\nimport toMarkdown from '../format/to-markdown';\nimport resolve, { all } from '../helpers/selection';\nimport arrayType from '../util/array-type';\nimport entries from '../util/entries';\nimport error from '../util/error';\nimport mapObject from '../util/map-object';\n\n/**\n * Class representing a table backed by a named set of columns.\n */\nexport default class ColumnTable extends Table {\n\n  /**\n   * Create a new ColumnTable from existing input data.\n   * @param {object[]|Iterable<object>|object|Map} values The backing table data values.\n   *  If array-valued, should be a list of JavaScript objects with\n   *  key-value properties for each column value.\n   *  If object- or Map-valued, a table with two columns (one for keys,\n   *  one for values) will be created.\n   * @param {string[]} [names] The named columns to include.\n   * @return {ColumnTable} A new ColumnTable instance.\n   */\n  static from(values, names) {\n    return new ColumnTable(columnsFrom(values, names), names);\n  }\n\n  /**\n   * Create a new table for a set of named columns.\n   * @param {object|Map} columns\n   *  The set of named column arrays. Keys are column names.\n   *  The enumeration order of the keys determines the column indices,\n   *  unless the names parameter is specified.\n   *  Values must be arrays (or array-like values) of identical length.\n   * @param {string[]} [names] Ordered list of column names. If specified,\n   *  this array determines the column indices. If not specified, the\n   *  key enumeration order of the columns object is used.\n   * @return {ColumnTable} the instantiated ColumnTable instance.\n   */\n  static new(columns, names) {\n    if (columns instanceof ColumnTable) return columns;\n    const data = {};\n    const keys = [];\n    for (const [key, value] of entries(columns)) {\n      data[key] = value;\n      keys.push(key);\n    }\n    return new ColumnTable(data, names || keys);\n  }\n\n  /**\n   * Instantiate a new ColumnTable instance.\n   * @param {object} columns An object mapping column names to values.\n   * @param {string[]} [names] An ordered list of column names.\n   * @param {BitSet} [filter] A filtering BitSet.\n   * @param {GroupBySpec} [group] A groupby specification.\n   * @param {RowComparator} [order] A row comparator function.\n   * @param {Params} [params] An object mapping parameter names to values.\n   */\n  constructor(columns, names, filter, group, order, params) {\n    mapObject(columns, defaultColumnFactory, columns);\n    names = names || Object.keys(columns);\n    const nrows = names.length ? columns[names[0]].length : 0;\n    super(names, nrows, columns, filter, group, order, params);\n  }\n\n  /**\n   * Create a new table with the same type as this table.\n   * The new table may have different data, filter, grouping, or ordering\n   * based on the values of the optional configuration argument. If a\n   * setting is not specified, it is inherited from the current table.\n   * @param {CreateOptions} [options] Creation options for the new table.\n   * @return {this} A newly created table.\n   */\n  create({ data, names, filter, groups, order }) {\n    const f = filter !== undefined ? filter : this.mask();\n\n    return new ColumnTable(\n      data || this._data,\n      names || (!data ? this._names : null),\n      f,\n      groups !== undefined ? groups : regroup(this._group, filter && f),\n      order !== undefined ? order : this._order,\n      this._params\n    );\n  }\n\n  /**\n   * Create a new table with additional columns drawn from one or more input\n   * tables. All tables must have the same numer of rows and are reified\n   * prior to assignment. In the case of repeated column names, input table\n   * columns overwrite existing columns.\n   * @param {...ColumnTable} tables The tables to merge with this table.\n   * @return {ColumnTable} A new table with merged columns.\n   * @example table.assign(table1, table2)\n   */\n  assign(...tables) {\n    const nrows = this.numRows();\n    const base = this.reify();\n    const cset = columnSet(base).groupby(base.groups());\n    tables.forEach(input => {\n      input = ColumnTable.new(input);\n      if (input.numRows() !== nrows) error('Assign row counts do not match');\n      input = input.reify();\n      input.columnNames(name => cset.add(name, input.column(name)));\n    });\n    return this.create(cset.new());\n  }\n\n  /**\n   * Get the backing set of columns for this table.\n   * @return {ColumnData} Object of named column instances.\n   */\n  columns() {\n    return this._data;\n  }\n\n  /**\n   * Get the column instance with the given name.\n   * @param {string} name The column name.\n   * @return {ColumnType | undefined} The named column, or undefined if it does not exist.\n   */\n  column(name) {\n    return this._data[name];\n  }\n\n  /**\n   * Get the column instance at the given index position.\n   * @param {number} index The zero-based column index.\n   * @return {ColumnType | undefined} The column, or undefined if it does not exist.\n   */\n  columnAt(index) {\n    return this._data[this._names[index]];\n  }\n\n  /**\n   * Get an array of values contained in a column. The resulting array\n   * respects any table filter or orderby criteria.\n   * @param {string} name The column name.\n   * @param {ArrayConstructor|TypedArrayConstructor} [constructor=Array]\n   *  The array constructor for instantiating the output array.\n   * @return {DataValue[]|TypedArray} The array of column values.\n   */\n  array(name, constructor = Array) {\n    const column = this.column(name);\n    const array = new constructor(this.numRows());\n    let idx = -1;\n    this.scan(row => array[++idx] = column.get(row), true);\n    return array;\n  }\n\n  /**\n   * Get the value for the given column and row.\n   * @param {string} name The column name.\n   * @param {number} [row=0] The row index, defaults to zero if not specified.\n   * @return {DataValue} The table value at (column, row).\n   */\n  get(name, row = 0) {\n    const column = this.column(name);\n    return this.isFiltered() || this.isOrdered()\n      ? column.get(this.indices()[row])\n      : column.get(row);\n  }\n\n  /**\n   * Returns an accessor (\"getter\") function for a column. The returned\n   * function takes a row index as its single argument and returns the\n   * corresponding column value.\n   * @param {string} name The column name.\n   * @return {ColumnGetter} The column getter function.\n   */\n  getter(name) {\n    const column = this.column(name);\n    const indices = this.isFiltered() || this.isOrdered() ? this.indices() : null;\n    return indices ? row => column.get(indices[row])\n      : column ? row => column.get(row)\n      : error(`Unrecognized column: ${name}`);\n  }\n\n  /**\n   * Returns an object representing a table row.\n   * @param {number} [row=0] The row index, defaults to zero if not specified.\n   * @return {object} A row object with named properties for each column.\n   */\n  object(row = 0) {\n    return objectBuilder(this)(row);\n  }\n\n  /**\n   * Returns an array of objects representing table rows.\n   * @param {ObjectsOptions} [options] The options for row object generation.\n   * @return {object[]} An array of row objects.\n   */\n  objects(options = {}) {\n    const { grouped, limit, offset } = options;\n\n    // generate array of row objects\n    const names = resolve(this, options.columns || all());\n    const create = rowObjectBuilder(names);\n    const obj = [];\n    this.scan(\n      (row, data) => obj.push(create(row, data)),\n      true, limit, offset\n    );\n\n    // produce nested output as requested\n    if (grouped && this.isGrouped()) {\n      const idx = [];\n      this.scan(row => idx.push(row), true, limit, offset);\n      return nest(this, idx, obj, grouped);\n    }\n\n    return obj;\n  }\n\n  /**\n   * Returns an iterator over objects representing table rows.\n   * @return {Iterator<object>} An iterator over row objects.\n   */\n  *[Symbol.iterator]() {\n    const create = objectBuilder(this);\n    const n = this.numRows();\n    for (let i = 0; i < n; ++i) {\n      yield create(i);\n    }\n  }\n\n  /**\n   * Create a new fully-materialized instance of this table.\n   * All filter and orderby settings are removed from the new table.\n   * Instead, the backing data itself is filtered and ordered as needed.\n   * @param {number[]} [indices] Ordered row indices to materialize.\n   *  If unspecified, all rows passing the table filter are used.\n   * @return {this} A reified table.\n   */\n  reify(indices) {\n    const nrows = indices ? indices.length : this.numRows();\n    const names = this._names;\n    let data, groups;\n\n    if (!indices && !this.isOrdered()) {\n      if (!this.isFiltered()) {\n        return this; // data already reified\n      } else if (nrows === this.totalRows()) {\n        data = this.data(); // all rows pass filter, skip copy\n      }\n    }\n\n    if (!data) {\n      const scan = indices ? f => indices.forEach(f) : f => this.scan(f, true);\n      const ncols = names.length;\n      data = {};\n\n      for (let i = 0; i < ncols; ++i) {\n        const name = names[i];\n        const prev = this.column(name);\n        const curr = data[name] = new (arrayType(prev))(nrows);\n        let r = -1;\n        scan(row => curr[++r] = prev.get(row));\n      }\n\n      if (this.isGrouped()) {\n        groups = reindex(this.groups(), scan, !!indices, nrows);\n      }\n    }\n\n    return this.create({ data, names, groups, filter: null, order: null });\n  }\n\n  /**\n   * Apply a sequence of transformations to this table. The output\n   * of each transform is passed as input to the next transform, and\n   * the output of the last transform is then returned.\n   * @param {...(Transform|Transform[])} transforms Transformation\n   *  functions to apply to the table in sequence. Each function should\n   *  take a single table as input and return a table as output.\n   * @return {ColumnTable} The output of the last transform.\n   */\n  transform(...transforms) {\n    return transforms.flat().reduce((t, f) => f(t), this);\n  }\n\n  /**\n   * Format this table as an Apache Arrow table.\n   * @param {ArrowFormatOptions} [options] The formatting options.\n   * @return {import('apache-arrow').Table} An Apache Arrow table.\n   */\n  toArrow(options) {\n    return toArrow(this, options);\n  }\n\n  /**\n   * Format this table as binary data in the Apache Arrow IPC format.\n   * @param {ArrowFormatOptions} [options] The formatting options. Set {format: 'stream'} \n   *        or {format:\"file\"} for specific IPC format\n   * @return {Uint8Array} A new Uint8Array of Arrow-encoded binary data.\n   */\n  toArrowBuffer(options) {\n    return toArrowIPC(this, options);\n  }\n\n  /**\n   * Format this table as a comma-separated values (CSV) string. Other\n   * delimiters, such as tabs or pipes ('|'), can be specified using\n   * the options argument.\n   * @param {CSVFormatOptions} [options] The formatting options.\n   * @return {string} A delimited value string.\n   */\n  toCSV(options) {\n    return toCSV(this, options);\n  }\n\n  /**\n   * Format this table as an HTML table string.\n   * @param {HTMLFormatOptions} [options] The formatting options.\n   * @return {string} An HTML table string.\n   */\n  toHTML(options) {\n    return toHTML(this, options);\n  }\n\n  /**\n   * Format this table as a JavaScript Object Notation (JSON) string.\n   * @param {JSONFormatOptions} [options] The formatting options.\n   * @return {string} A JSON string.\n   */\n  toJSON(options) {\n    return toJSON(this, options);\n  }\n\n  /**\n   * Format this table as a GitHub-Flavored Markdown table string.\n   * @param {MarkdownFormatOptions} [options] The formatting options.\n   * @return {string} A GitHub-Flavored Markdown table string.\n   */\n  toMarkdown(options) {\n    return toMarkdown(this, options);\n  }\n}\n\nfunction objectBuilder(table) {\n  let b = table._builder;\n\n  if (!b) {\n    const create = rowObjectBuilder(table.columnNames());\n    const data = table.data();\n    if (table.isOrdered() || table.isFiltered()) {\n      const indices = table.indices();\n      b = row => create(indices[row], data);\n    } else {\n      b = row => create(row, data);\n    }\n    table._builder = b;\n  }\n\n  return b;\n}\n\n/**\n * Options for derived table creation.\n * @typedef {import('./table').CreateOptions} CreateOptions\n */\n\n/**\n * A typed array constructor.\n * @typedef {import('./table').TypedArrayConstructor} TypedArrayConstructor\n */\n\n/**\n * A typed array instance.\n * @typedef {import('./table').TypedArray} TypedArray\n */\n\n/**\n * Table value.\n * @typedef {import('./table').DataValue} DataValue\n */\n\n/**\n * Column value accessor.\n * @typedef {import('./table').ColumnGetter} ColumnGetter\n */\n\n/**\n * Options for generating row objects.\n * @typedef {import('./table').ObjectsOptions} ObjectsOptions\n */\n\n/**\n * A table transformation.\n * @typedef {(table: ColumnTable) => ColumnTable} Transform\n */\n\n/**\n * Proxy type for BitSet class.\n * @typedef {import('./table').BitSet} BitSet\n */\n\n/**\n * Proxy type for ColumnType interface.\n * @typedef {import('./column').ColumnType} ColumnType\n */\n\n/**\n * A named collection of columns.\n * @typedef {{[key: string]: ColumnType}} ColumnData\n */\n\n/**\n * Proxy type for GroupBySpec.\n * @typedef {import('./table').GroupBySpec} GroupBySpec\n */\n\n/**\n * Proxy type for RowComparator.\n * @typedef {import('./table').RowComparator} RowComparator\n */\n\n/**\n * Proxy type for Params.\n * @typedef {import('./table').Params} Params\n */\n\n/**\n * Options for Arrow formatting.\n * @typedef {import('../arrow/encode').ArrowFormatOptions} ArrowFormatOptions\n */\n\n/**\n * Options for CSV formatting.\n * @typedef {import('../format/to-csv').CSVFormatOptions} CSVFormatOptions\n */\n\n/**\n * Options for HTML formatting.\n * @typedef {import('../format/to-html').HTMLFormatOptions} HTMLFormatOptions\n */\n\n/**\n * Options for JSON formatting.\n * @typedef {import('../format/to-json').JSONFormatOptions} JSONFormatOptions\n */\n\n/**\n * Options for Markdown formatting.\n * @typedef {import('../format/to-markdown').MarkdownFormatOptions} MarkdownFormatOptions\n */\n"],"names":["mapObject"],"mappings":"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","x_google_ignoreList":[0]}