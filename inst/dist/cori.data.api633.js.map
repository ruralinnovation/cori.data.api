{"version":3,"file":"cori.data.api633.js","sources":["../../node_modules/micromark/lib/initialize/flow.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n"],"names":["flow","initializeFlow","effects","self","initial","blankLine","atBlankEnding","afterConstruct","factorySpace","content","code"],"mappings":";;;;;;;;;AAWY,MAACA,IAAO;AAAA,EAClB,UAAUC;AACZ;AAMA,SAASA,EAAeC,GAAS;AAC/B,QAAMC,IAAO,MACPC,IAAUF,EAAQ;AAAA;AAAA,IAEtBG;AAAA,IACAC;AAAA;AAAA,IAEAJ,EAAQ;AAAA,MACN,KAAK,OAAO,WAAW;AAAA,MACvBK;AAAA,MACAC;AAAA,QACEN;AAAA,QACAA,EAAQ;AAAA,UACN,KAAK,OAAO,WAAW;AAAA,UACvBK;AAAA,UACAL,EAAQ,QAAQO,GAASF,CAAc;AAAA,QACxC;AAAA,QACD;AAAA,MACD;AAAA,IACF;AAAA,EACF;AACD,SAAOH;AAGP,WAASE,EAAcI,GAAM;AAC3B,QAAIA,MAAS,MAAM;AACjB,MAAAR,EAAQ,QAAQQ,CAAI;AACpB;AAAA,IACD;AACD,WAAAR,EAAQ,MAAM,iBAAiB,GAC/BA,EAAQ,QAAQQ,CAAI,GACpBR,EAAQ,KAAK,iBAAiB,GAC9BC,EAAK,mBAAmB,QACjBC;AAAA,EACR;AAGD,WAASG,EAAeG,GAAM;AAC5B,QAAIA,MAAS,MAAM;AACjB,MAAAR,EAAQ,QAAQQ,CAAI;AACpB;AAAA,IACD;AACD,WAAAR,EAAQ,MAAM,YAAY,GAC1BA,EAAQ,QAAQQ,CAAI,GACpBR,EAAQ,KAAK,YAAY,GACzBC,EAAK,mBAAmB,QACjBC;AAAA,EACR;AACH;","x_google_ignoreList":[0]}