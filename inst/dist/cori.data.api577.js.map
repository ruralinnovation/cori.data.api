{"version":3,"file":"cori.data.api577.js","sources":["../../node_modules/apache-arrow/fb/dictionary-batch.mjs"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { RecordBatch } from './record-batch.mjs';\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n */\nexport class DictionaryBatch {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsDictionaryBatch(bb, obj) {\n        return (obj || new DictionaryBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsDictionaryBatch(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new DictionaryBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    id() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt64(this.bb_pos + offset) : BigInt('0');\n    }\n    data(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? (obj || new RecordBatch()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    /**\n     * If isDelta is true the values in the dictionary are to be appended to a\n     * dictionary with the indicated id. If isDelta is false this dictionary\n     * should replace the existing dictionary.\n     */\n    isDelta() {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n    static startDictionaryBatch(builder) {\n        builder.startObject(3);\n    }\n    static addId(builder, id) {\n        builder.addFieldInt64(0, id, BigInt('0'));\n    }\n    static addData(builder, dataOffset) {\n        builder.addFieldOffset(1, dataOffset, 0);\n    }\n    static addIsDelta(builder, isDelta) {\n        builder.addFieldInt8(2, +isDelta, +false);\n    }\n    static endDictionaryBatch(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n}\n\n//# sourceMappingURL=dictionary-batch.mjs.map\n"],"names":["DictionaryBatch","i","bb","obj","flatbuffers.SIZE_PREFIX_LENGTH","offset","RecordBatch","builder","id","dataOffset","isDelta"],"mappings":";;;;;;;;;;AAWO,MAAMA,EAAgB;AAAA,EACzB,cAAc;AACV,SAAK,KAAK,MACV,KAAK,SAAS;AAAA,EACjB;AAAA,EACD,OAAOC,GAAGC,GAAI;AACV,gBAAK,SAASD,GACd,KAAK,KAAKC,GACH;AAAA,EACV;AAAA,EACD,OAAO,yBAAyBA,GAAIC,GAAK;AACrC,YAAQA,KAAO,IAAIH,EAAe,GAAI,OAAOE,EAAG,UAAUA,EAAG,SAAU,CAAA,IAAIA,EAAG,SAAU,GAAEA,CAAE;AAAA,EAC/F;AAAA,EACD,OAAO,qCAAqCA,GAAIC,GAAK;AACjD,WAAAD,EAAG,YAAYA,EAAG,SAAU,IAAGE,CAA8B,IACrDD,KAAO,IAAIH,EAAe,GAAI,OAAOE,EAAG,UAAUA,EAAG,SAAU,CAAA,IAAIA,EAAG,SAAU,GAAEA,CAAE;AAAA,EAC/F;AAAA,EACD,KAAK;AACD,UAAMG,IAAS,KAAK,GAAG,SAAS,KAAK,QAAQ,CAAC;AAC9C,WAAOA,IAAS,KAAK,GAAG,UAAU,KAAK,SAASA,CAAM,IAAI,OAAO,GAAG;AAAA,EACvE;AAAA,EACD,KAAKF,GAAK;AACN,UAAME,IAAS,KAAK,GAAG,SAAS,KAAK,QAAQ,CAAC;AAC9C,WAAOA,KAAUF,KAAO,IAAIG,EAAa,GAAE,OAAO,KAAK,GAAG,WAAW,KAAK,SAASD,CAAM,GAAG,KAAK,EAAE,IAAI;AAAA,EAC1G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,UAAU;AACN,UAAMA,IAAS,KAAK,GAAG,SAAS,KAAK,QAAQ,CAAC;AAC9C,WAAOA,IAAS,CAAC,CAAC,KAAK,GAAG,SAAS,KAAK,SAASA,CAAM,IAAI;AAAA,EAC9D;AAAA,EACD,OAAO,qBAAqBE,GAAS;AACjC,IAAAA,EAAQ,YAAY,CAAC;AAAA,EACxB;AAAA,EACD,OAAO,MAAMA,GAASC,GAAI;AACtB,IAAAD,EAAQ,cAAc,GAAGC,GAAI,OAAO,GAAG,CAAC;AAAA,EAC3C;AAAA,EACD,OAAO,QAAQD,GAASE,GAAY;AAChC,IAAAF,EAAQ,eAAe,GAAGE,GAAY,CAAC;AAAA,EAC1C;AAAA,EACD,OAAO,WAAWF,GAASG,GAAS;AAChC,IAAAH,EAAQ,aAAa,GAAG,CAACG,GAAS,CAAM;AAAA,EAC3C;AAAA,EACD,OAAO,mBAAmBH,GAAS;AAE/B,WADeA,EAAQ;EAE1B;AACL;","x_google_ignoreList":[0]}