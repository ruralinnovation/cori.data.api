{"version":3,"file":"cori.data.api333.js","sources":["../../node_modules/arquero/src/arrow/encode/data-from-table.js"],"sourcesContent":["import {\n  Float32, Float64,\n  Int16, Int32, Int64, Int8,\n  Uint16, Uint32, Uint64, Uint8, Vector\n} from 'apache-arrow';\nimport { dataFromArray, dataFromScan } from './data-from';\nimport { profile } from './profiler';\nimport resolveType from '../builder/resolve-type';\nimport isTypedArray from '../../util/is-typed-array';\n\nexport default function(table, name, nrows, scan, type, nullable = true) {\n  type = resolveType(type);\n  const column = table.column(name);\n  const reified = !(table.isFiltered() || table.isOrdered());\n\n  // use existing arrow data if types match\n  const vec = arrowVector(column);\n  if (vec && reified && typeCompatible(vec.type, type)) {\n    return vec;\n  }\n\n  // if backing data is a typed array, leverage that\n  const data = column.data;\n  if (isTypedArray(data)) {\n    const dtype = typeFromArray(data);\n    if (reified && dtype && typeCompatible(dtype, type)) {\n      return dataFromArray(data, dtype);\n    } else {\n      type = type || dtype;\n      nullable = false;\n    }\n  }\n\n  // perform type inference if needed\n  if (!type) {\n    const p = profile(scan, column);\n    nullable = p.nulls > 0;\n    type = p.type();\n  }\n\n  return dataFromScan(nrows, scan, column, type, nullable);\n}\n\nfunction arrowVector(value) {\n  return value instanceof Vector ? value\n    : value.vector instanceof Vector ? value.vector\n    : null;\n}\n\nfunction typeFromArray(data) {\n  const types = {\n    Float32Array:    Float32,\n    Float64Array:    Float64,\n    Int8Array:       Int8,\n    Int16Array:      Int16,\n    Int32Array:      Int32,\n    Uint8Array:      Uint8,\n    Uint16Array:     Uint16,\n    Uint32Array:     Uint32,\n    BigInt64Array:   Int64,\n    BigUint64Array:  Uint64\n  };\n  const Type = types[data.constructor.name];\n  return Type ? new Type() : null;\n}\n\nfunction typeCompatible(a, b) {\n  return !a || !b ? true : a.compareTo(b);\n}"],"names":["dataFromTable","table","name","nrows","scan","type","nullable","resolveType","column","reified","vec","arrowVector","typeCompatible","data","isTypedArray","dtype","typeFromArray","dataFromArray","p","profile","dataFromScan","value","Vector","Type","Float32","Float64","Int8","Int16","Int32","Uint8","Uint16","Uint32","Int64","Uint64","a","b"],"mappings":";;;;;;;;;;;;AAUe,SAAAA,EAASC,GAAOC,GAAMC,GAAOC,GAAMC,GAAMC,IAAW,IAAM;AACvE,EAAAD,IAAOE,EAAYF,CAAI;AACvB,QAAMG,IAASP,EAAM,OAAOC,CAAI,GAC1BO,IAAU,EAAER,EAAM,WAAY,KAAIA,EAAM,UAAS,IAGjDS,IAAMC,EAAYH,CAAM;AAC9B,MAAIE,KAAOD,KAAWG,EAAeF,EAAI,MAAML,CAAI;AACjD,WAAOK;AAIT,QAAMG,IAAOL,EAAO;AACpB,MAAIM,EAAaD,CAAI,GAAG;AACtB,UAAME,IAAQC,EAAcH,CAAI;AAChC,QAAIJ,KAAWM,KAASH,EAAeG,GAAOV,CAAI;AAChD,aAAOY,EAAcJ,GAAME,CAAK;AAEhC,IAAAV,IAAOA,KAAQU,GACfT,IAAW;AAAA,EAEd;AAGD,MAAI,CAACD,GAAM;AACT,UAAMa,IAAIC,EAAQf,GAAMI,CAAM;AAC9B,IAAAF,IAAWY,EAAE,QAAQ,GACrBb,IAAOa,EAAE;EACV;AAED,SAAOE,EAAajB,GAAOC,GAAMI,GAAQH,GAAMC,CAAQ;AACzD;AAEA,SAASK,EAAYU,GAAO;AAC1B,SAAOA,aAAiBC,IAASD,IAC7BA,EAAM,kBAAkBC,IAASD,EAAM,SACvC;AACN;AAEA,SAASL,EAAcH,GAAM;AAa3B,QAAMU,IAZQ;AAAA,IACZ,cAAiBC;AAAA,IACjB,cAAiBC;AAAA,IACjB,WAAiBC;AAAA,IACjB,YAAiBC;AAAA,IACjB,YAAiBC;AAAA,IACjB,YAAiBC;AAAA,IACjB,aAAiBC;AAAA,IACjB,aAAiBC;AAAA,IACjB,eAAiBC;AAAA,IACjB,gBAAiBC;AAAA,EACrB,EACqBpB,EAAK,YAAY,IAAI;AACxC,SAAOU,IAAO,IAAIA,EAAM,IAAG;AAC7B;AAEA,SAASX,EAAesB,GAAGC,GAAG;AAC5B,SAAO,CAACD,KAAK,CAACC,IAAI,KAAOD,EAAE,UAAUC,CAAC;AACxC;","x_google_ignoreList":[0]}