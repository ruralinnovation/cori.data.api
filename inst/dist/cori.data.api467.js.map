{"version":3,"file":"cori.data.api467.js","sources":["../../node_modules/inline-style-parser/index.js"],"sourcesContent":["// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n"],"names":["COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","NEWLINE","FORWARD_SLASH","ASTERISK","EMPTY_STRING","TYPE_COMMENT","TYPE_DECLARATION","inlineStyleParser","style","options","lineno","column","updatePosition","str","lines","i","position","start","node","Position","whitespace","error","msg","err","match","re","m","comments","rules","c","comment","pos","declaration","prop","val","ret","trim","declarations","decls","decl"],"mappings":"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","x_google_ignoreList":[0]}