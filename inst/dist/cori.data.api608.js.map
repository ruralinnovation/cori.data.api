{"version":3,"file":"cori.data.api608.js","sources":["../../node_modules/apache-arrow/builder/struct.mjs"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/* eslint-disable unicorn/no-array-for-each */\nimport { Field } from '../schema.mjs';\nimport { Builder } from '../builder.mjs';\nimport { Struct } from '../type.mjs';\n/** @ignore */\nexport class StructBuilder extends Builder {\n    setValue(index, value) {\n        const { children, type } = this;\n        switch (Array.isArray(value) || value.constructor) {\n            case true: return type.children.forEach((_, i) => children[i].set(index, value[i]));\n            case Map: return type.children.forEach((f, i) => children[i].set(index, value.get(f.name)));\n            default: return type.children.forEach((f, i) => children[i].set(index, value[f.name]));\n        }\n    }\n    /** @inheritdoc */\n    setValid(index, valid) {\n        if (!super.setValid(index, valid)) {\n            this.children.forEach((child) => child.setValid(index, valid));\n        }\n        return valid;\n    }\n    addChild(child, name = `${this.numChildren}`) {\n        const childIndex = this.children.push(child);\n        this.type = new Struct([...this.type.children, new Field(name, child.type, true)]);\n        return childIndex;\n    }\n}\n\n//# sourceMappingURL=struct.mjs.map\n"],"names":["StructBuilder","Builder","index","value","children","type","_","i","f","valid","child","name","childIndex","Struct","Field"],"mappings":";;;;;;;;;AAqBO,MAAMA,UAAsBC,EAAQ;AAAA,EACvC,SAASC,GAAOC,GAAO;AACnB,UAAM,EAAE,UAAAC,GAAU,MAAAC,EAAM,IAAG;AAC3B,YAAQ,MAAM,QAAQF,CAAK,KAAKA,EAAM,aAAW;AAAA,MAC7C,KAAK;AAAM,eAAOE,EAAK,SAAS,QAAQ,CAACC,GAAGC,MAAMH,EAASG,CAAC,EAAE,IAAIL,GAAOC,EAAMI,CAAC,CAAC,CAAC;AAAA,MAClF,KAAK;AAAK,eAAOF,EAAK,SAAS,QAAQ,CAACG,GAAGD,MAAMH,EAASG,CAAC,EAAE,IAAIL,GAAOC,EAAM,IAAIK,EAAE,IAAI,CAAC,CAAC;AAAA,MAC1F;AAAS,eAAOH,EAAK,SAAS,QAAQ,CAACG,GAAGD,MAAMH,EAASG,CAAC,EAAE,IAAIL,GAAOC,EAAMK,EAAE,IAAI,CAAC,CAAC;AAAA,IACxF;AAAA,EACJ;AAAA;AAAA,EAED,SAASN,GAAOO,GAAO;AACnB,WAAK,MAAM,SAASP,GAAOO,CAAK,KAC5B,KAAK,SAAS,QAAQ,CAACC,MAAUA,EAAM,SAASR,GAAOO,CAAK,CAAC,GAE1DA;AAAA,EACV;AAAA,EACD,SAASC,GAAOC,IAAO,GAAG,KAAK,WAAW,IAAI;AAC1C,UAAMC,IAAa,KAAK,SAAS,KAAKF,CAAK;AAC3C,gBAAK,OAAO,IAAIG,EAAO,CAAC,GAAG,KAAK,KAAK,UAAU,IAAIC,EAAMH,GAAMD,EAAM,MAAM,EAAI,CAAC,CAAC,GAC1EE;AAAA,EACV;AACL;","x_google_ignoreList":[0]}