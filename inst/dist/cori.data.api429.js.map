{"version":3,"file":"cori.data.api429.js","sources":["../../node_modules/arquero/src/op/window-functions.js"],"sourcesContent":["import error from '../util/error';\nimport isValid from '../util/is-valid';\nimport noop from '../util/no-op';\nimport NULL from '../util/null';\n\n/**\n * Initialize a window operator.\n * @callback WindowInit\n * @return {void}\n */\n\n/**\n * A storage object for the state of the window.\n * @typedef {import('../engine/window/window-state').default} WindowState\n */\n\n/**\n * Retrieve an output value from a window operator.\n * @callback WindowValue\n * @param {WindowState} state The window state object.\n * @return {*} The output value.\n */\n\n/**\n * Initialize an aggregate operator.\n * @typedef {import('./aggregate-functions').AggregateInit} AggregateInit\n */\n\n/**\n * Retrive an output value from an aggregate operator.\n * @typedef {import('./aggregate-functions').AggregateValue} AggregateValue\n */\n\n/**\n * An operator instance for a window function.\n * @typedef {object} WindowOperator\n * @property {AggregateInit} init Initialize the operator.\n * @property {AggregateValue} value Retrieve an output value.\n */\n\n/**\n * Create a new window operator instance.\n * @callback WindowCreate\n * @param {...any} params The aggregate operator parameters.\n * @return {WindowOperator} The instantiated window operator.\n */\n\n/**\n * Create a new aggregate operator instance.\n * @typedef {import('./aggregate-functions').AggregateCreate} AggregateCreate\n */\n\n/**\n * An operator definition for a window function.\n * @typedef {object} WindowDef\n * @property {AggregateCreate} create Create a new operator instance.\n * @property {number[]} param Two-element array containing the\n *  counts of input fields and additional parameters.\n */\n\nconst rank = {\n  create() {\n    let rank;\n    return {\n      init: () => rank = 1,\n      value: w => {\n        const i = w.index;\n        return (i && !w.peer(i)) ? (rank = i + 1) : rank;\n      }\n    };\n  },\n  param: []\n};\n\nconst cume_dist = {\n  create() {\n    let cume;\n    return {\n      init: () => cume = 0,\n      value: w => {\n        const { index, peer, size } = w;\n        let i = index;\n        if (cume < i) {\n          while (i + 1 < size && peer(i + 1)) ++i;\n          cume = i;\n        }\n        return (1 + cume) / size;\n      }\n    };\n  },\n  param: []\n};\n\n/**\n * Window operator definitions.\n */\nexport default {\n  /** @type {WindowDef} */\n  row_number: {\n    create() {\n      return {\n        init: noop,\n        value: w => w.index + 1\n      };\n    },\n    param: []\n  },\n\n  /** @type {WindowDef} */\n  rank,\n\n  /** @type {WindowDef} */\n  avg_rank: {\n    create() {\n      let j, rank;\n      return {\n        init: () => (j = -1, rank = 1),\n        value: w => {\n          const i = w.index;\n          if (i >= j) {\n            for (rank = j = i + 1; w.peer(j); rank += ++j);\n            rank /= (j - i);\n          }\n          return rank;\n        }\n      };\n    },\n    param: []\n  },\n\n  /** @type {WindowDef} */\n  dense_rank: {\n    create() {\n      let drank;\n      return {\n        init: () => drank = 1,\n        value: w => {\n          const i = w.index;\n          return (i && !w.peer(i)) ? ++drank : drank;\n        }\n      };\n    },\n    param: []\n  },\n\n  /** @type {WindowDef} */\n  percent_rank: {\n    create() {\n      const { init, value } = rank.create();\n      return {\n        init,\n        value: w => (value(w) - 1) / (w.size - 1)\n      };\n    },\n    param: []\n  },\n\n  /** @type {WindowDef} */\n  cume_dist,\n\n  /** @type {WindowDef} */\n  ntile: {\n    create(num) {\n      num = +num;\n      if (!(num > 0)) error('ntile num must be greater than zero.');\n      const { init, value } = cume_dist.create();\n      return {\n        init,\n        value: w => Math.ceil(num * value(w))\n      };\n    },\n    param: [0, 1]\n  },\n\n  /** @type {WindowDef} */\n  lag: {\n    create(offset, defaultValue = NULL) {\n      offset = +offset || 1;\n      return {\n        init: noop,\n        value: (w, f) => {\n          const i = w.index - offset;\n          return i >= 0 ? w.value(i, f) : defaultValue;\n        }\n      };\n    },\n    param: [1, 2]\n  },\n\n  /** @type {WindowDef} */\n  lead: {\n    create(offset, defaultValue = NULL) {\n      offset = +offset || 1;\n      return {\n        init: noop,\n        value: (w, f) => {\n          const i = w.index + offset;\n          return i < w.size ? w.value(i, f) : defaultValue;\n        }\n      };\n    },\n    param: [1, 2]\n  },\n\n  /** @type {WindowDef} */\n  first_value: {\n    create() {\n      return {\n        init: noop,\n        value: (w, f) => w.value(w.i0, f)\n      };\n    },\n    param: [1]\n  },\n\n  /** @type {WindowDef} */\n  last_value: {\n    create() {\n      return {\n        init: noop,\n        value: (w, f) => w.value(w.i1 - 1, f)\n      };\n    },\n    param: [1]\n  },\n\n  /** @type {WindowDef} */\n  nth_value: {\n    create(nth) {\n      nth = +nth;\n      if (!(nth > 0)) error('nth_value nth must be greater than zero.');\n      return {\n        init: noop,\n        value: (w, f) => {\n          const i = w.i0 + (nth - 1);\n          return i < w.i1 ? w.value(i, f) : NULL;\n        }\n      };\n    },\n    param: [1, 1]\n  },\n\n  /** @type {WindowDef} */\n  fill_down: {\n    create(defaultValue = NULL) {\n      let value;\n      return {\n        init: () => value = defaultValue,\n        value: (w, f) => {\n          const v = w.value(w.index, f);\n          return isValid(v) ? (value = v) : value;\n        }\n      };\n    },\n    param: [1, 1]\n  },\n\n  /** @type {WindowDef} */\n  fill_up: {\n    create(defaultValue = NULL) {\n      let value, idx;\n      return {\n        init: () => (value = defaultValue, idx = -1),\n        value: (w, f) => w.index <= idx ? value\n          : (idx = find(w, f, w.index)) >= 0 ? (value = w.value(idx, f))\n          : (idx = w.size, value = defaultValue)\n      };\n    },\n    param: [1, 1]\n  }\n};\n\nfunction find(w, f, i) {\n  for (const n = w.size; i < n; ++i) {\n    if (isValid(w.value(i, f))) return i;\n  }\n  return -1;\n}\n"],"names":["rank","w","i","cume_dist","cume","index","peer","size","windowFunctions","noop","j","drank","init","value","num","error","offset","defaultValue","NULL","f","nth","v","isValid","idx","find","n"],"mappings":"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","x_google_ignoreList":[0]}