{"version":3,"file":"cori.data.api582.js","sources":["../../node_modules/apache-arrow/fb/decimal.mjs"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\n/**\n * Exact decimal value represented as an integer value in two's\n * complement. Currently only 128-bit (16-byte) and 256-bit (32-byte) integers\n * are used. The representation uses the endianness indicated\n * in the Schema.\n */\nexport class Decimal {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsDecimal(bb, obj) {\n        return (obj || new Decimal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsDecimal(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Decimal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * Total number of decimal digits\n     */\n    precision() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n    /**\n     * Number of digits after the decimal point \".\"\n     */\n    scale() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n    }\n    /**\n     * Number of bits per value. The only accepted widths are 128 and 256.\n     * We use bitWidth for consistency with Int::bitWidth.\n     */\n    bitWidth() {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? this.bb.readInt32(this.bb_pos + offset) : 128;\n    }\n    static startDecimal(builder) {\n        builder.startObject(3);\n    }\n    static addPrecision(builder, precision) {\n        builder.addFieldInt32(0, precision, 0);\n    }\n    static addScale(builder, scale) {\n        builder.addFieldInt32(1, scale, 0);\n    }\n    static addBitWidth(builder, bitWidth) {\n        builder.addFieldInt32(2, bitWidth, 128);\n    }\n    static endDecimal(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createDecimal(builder, precision, scale, bitWidth) {\n        Decimal.startDecimal(builder);\n        Decimal.addPrecision(builder, precision);\n        Decimal.addScale(builder, scale);\n        Decimal.addBitWidth(builder, bitWidth);\n        return Decimal.endDecimal(builder);\n    }\n}\n\n//# sourceMappingURL=decimal.mjs.map\n"],"names":["Decimal","i","bb","obj","flatbuffers.SIZE_PREFIX_LENGTH","offset","builder","precision","scale","bitWidth"],"mappings":";;;;;;;;;AAQO,MAAMA,EAAQ;AAAA,EACjB,cAAc;AACV,SAAK,KAAK,MACV,KAAK,SAAS;AAAA,EACjB;AAAA,EACD,OAAOC,GAAGC,GAAI;AACV,gBAAK,SAASD,GACd,KAAK,KAAKC,GACH;AAAA,EACV;AAAA,EACD,OAAO,iBAAiBA,GAAIC,GAAK;AAC7B,YAAQA,KAAO,IAAIH,EAAO,GAAI,OAAOE,EAAG,UAAUA,EAAG,SAAU,CAAA,IAAIA,EAAG,SAAU,GAAEA,CAAE;AAAA,EACvF;AAAA,EACD,OAAO,6BAA6BA,GAAIC,GAAK;AACzC,WAAAD,EAAG,YAAYA,EAAG,SAAU,IAAGE,CAA8B,IACrDD,KAAO,IAAIH,EAAO,GAAI,OAAOE,EAAG,UAAUA,EAAG,SAAU,CAAA,IAAIA,EAAG,SAAU,GAAEA,CAAE;AAAA,EACvF;AAAA;AAAA;AAAA;AAAA,EAID,YAAY;AACR,UAAMG,IAAS,KAAK,GAAG,SAAS,KAAK,QAAQ,CAAC;AAC9C,WAAOA,IAAS,KAAK,GAAG,UAAU,KAAK,SAASA,CAAM,IAAI;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA,EAID,QAAQ;AACJ,UAAMA,IAAS,KAAK,GAAG,SAAS,KAAK,QAAQ,CAAC;AAC9C,WAAOA,IAAS,KAAK,GAAG,UAAU,KAAK,SAASA,CAAM,IAAI;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA,EAKD,WAAW;AACP,UAAMA,IAAS,KAAK,GAAG,SAAS,KAAK,QAAQ,CAAC;AAC9C,WAAOA,IAAS,KAAK,GAAG,UAAU,KAAK,SAASA,CAAM,IAAI;AAAA,EAC7D;AAAA,EACD,OAAO,aAAaC,GAAS;AACzB,IAAAA,EAAQ,YAAY,CAAC;AAAA,EACxB;AAAA,EACD,OAAO,aAAaA,GAASC,GAAW;AACpC,IAAAD,EAAQ,cAAc,GAAGC,GAAW,CAAC;AAAA,EACxC;AAAA,EACD,OAAO,SAASD,GAASE,GAAO;AAC5B,IAAAF,EAAQ,cAAc,GAAGE,GAAO,CAAC;AAAA,EACpC;AAAA,EACD,OAAO,YAAYF,GAASG,GAAU;AAClC,IAAAH,EAAQ,cAAc,GAAGG,GAAU,GAAG;AAAA,EACzC;AAAA,EACD,OAAO,WAAWH,GAAS;AAEvB,WADeA,EAAQ;EAE1B;AAAA,EACD,OAAO,cAAcA,GAASC,GAAWC,GAAOC,GAAU;AACtD,WAAAT,EAAQ,aAAaM,CAAO,GAC5BN,EAAQ,aAAaM,GAASC,CAAS,GACvCP,EAAQ,SAASM,GAASE,CAAK,GAC/BR,EAAQ,YAAYM,GAASG,CAAQ,GAC9BT,EAAQ,WAAWM,CAAO;AAAA,EACpC;AACL;","x_google_ignoreList":[0]}