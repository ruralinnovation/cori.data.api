{"version":3,"file":"cori.data.api351.js","sources":["../../node_modules/html-to-image/es/embed-resources.js"],"sourcesContent":["import { resolveUrl } from './util';\nimport { getMimeType } from './mimes';\nimport { isDataUrl, makeDataUrl, resourceToDataURL } from './dataurl';\nconst URL_REGEX = /url\\((['\"]?)([^'\"]+?)\\1\\)/g;\nconst URL_WITH_FORMAT_REGEX = /url\\([^)]+\\)\\s*format\\(([\"']?)([^\"']+)\\1\\)/g;\nconst FONT_SRC_REGEX = /src:\\s*(?:url\\([^)]+\\)\\s*format\\([^)]+\\)[,;]\\s*)+/g;\nfunction toRegex(url) {\n    // eslint-disable-next-line no-useless-escape\n    const escaped = url.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n    return new RegExp(`(url\\\\(['\"]?)(${escaped})(['\"]?\\\\))`, 'g');\n}\nexport function parseURLs(cssText) {\n    const urls = [];\n    cssText.replace(URL_REGEX, (raw, quotation, url) => {\n        urls.push(url);\n        return raw;\n    });\n    return urls.filter((url) => !isDataUrl(url));\n}\nexport async function embed(cssText, resourceURL, baseURL, options, getContentFromUrl) {\n    try {\n        const resolvedURL = baseURL ? resolveUrl(resourceURL, baseURL) : resourceURL;\n        const contentType = getMimeType(resourceURL);\n        let dataURL;\n        if (getContentFromUrl) {\n            const content = await getContentFromUrl(resolvedURL);\n            dataURL = makeDataUrl(content, contentType);\n        }\n        else {\n            dataURL = await resourceToDataURL(resolvedURL, contentType, options);\n        }\n        return cssText.replace(toRegex(resourceURL), `$1${dataURL}$3`);\n    }\n    catch (error) {\n        // pass\n    }\n    return cssText;\n}\nfunction filterPreferredFontFormat(str, { preferredFontFormat }) {\n    return !preferredFontFormat\n        ? str\n        : str.replace(FONT_SRC_REGEX, (match) => {\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                const [src, , format] = URL_WITH_FORMAT_REGEX.exec(match) || [];\n                if (!format) {\n                    return '';\n                }\n                if (format === preferredFontFormat) {\n                    return `src: ${src};`;\n                }\n            }\n        });\n}\nexport function shouldEmbed(url) {\n    return url.search(URL_REGEX) !== -1;\n}\nexport async function embedResources(cssText, baseUrl, options) {\n    if (!shouldEmbed(cssText)) {\n        return cssText;\n    }\n    const filteredCSSText = filterPreferredFontFormat(cssText, options);\n    const urls = parseURLs(filteredCSSText);\n    return urls.reduce((deferred, url) => deferred.then((css) => embed(css, url, baseUrl, options)), Promise.resolve(filteredCSSText));\n}\n//# sourceMappingURL=embed-resources.js.map"],"names":["URL_REGEX","URL_WITH_FORMAT_REGEX","FONT_SRC_REGEX","toRegex","url","escaped","parseURLs","cssText","urls","raw","quotation","isDataUrl","embed","resourceURL","baseURL","options","getContentFromUrl","resolvedURL","resolveUrl","contentType","getMimeType","dataURL","resourceToDataURL","filterPreferredFontFormat","str","preferredFontFormat","match","src","format","shouldEmbed","embedResources","baseUrl","filteredCSSText","deferred","css"],"mappings":";;;;;;;;;AAGA,MAAMA,IAAY,8BACZC,IAAwB,+CACxBC,IAAiB;AACvB,SAASC,EAAQC,GAAK;AAElB,QAAMC,IAAUD,EAAI,QAAQ,4BAA4B,MAAM;AAC9D,SAAO,IAAI,OAAO,iBAAiBC,CAAO,eAAe,GAAG;AAChE;AACO,SAASC,EAAUC,GAAS;AAC/B,QAAMC,IAAO,CAAA;AACb,SAAAD,EAAQ,QAAQP,GAAW,CAACS,GAAKC,GAAWN,OACxCI,EAAK,KAAKJ,CAAG,GACNK,EACV,GACMD,EAAK,OAAO,CAACJ,MAAQ,CAACO,EAAUP,CAAG,CAAC;AAC/C;AACO,eAAeQ,EAAML,GAASM,GAAaC,GAASC,GAASC,GAAmB;AACnF,MAAI;AACA,UAAMC,IAAcH,IAAUI,EAAWL,GAAaC,CAAO,IAAID,GAC3DM,IAAcC,EAAYP,CAAW;AAC3C,QAAIQ;AACJ,WAAIL,MAKAK,IAAU,MAAMC,EAAkBL,GAAaE,GAAaJ,CAAO,IAEhER,EAAQ,QAAQJ,EAAQU,CAAW,GAAG,KAAKQ,CAAO,IAAI;AAAA,EAChE,QACa;AAAA,EAEb;AACD,SAAOd;AACX;AACA,SAASgB,EAA0BC,GAAK,EAAE,qBAAAC,KAAuB;AAC7D,SAAQA,IAEFD,EAAI,QAAQtB,GAAgB,CAACwB,MAAU;AAErC,eAAa;AACT,YAAM,CAACC,GAAG,EAAIC,CAAM,IAAI3B,EAAsB,KAAKyB,CAAK,KAAK;AAC7D,UAAI,CAACE;AACD,eAAO;AAEX,UAAIA,MAAWH;AACX,eAAO,QAAQE,CAAG;AAAA,IAEzB;AAAA,EACb,CAAS,IAZCH;AAaV;AACO,SAASK,EAAYzB,GAAK;AAC7B,SAAOA,EAAI,OAAOJ,CAAS,MAAM;AACrC;AACO,eAAe8B,EAAevB,GAASwB,GAAShB,GAAS;AAC5D,MAAI,CAACc,EAAYtB,CAAO;AACpB,WAAOA;AAEX,QAAMyB,IAAkBT,EAA0BhB,GAASQ,CAAO;AAElE,SADaT,EAAU0B,CAAe,EAC1B,OAAO,CAACC,GAAU7B,MAAQ6B,EAAS,KAAK,CAACC,MAAQtB,EAAMsB,GAAK9B,GAAK2B,GAAShB,CAAO,CAAC,GAAG,QAAQ,QAAQiB,CAAe,CAAC;AACrI;","x_google_ignoreList":[0]}