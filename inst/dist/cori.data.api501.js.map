{"version":3,"file":"cori.data.api501.js","sources":["../../node_modules/apache-arrow/data.mjs"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from './vector.mjs';\nimport { BufferType, Type, UnionMode } from './enum.mjs';\nimport { DataType, strideForType } from './type.mjs';\nimport { popcnt_bit_range, truncateBitmap } from './util/bit.mjs';\n/** @ignore */ export const kUnknownNullCount = -1;\n/**\n * Data structure underlying {@link Vector}s. Use the convenience method {@link makeData}.\n */\nexport class Data {\n    get typeId() { return this.type.typeId; }\n    get ArrayType() { return this.type.ArrayType; }\n    get buffers() {\n        return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds];\n    }\n    get nullable() {\n        if (this._nullCount !== 0) {\n            const { type } = this;\n            if (DataType.isSparseUnion(type)) {\n                return this.children.some((child) => child.nullable);\n            }\n            else if (DataType.isDenseUnion(type)) {\n                return this.children.some((child) => child.nullable);\n            }\n            return this.nullBitmap && this.nullBitmap.byteLength > 0;\n        }\n        return true;\n    }\n    get byteLength() {\n        let byteLength = 0;\n        const { valueOffsets, values, nullBitmap, typeIds } = this;\n        valueOffsets && (byteLength += valueOffsets.byteLength);\n        values && (byteLength += values.byteLength);\n        nullBitmap && (byteLength += nullBitmap.byteLength);\n        typeIds && (byteLength += typeIds.byteLength);\n        return this.children.reduce((byteLength, child) => byteLength + child.byteLength, byteLength);\n    }\n    get nullCount() {\n        if (DataType.isUnion(this.type)) {\n            return this.children.reduce((nullCount, child) => nullCount + child.nullCount, 0);\n        }\n        let nullCount = this._nullCount;\n        let nullBitmap;\n        if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n    constructor(type, offset, length, nullCount, buffers, children = [], dictionary) {\n        this.type = type;\n        this.children = children;\n        this.dictionary = dictionary;\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        let buffer;\n        if (buffers instanceof Data) {\n            this.stride = buffers.stride;\n            this.values = buffers.values;\n            this.typeIds = buffers.typeIds;\n            this.nullBitmap = buffers.nullBitmap;\n            this.valueOffsets = buffers.valueOffsets;\n        }\n        else {\n            this.stride = strideForType(type);\n            if (buffers) {\n                (buffer = buffers[0]) && (this.valueOffsets = buffer);\n                (buffer = buffers[1]) && (this.values = buffer);\n                (buffer = buffers[2]) && (this.nullBitmap = buffer);\n                (buffer = buffers[3]) && (this.typeIds = buffer);\n            }\n        }\n    }\n    getValid(index) {\n        const { type } = this;\n        if (DataType.isUnion(type)) {\n            const union = type;\n            const child = this.children[union.typeIdToChildIndex[this.typeIds[index]]];\n            const indexInChild = union.mode === UnionMode.Dense ? this.valueOffsets[index] : index;\n            return child.getValid(indexInChild);\n        }\n        if (this.nullable && this.nullCount > 0) {\n            const pos = this.offset + index;\n            const val = this.nullBitmap[pos >> 3];\n            return (val & (1 << (pos % 8))) !== 0;\n        }\n        return true;\n    }\n    setValid(index, value) {\n        let prev;\n        const { type } = this;\n        if (DataType.isUnion(type)) {\n            const union = type;\n            const child = this.children[union.typeIdToChildIndex[this.typeIds[index]]];\n            const indexInChild = union.mode === UnionMode.Dense ? this.valueOffsets[index] : index;\n            prev = child.getValid(indexInChild);\n            child.setValid(indexInChild, value);\n        }\n        else {\n            let { nullBitmap } = this;\n            const { offset, length } = this;\n            const idx = offset + index;\n            const mask = 1 << (idx % 8);\n            const byteOffset = idx >> 3;\n            // If no null bitmap, initialize one on the fly\n            if (!nullBitmap || nullBitmap.byteLength <= byteOffset) {\n                nullBitmap = new Uint8Array((((offset + length) + 63) & ~63) >> 3).fill(255);\n                // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n                if (this.nullCount > 0) {\n                    nullBitmap.set(truncateBitmap(offset, length, this.nullBitmap), 0);\n                }\n                Object.assign(this, { nullBitmap, _nullCount: -1 });\n            }\n            const byte = nullBitmap[byteOffset];\n            prev = (byte & mask) !== 0;\n            value ?\n                (nullBitmap[byteOffset] = byte | mask) :\n                (nullBitmap[byteOffset] = byte & ~mask);\n        }\n        if (prev !== !!value) {\n            // Update `_nullCount` if the new value is different from the old value.\n            this._nullCount = this.nullCount + (value ? -1 : 1);\n        }\n        return value;\n    }\n    clone(type = this.type, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers = this, children = this.children) {\n        return new Data(type, offset, length, nullCount, buffers, children, this.dictionary);\n    }\n    slice(offset, length) {\n        const { stride, typeId, children } = this;\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\n        const buffers = this._sliceBuffers(offset, length, stride, typeId);\n        return this.clone(this.type, this.offset + offset, length, nullCount, buffers, \n        // Don't slice children if we have value offsets (the variable-width types)\n        (children.length === 0 || this.valueOffsets) ? children : this._sliceChildren(children, childStride * offset, childStride * length));\n    }\n    _changeLengthAndBackfillNullBitmap(newLength) {\n        if (this.typeId === Type.Null) {\n            return this.clone(this.type, 0, newLength, 0);\n        }\n        const { length, nullCount } = this;\n        // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n        const bitmap = new Uint8Array(((newLength + 63) & ~63) >> 3).fill(255, 0, length >> 3);\n        // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n        bitmap[length >> 3] = (1 << (length - (length & ~7))) - 1;\n        // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n        if (nullCount > 0) {\n            bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\n        }\n        const buffers = this.buffers;\n        buffers[BufferType.VALIDITY] = bitmap;\n        return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n    }\n    _sliceBuffers(offset, length, stride, typeId) {\n        let arr;\n        const { buffers } = this;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\n            // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n            (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n        return buffers;\n    }\n    _sliceChildren(children, offset, length) {\n        return children.map((child) => child.slice(offset, length));\n    }\n}\nData.prototype.children = Object.freeze([]);\nimport { Visitor } from './visitor.mjs';\nimport { toArrayBufferView, toBigInt64Array, toInt32Array, toUint8Array } from './util/buffer.mjs';\nclass MakeDataVisitor extends Visitor {\n    visit(props) {\n        return this.getVisitFn(props['type']).call(this, props);\n    }\n    visitNull(props) {\n        const { ['type']: type, ['offset']: offset = 0, ['length']: length = 0, } = props;\n        return new Data(type, offset, length, length);\n    }\n    visitBool(props) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length >> 3, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    visitInt(props) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    visitFloat(props) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    visitUtf8(props) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const data = toUint8Array(props['data']);\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const valueOffsets = toInt32Array(props['valueOffsets']);\n        const { ['length']: length = valueOffsets.length - 1, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0 } = props;\n        return new Data(type, offset, length, nullCount, [valueOffsets, data, nullBitmap]);\n    }\n    visitLargeUtf8(props) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const data = toUint8Array(props['data']);\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const valueOffsets = toBigInt64Array(props['valueOffsets']);\n        const { ['length']: length = valueOffsets.length - 1, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0 } = props;\n        return new Data(type, offset, length, nullCount, [valueOffsets, data, nullBitmap]);\n    }\n    visitBinary(props) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const data = toUint8Array(props['data']);\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const valueOffsets = toInt32Array(props['valueOffsets']);\n        const { ['length']: length = valueOffsets.length - 1, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0 } = props;\n        return new Data(type, offset, length, nullCount, [valueOffsets, data, nullBitmap]);\n    }\n    visitLargeBinary(props) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const data = toUint8Array(props['data']);\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const valueOffsets = toBigInt64Array(props['valueOffsets']);\n        const { ['length']: length = valueOffsets.length - 1, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0 } = props;\n        return new Data(type, offset, length, nullCount, [valueOffsets, data, nullBitmap]);\n    }\n    visitFixedSizeBinary(props) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    visitDate(props) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    visitTimestamp(props) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    visitTime(props) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    visitDecimal(props) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    visitList(props) {\n        const { ['type']: type, ['offset']: offset = 0, ['child']: child } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const valueOffsets = toInt32Array(props['valueOffsets']);\n        const { ['length']: length = valueOffsets.length - 1, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0 } = props;\n        return new Data(type, offset, length, nullCount, [valueOffsets, undefined, nullBitmap], [child]);\n    }\n    visitStruct(props) {\n        const { ['type']: type, ['offset']: offset = 0, ['children']: children = [] } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const { length = children.reduce((len, { length }) => Math.max(len, length), 0), nullCount = props['nullBitmap'] ? -1 : 0 } = props;\n        return new Data(type, offset, length, nullCount, [undefined, undefined, nullBitmap], children);\n    }\n    visitUnion(props) {\n        const { ['type']: type, ['offset']: offset = 0, ['children']: children = [] } = props;\n        const typeIds = toArrayBufferView(type.ArrayType, props['typeIds']);\n        const { ['length']: length = typeIds.length, ['nullCount']: nullCount = -1, } = props;\n        if (DataType.isSparseUnion(type)) {\n            return new Data(type, offset, length, nullCount, [undefined, undefined, undefined, typeIds], children);\n        }\n        const valueOffsets = toInt32Array(props['valueOffsets']);\n        return new Data(type, offset, length, nullCount, [valueOffsets, undefined, undefined, typeIds], children);\n    }\n    visitDictionary(props) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.indices.ArrayType, props['data']);\n        const { ['dictionary']: dictionary = new Vector([new MakeDataVisitor().visit({ type: type.dictionary })]) } = props;\n        const { ['length']: length = data.length, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0 } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap], [], dictionary);\n    }\n    visitInterval(props) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    visitDuration(props) {\n        const { ['type']: type, ['offset']: offset = 0 } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const data = toArrayBufferView(type.ArrayType, props['data']);\n        const { ['length']: length = data.length, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [undefined, data, nullBitmap]);\n    }\n    visitFixedSizeList(props) {\n        const { ['type']: type, ['offset']: offset = 0, ['child']: child = new MakeDataVisitor().visit({ type: type.valueType }) } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const { ['length']: length = child.length / strideForType(type), ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0 } = props;\n        return new Data(type, offset, length, nullCount, [undefined, undefined, nullBitmap], [child]);\n    }\n    visitMap(props) {\n        const { ['type']: type, ['offset']: offset = 0, ['child']: child = new MakeDataVisitor().visit({ type: type.childType }) } = props;\n        const nullBitmap = toUint8Array(props['nullBitmap']);\n        const valueOffsets = toInt32Array(props['valueOffsets']);\n        const { ['length']: length = valueOffsets.length - 1, ['nullCount']: nullCount = props['nullBitmap'] ? -1 : 0, } = props;\n        return new Data(type, offset, length, nullCount, [valueOffsets, undefined, nullBitmap], [child]);\n    }\n}\nconst makeDataVisitor = new MakeDataVisitor();\nexport function makeData(props) {\n    return makeDataVisitor.visit(props);\n}\n\n//# sourceMappingURL=data.mjs.map\n"],"names":["kUnknownNullCount","Data","type","DataType","child","byteLength","valueOffsets","values","nullBitmap","typeIds","nullCount","popcnt_bit_range","offset","length","buffers","children","dictionary","buffer","strideForType","index","union","indexInChild","UnionMode","pos","value","prev","idx","mask","byteOffset","truncateBitmap","byte","stride","typeId","childStride","newLength","Type","bitmap","BufferType","arr","MakeDataVisitor","Visitor","props","toUint8Array","data","toArrayBufferView","toInt32Array","toBigInt64Array","len","Vector","makeDataVisitor","makeData"],"mappings":"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","x_google_ignoreList":[0]}