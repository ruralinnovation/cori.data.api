{"version":3,"file":"cori.data.api662.js","sources":["../../node_modules/micromark-core-commonmark/lib/code-indented.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}"],"names":["codeIndented","tokenizeCodeIndented","furtherStart","tokenizeFurtherStart","effects","ok","nok","self","start","code","factorySpace","afterPrefix","tail","atBreak","after","markdownLineEnding","inside"],"mappings":";;;;;;;;AAUY,MAACA,IAAe;AAAA,EAC1B,MAAM;AAAA,EACN,UAAUC;AACZ,GAGMC,IAAe;AAAA,EACnB,UAAUC;AAAA,EACV,SAAS;AACX;AAMA,SAASF,EAAqBG,GAASC,GAAIC,GAAK;AAC9C,QAAMC,IAAO;AACb,SAAOC;AAgBP,WAASA,EAAMC,GAAM;AAGnB,WAAAL,EAAQ,MAAM,cAAc,GAGrBM,EAAaN,GAASO,GAAa,cAAc,CAAK,EAAEF,CAAI;AAAA,EACpE;AAYD,WAASE,EAAYF,GAAM;AACzB,UAAMG,IAAOL,EAAK,OAAOA,EAAK,OAAO,SAAS,CAAC;AAC/C,WAAOK,KAAQA,EAAK,CAAC,EAAE,SAAS,gBAAgBA,EAAK,CAAC,EAAE,eAAeA,EAAK,CAAC,GAAG,EAAI,EAAE,UAAU,IAAIC,EAAQJ,CAAI,IAAIH,EAAIG,CAAI;AAAA,EAC7H;AAYD,WAASI,EAAQJ,GAAM;AACrB,WAAIA,MAAS,OACJK,EAAML,CAAI,IAEfM,EAAmBN,CAAI,IAClBL,EAAQ,QAAQF,GAAcW,GAASC,CAAK,EAAEL,CAAI,KAE3DL,EAAQ,MAAM,eAAe,GACtBY,EAAOP,CAAI;AAAA,EACnB;AAYD,WAASO,EAAOP,GAAM;AACpB,WAAIA,MAAS,QAAQM,EAAmBN,CAAI,KAC1CL,EAAQ,KAAK,eAAe,GACrBS,EAAQJ,CAAI,MAErBL,EAAQ,QAAQK,CAAI,GACbO;AAAA,EACR;AAGD,WAASF,EAAML,GAAM;AACnB,WAAAL,EAAQ,KAAK,cAAc,GAIpBC,EAAGI,CAAI;AAAA,EACf;AACH;AAMA,SAASN,EAAqBC,GAASC,GAAIC,GAAK;AAC9C,QAAMC,IAAO;AACb,SAAOL;AAaP,WAASA,EAAaO,GAAM;AAG1B,WAAIF,EAAK,OAAO,KAAKA,EAAK,IAAG,EAAG,IAAI,IAC3BD,EAAIG,CAAI,IAEbM,EAAmBN,CAAI,KACzBL,EAAQ,MAAM,YAAY,GAC1BA,EAAQ,QAAQK,CAAI,GACpBL,EAAQ,KAAK,YAAY,GAClBF,KASFQ,EAAaN,GAASO,GAAa,cAAc,CAAK,EAAEF,CAAI;AAAA,EACpE;AAYD,WAASE,EAAYF,GAAM;AACzB,UAAMG,IAAOL,EAAK,OAAOA,EAAK,OAAO,SAAS,CAAC;AAC/C,WAAOK,KAAQA,EAAK,CAAC,EAAE,SAAS,gBAAgBA,EAAK,CAAC,EAAE,eAAeA,EAAK,CAAC,GAAG,EAAI,EAAE,UAAU,IAAIP,EAAGI,CAAI,IAAIM,EAAmBN,CAAI,IAAIP,EAAaO,CAAI,IAAIH,EAAIG,CAAI;AAAA,EACxK;AACH;","x_google_ignoreList":[0]}