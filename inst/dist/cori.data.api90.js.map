{"version":3,"file":"cori.data.api90.js","sources":["../../node_modules/d3-format/src/locale.js"],"sourcesContent":["import exponent from \"./exponent.js\";\nimport formatGroup from \"./formatGroup.js\";\nimport formatNumerals from \"./formatNumerals.js\";\nimport formatSpecifier from \"./formatSpecifier.js\";\nimport formatTrim from \"./formatTrim.js\";\nimport formatTypes from \"./formatTypes.js\";\nimport {prefixExponent} from \"./formatPrefixAuto.js\";\nimport identity from \"./identity.js\";\n\nvar map = Array.prototype.map,\n    prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"µ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nexport default function(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + \"\"),\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n      minus = locale.minus === undefined ? \"−\" : locale.minus + \"\",\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision === undefined ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n        var valueNegative = value < 0 || 1 / value < 0;\n\n        // Perform the initial formatting.\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n        if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : minus) : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n"],"names":["map","prefixes","formatLocale","locale","group","identity","formatGroup","currencyPrefix","currencySuffix","decimal","numerals","formatNumerals","percent","minus","nan","newFormat","specifier","formatSpecifier","fill","align","sign","symbol","zero","width","comma","precision","trim","type","formatTypes","prefix","suffix","formatType","maybeSuffix","format","value","valuePrefix","valueSuffix","i","n","c","valueNegative","formatTrim","prefixExponent","length","padding","formatPrefix","f","e","exponent","k"],"mappings":";;;;;;;;;;;;;;AASA,IAAIA,IAAM,MAAM,UAAU,KACtBC,IAAW,CAAC,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,IAAG,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,KAAI,GAAG;AAEnE,SAAQC,GAACC,GAAQ;AAC9B,MAAIC,IAAQD,EAAO,aAAa,UAAaA,EAAO,cAAc,SAAYE,IAAWC,EAAYN,EAAI,KAAKG,EAAO,UAAU,MAAM,GAAGA,EAAO,YAAY,EAAE,GACzJI,IAAiBJ,EAAO,aAAa,SAAY,KAAKA,EAAO,SAAS,CAAC,IAAI,IAC3EK,IAAiBL,EAAO,aAAa,SAAY,KAAKA,EAAO,SAAS,CAAC,IAAI,IAC3EM,IAAUN,EAAO,YAAY,SAAY,MAAMA,EAAO,UAAU,IAChEO,IAAWP,EAAO,aAAa,SAAYE,IAAWM,EAAeX,EAAI,KAAKG,EAAO,UAAU,MAAM,CAAC,GACtGS,IAAUT,EAAO,YAAY,SAAY,MAAMA,EAAO,UAAU,IAChEU,IAAQV,EAAO,UAAU,SAAY,MAAMA,EAAO,QAAQ,IAC1DW,IAAMX,EAAO,QAAQ,SAAY,QAAQA,EAAO,MAAM;AAE1D,WAASY,EAAUC,GAAW;AAC5B,IAAAA,IAAYC,EAAgBD,CAAS;AAErC,QAAIE,IAAOF,EAAU,MACjBG,IAAQH,EAAU,OAClBI,IAAOJ,EAAU,MACjBK,IAASL,EAAU,QACnBM,IAAON,EAAU,MACjBO,IAAQP,EAAU,OAClBQ,IAAQR,EAAU,OAClBS,IAAYT,EAAU,WACtBU,IAAOV,EAAU,MACjBW,IAAOX,EAAU;AAGrB,IAAIW,MAAS,OAAKH,IAAQ,IAAMG,IAAO,OAG7BC,EAAYD,CAAI,MAAGF,MAAc,WAAcA,IAAY,KAAKC,IAAO,IAAMC,IAAO,OAG1FL,KAASJ,MAAS,OAAOC,MAAU,SAAMG,IAAO,IAAMJ,IAAO,KAAKC,IAAQ;AAI9E,QAAIU,IAASR,MAAW,MAAMd,IAAiBc,MAAW,OAAO,SAAS,KAAKM,CAAI,IAAI,MAAMA,EAAK,YAAa,IAAG,IAC9GG,IAAST,MAAW,MAAMb,IAAiB,OAAO,KAAKmB,CAAI,IAAIf,IAAU,IAKzEmB,IAAaH,EAAYD,CAAI,GAC7BK,IAAc,aAAa,KAAKL,CAAI;AAMxC,IAAAF,IAAYA,MAAc,SAAY,IAChC,SAAS,KAAKE,CAAI,IAAI,KAAK,IAAI,GAAG,KAAK,IAAI,IAAIF,CAAS,CAAC,IACzD,KAAK,IAAI,GAAG,KAAK,IAAI,IAAIA,CAAS,CAAC;AAEzC,aAASQ,EAAOC,GAAO;AACrB,UAAIC,IAAcN,GACdO,IAAcN,GACdO,GAAGC,GAAGC;AAEV,UAAIZ,MAAS;AACX,QAAAS,IAAcL,EAAWG,CAAK,IAAIE,GAClCF,IAAQ;AAAA,WACH;AACL,QAAAA,IAAQ,CAACA;AAGT,YAAIM,IAAgBN,IAAQ,KAAK,IAAIA,IAAQ;AAiB7C,YAdAA,IAAQ,MAAMA,CAAK,IAAIpB,IAAMiB,EAAW,KAAK,IAAIG,CAAK,GAAGT,CAAS,GAG9DC,MAAMQ,IAAQO,EAAWP,CAAK,IAG9BM,KAAiB,CAACN,KAAU,KAAKd,MAAS,QAAKoB,IAAgB,KAGnEL,KAAeK,IAAiBpB,MAAS,MAAMA,IAAOP,IAASO,MAAS,OAAOA,MAAS,MAAM,KAAKA,KAAQe,GAC3GC,KAAeT,MAAS,MAAM1B,EAAS,IAAIyC,IAAiB,CAAC,IAAI,MAAMN,KAAeI,KAAiBpB,MAAS,MAAM,MAAM,KAIxHY;AAEF,eADAK,IAAI,IAAIC,IAAIJ,EAAM,QACX,EAAEG,IAAIC;AACX,gBAAIC,IAAIL,EAAM,WAAWG,CAAC,GAAG,KAAKE,KAAKA,IAAI,IAAI;AAC7C,cAAAH,KAAeG,MAAM,KAAK9B,IAAUyB,EAAM,MAAMG,IAAI,CAAC,IAAIH,EAAM,MAAMG,CAAC,KAAKD,GAC3EF,IAAQA,EAAM,MAAM,GAAGG,CAAC;AACxB;AAAA,YACD;AAAA;AAAA,MAGN;AAGD,MAAIb,KAAS,CAACF,MAAMY,IAAQ9B,EAAM8B,GAAO,KAAQ;AAGjD,UAAIS,IAASR,EAAY,SAASD,EAAM,SAASE,EAAY,QACzDQ,IAAUD,IAASpB,IAAQ,IAAI,MAAMA,IAAQoB,IAAS,CAAC,EAAE,KAAKzB,CAAI,IAAI;AAM1E,cAHIM,KAASF,MAAMY,IAAQ9B,EAAMwC,IAAUV,GAAOU,EAAQ,SAASrB,IAAQa,EAAY,SAAS,KAAQ,GAAGQ,IAAU,KAG7GzB,GAAK;AAAA,QACX,KAAK;AAAK,UAAAe,IAAQC,IAAcD,IAAQE,IAAcQ;AAAS;AAAA,QAC/D,KAAK;AAAK,UAAAV,IAAQC,IAAcS,IAAUV,IAAQE;AAAa;AAAA,QAC/D,KAAK;AAAK,UAAAF,IAAQU,EAAQ,MAAM,GAAGD,IAASC,EAAQ,UAAU,CAAC,IAAIT,IAAcD,IAAQE,IAAcQ,EAAQ,MAAMD,CAAM;AAAG;AAAA,QAC9H;AAAS,UAAAT,IAAQU,IAAUT,IAAcD,IAAQE;AAAa;AAAA,MAC/D;AAED,aAAO1B,EAASwB,CAAK;AAAA,IACtB;AAED,WAAAD,EAAO,WAAW,WAAW;AAC3B,aAAOjB,IAAY;AAAA,IACzB,GAEWiB;AAAA,EACR;AAED,WAASY,EAAa7B,GAAWkB,GAAO;AACtC,QAAIY,IAAI/B,GAAWC,IAAYC,EAAgBD,CAAS,GAAGA,EAAU,OAAO,KAAKA,EAAW,GACxF+B,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI,GAAG,KAAK,MAAMC,EAASd,CAAK,IAAI,CAAC,CAAC,CAAC,IAAI,GACjEe,IAAI,KAAK,IAAI,IAAI,CAACF,CAAC,GACnBlB,IAAS5B,EAAS,IAAI8C,IAAI,CAAC;AAC/B,WAAO,SAASb,GAAO;AACrB,aAAOY,EAAEG,IAAIf,CAAK,IAAIL;AAAA,IAC5B;AAAA,EACG;AAED,SAAO;AAAA,IACL,QAAQd;AAAA,IACR,cAAc8B;AAAA,EAClB;AACA;","x_google_ignoreList":[0]}