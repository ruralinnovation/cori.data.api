{"version":3,"file":"aggregate-functions.js","sources":["../../../../../../node_modules/arquero/src/op/aggregate-functions.js"],"sourcesContent":["import bins from '../util/bins';\nimport distinctMap from '../util/distinct-map';\nimport isBigInt from '../util/is-bigint';\nimport noop from '../util/no-op';\nimport NULL from '../util/null';\nimport product from '../util/product';\n\n/**\n * Initialize an aggregate operator.\n */\nfunction initOp(op) {\n  op.init = op.init || noop;\n  op.add = op.add || noop;\n  op.rem = op.rem || noop;\n  return op;\n}\n\nfunction initProduct(s, value) {\n  s.product_v = false;\n  return s.product = value;\n}\n\n/**\n * Initialize an aggregate operator.\n * @callback AggregateInit\n * @param {object} state The aggregate state object.\n * @return {void}\n */\n\n/**\n * Add a value to an aggregate operator.\n * @callback AggregateAdd\n * @param {object} state The aggregate state object.\n * @param {*} value The value to add.\n * @return {void}\n */\n\n/**\n * Remove a value from an aggregate operator.\n * @callback AggregateRem\n * @param {object} state The aggregate state object.\n * @param {*} value The value to remove.\n * @return {void}\n */\n\n/**\n * Retrive an output value from an aggregate operator.\n * @callback AggregateValue\n * @param {object} state The aggregate state object.\n * @return {*} The output value.\n */\n\n/**\n * An operator instance for an aggregate function.\n * @typedef {object} AggregateOperator\n * @property {AggregateInit} init Initialize the operator.\n * @property {AggregateAdd} add Add a value to the operator state.\n * @property {AggregateRem} rem Remove a value from the operator state.\n * @property {AggregateValue} value Retrieve an output value.\n */\n\n/**\n * Create a new aggregate operator instance.\n * @callback AggregateCreate\n * @param {...any} params The aggregate operator parameters.\n * @return {AggregateOperator} The instantiated aggregate operator.\n */\n\n/**\n * An operator definition for an aggregate function.\n * @typedef {object} AggregateDef\n * @property {AggregateCreate} create Create a new operator instance.\n * @property {number[]} param Two-element array containing the\n *  counts of input fields and additional parameters.\n * @property {string[]} [req] Names of operators required by this one.\n * @property {string[]} [stream] Names of operators required by this one\n *  for streaming operations (value removes).\n */\n\n/**\n * Aggregate operator definitions.\n */\nexport default {\n  /** @type {AggregateDef} */\n  count: {\n    create: () => initOp({\n      value: s => s.count\n    }),\n    param: []\n  },\n\n  /** @type {AggregateDef} */\n  array_agg: {\n    create: () => initOp({\n      init: s => s.values = true,\n      value: s => s.list.values(s.stream)\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  object_agg: {\n    create: () => initOp({\n      init:  s => s.values = true,\n      value: s => Object.fromEntries(s.list.values())\n    }),\n    param: [2]\n  },\n\n  /** @type {AggregateDef} */\n  map_agg: {\n    create: () => initOp({\n      init:  s => s.values = true,\n      value: s => new Map(s.list.values())\n    }),\n    param: [2]\n  },\n\n  /** @type {AggregateDef} */\n  entries_agg: {\n    create: () => initOp({\n      init:  s => s.values = true,\n      value: s => s.list.values(s.stream)\n    }),\n    param: [2]\n  },\n\n  /** @type {AggregateDef} */\n  any: {\n    create: () => initOp({\n      add: (s, v) => { if (s.any == null) s.any = v; },\n      value: s => s.valid ? s.any : NULL\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  valid: {\n    create: () => initOp({\n      value: s => s.valid\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  invalid: {\n    create: () => initOp({\n      value: s => s.count - s.valid\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  distinct: {\n    create: () => ({\n      init: s => s.distinct = distinctMap(),\n      value: s => s.distinct.count() + (s.valid === s.count ? 0 : 1),\n      add: (s, v) => s.distinct.increment(v),\n      rem: (s, v) => s.distinct.decrement(v)\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  array_agg_distinct: {\n    create: () => initOp({\n      value: s => s.distinct.values()\n    }),\n    param: [1],\n    req: ['distinct']\n  },\n\n  /** @type {AggregateDef} */\n  mode: {\n    create: () => initOp({\n      value: s => {\n        let mode = NULL;\n        let max = 0;\n        s.distinct.forEach((value, count) => {\n          if (count > max) {\n            max = count;\n            mode = value;\n          }\n        });\n        return mode;\n      }\n    }),\n    param: [1],\n    req: ['distinct']\n  },\n\n  /** @type {AggregateDef} */\n  sum: {\n    create: () => ({\n      init:  s => s.sum = 0,\n      value: s => s.valid ? s.sum : NULL,\n      add: (s, v) => isBigInt(v)\n        ? (s.sum === 0 ? s.sum = v : s.sum += v)\n        : s.sum += +v,\n      rem: (s, v) => s.sum -= v\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  product: {\n    create: () => ({\n      init:  s => initProduct(s, 1),\n      value: s => s.valid\n        ? (\n            s.product_v\n              ? initProduct(s, product(s.list.values()))\n              : s.product\n          )\n        : undefined,\n      add: (s, v) => isBigInt(v)\n        ? (s.product === 1 ? s.product = v : s.product *= v)\n        : s.product *= v,\n      rem: (s, v) => (v == 0 || v === Infinity || v === -Infinity)\n        ? s.product_v = true\n        : s.product /= v\n    }),\n    param: [1],\n    stream: ['array_agg']\n  },\n\n  /** @type {AggregateDef} */\n  mean: {\n    create: () => ({\n      init: s => s.mean = 0,\n      value: s => s.valid ? s.mean : NULL,\n      add: (s, v) => {\n        s.mean_d = v - s.mean;\n        s.mean += s.mean_d / s.valid;\n      },\n      rem: (s, v) => {\n        s.mean_d = v - s.mean;\n        s.mean -= s.valid ? s.mean_d / s.valid : s.mean;\n      }\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  average: {\n    create: () => initOp({\n      value: s => s.valid ? s.mean : NULL\n    }),\n    param: [1],\n    req: ['mean']\n  },\n\n  /** @type {AggregateDef} */\n  variance: {\n    create: () => ({\n      init:  s => s.dev = 0,\n      value: s => s.valid > 1 ? s.dev / (s.valid - 1) : NULL,\n      add: (s, v) => s.dev += s.mean_d * (v - s.mean),\n      rem: (s, v) => s.dev -= s.mean_d * (v - s.mean)\n    }),\n    param: [1],\n    req: ['mean']\n  },\n\n  /** @type {AggregateDef} */\n  variancep: {\n    create: () => initOp({\n      value: s => s.valid > 1 ? s.dev / s.valid : NULL\n    }),\n    param: [1],\n    req: ['variance']\n  },\n\n  /** @type {AggregateDef} */\n  stdev: {\n    create: () => initOp({\n      value: s => s.valid > 1 ? Math.sqrt(s.dev / (s.valid - 1)) : NULL\n    }),\n    param: [1],\n    req: ['variance']\n  },\n\n  /** @type {AggregateDef} */\n  stdevp: {\n    create: () => initOp({\n      value: s => s.valid > 1 ? Math.sqrt(s.dev / s.valid) : NULL\n    }),\n    param: [1],\n    req: ['variance']\n  },\n\n  /** @type {AggregateDef} */\n  min: {\n    create: () => ({\n      init:  s => s.min = NULL,\n      value: s => s.min = (Number.isNaN(s.min) ? s.list.min() : s.min),\n      add: (s, v) => { if (v < s.min || s.min === NULL) s.min = v; },\n      rem: (s, v) => { if (v <= s.min) s.min = NaN; }\n    }),\n    param: [1],\n    stream: ['array_agg']\n  },\n\n  /** @type {AggregateDef} */\n  max: {\n    create: () => ({\n      init:  s => s.max = NULL,\n      value: s => s.max = (Number.isNaN(s.max) ? s.list.max() : s.max),\n      add: (s, v) => { if (v > s.max || s.max === NULL) s.max = v; },\n      rem: (s, v) => { if (v >= s.max) s.max = NaN; }\n    }),\n    param: [1],\n    stream: ['array_agg']\n  },\n\n  /** @type {AggregateDef} */\n  quantile: {\n    create: (p) => initOp({\n      value: s => s.list.quantile(p)\n    }),\n    param: [1, 1],\n    req: ['array_agg']\n  },\n\n  /** @type {AggregateDef} */\n  median: {\n    create: () => initOp({\n      value: s => s.list.quantile(0.5)\n    }),\n    param: [1],\n    req: ['array_agg']\n  },\n\n  /** @type {AggregateDef} */\n  covariance: {\n    create: () => ({\n      init:  s => {\n        s.cov = s.mean_x = s.mean_y = s.dev_x = s.dev_y = 0;\n      },\n      value: s => s.valid > 1 ? s.cov / (s.valid - 1) : NULL,\n      add: (s, x, y) => {\n        const dx = x - s.mean_x;\n        const dy = y - s.mean_y;\n        s.mean_x += dx / s.valid;\n        s.mean_y += dy / s.valid;\n        const dy2 = y - s.mean_y;\n        s.dev_x += dx * (x - s.mean_x);\n        s.dev_y += dy * dy2;\n        s.cov += dx * dy2;\n      },\n      rem: (s, x, y) => {\n        const dx = x - s.mean_x;\n        const dy = y - s.mean_y;\n        s.mean_x -= s.valid ? dx / s.valid : s.mean_x;\n        s.mean_y -= s.valid ? dy / s.valid : s.mean_y;\n        const dy2 = y - s.mean_y;\n        s.dev_x -= dx * (x - s.mean_x);\n        s.dev_y -= dy * dy2;\n        s.cov -= dx * dy2;\n      }\n    }),\n    param: [2]\n  },\n\n  /** @type {AggregateDef} */\n  covariancep: {\n    create: () => initOp({\n      value: s => s.valid > 1 ? s.cov / s.valid : NULL\n    }),\n    param: [2],\n    req: ['covariance']\n  },\n\n  /** @type {AggregateDef} */\n  corr: {\n    create: () => initOp({\n      value: s => s.valid > 1\n        ? s.cov / (Math.sqrt(s.dev_x) * Math.sqrt(s.dev_y))\n        : NULL\n    }),\n    param: [2],\n    req: ['covariance']\n  },\n\n  /** @type {AggregateDef} */\n  bins: {\n    create: (maxbins, nice, minstep, step) => initOp({\n      value: s => bins(s.min, s.max, maxbins, nice, minstep, step)\n    }),\n    param: [1, 4],\n    req: ['min', 'max']\n  }\n};"],"names":[],"mappings":"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","x_google_ignoreList":[0]}