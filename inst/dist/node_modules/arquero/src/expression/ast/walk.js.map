{"version":3,"file":"walk.js","sources":["../../../../../../../node_modules/arquero/src/expression/ast/walk.js"],"sourcesContent":["export default function walk(node, ctx, visitors, parent) {\n  const visit = visitors[node.type] || visitors['Default'];\n  if (visit && visit(node, ctx, parent) === false) return;\n\n  const walker = walkers[node.type];\n  if (walker) walker(node, ctx, visitors);\n}\n\nconst unary = (node, ctx, visitors) => {\n  walk(node.argument, ctx, visitors, node);\n};\n\nconst binary = (node, ctx, visitors) => {\n  walk(node.left, ctx, visitors, node);\n  walk(node.right, ctx, visitors, node);\n};\n\nconst ternary = (node, ctx, visitors) => {\n  walk(node.test, ctx, visitors, node);\n  walk(node.consequent, ctx, visitors, node);\n  if (node.alternate) walk(node.alternate, ctx, visitors, node);\n};\n\nconst func = (node, ctx, visitors) => {\n  list(node.params, ctx, visitors, node);\n  walk(node.body, ctx, visitors, node);\n};\n\nconst call = (node, ctx, visitors) => {\n  walk(node.callee, ctx, visitors, node);\n  list(node.arguments, ctx, visitors, node);\n};\n\nconst list = (nodes, ctx, visitors, node) => {\n  nodes.forEach(item => walk(item, ctx, visitors, node));\n};\n\nconst walkers = {\n  TemplateLiteral: (node, ctx, visitors) => {\n    list(node.expressions, ctx, visitors, node);\n    list(node.quasis, ctx, visitors, node);\n  },\n  MemberExpression: (node, ctx, visitors) => {\n    walk(node.object, ctx, visitors, node);\n    walk(node.property, ctx, visitors, node);\n  },\n  CallExpression: call,\n  NewExpression: call,\n  ArrayExpression: (node, ctx, visitors) => {\n    list(node.elements, ctx, visitors, node);\n  },\n  AssignmentExpression: binary,\n  AwaitExpression: unary,\n  BinaryExpression: binary,\n  LogicalExpression: binary,\n  UnaryExpression: unary,\n  UpdateExpression: unary,\n  ConditionalExpression: ternary,\n  ObjectExpression: (node, ctx, visitors) => {\n    list(node.properties, ctx, visitors, node);\n  },\n  Property: (node, ctx, visitors) => {\n    walk(node.key, ctx, visitors, node);\n    walk(node.value, ctx, visitors, node);\n  },\n\n  ArrowFunctionExpression: func,\n  FunctionExpression: func,\n  FunctionDeclaration: func,\n\n  VariableDeclaration: (node, ctx, visitors) => {\n    list(node.declarations, ctx, visitors, node);\n  },\n  VariableDeclarator: (node, ctx, visitors) => {\n    walk(node.id, ctx, visitors, node);\n    walk(node.init, ctx, visitors, node);\n  },\n  SpreadElement: (node, ctx, visitors) => {\n    walk(node.argument, ctx, visitors, node);\n  },\n\n  BlockStatement: (node, ctx, visitors) => {\n    list(node.body, ctx, visitors, node);\n  },\n  ExpressionStatement: (node, ctx, visitors) => {\n    walk(node.expression, ctx, visitors, node);\n  },\n  IfStatement: ternary,\n  ForStatement: (node, ctx, visitors) => {\n    walk(node.init, ctx, visitors, node);\n    walk(node.test, ctx, visitors, node);\n    walk(node.update, ctx, visitors, node);\n    walk(node.body, ctx, visitors, node);\n  },\n  WhileStatement: (node, ctx, visitors) => {\n    walk(node.test, ctx, visitors, node);\n    walk(node.body, ctx, visitors, node);\n  },\n  DoWhileStatement: (node, ctx, visitors) => {\n    walk(node.body, ctx, visitors, node);\n    walk(node.test, ctx, visitors, node);\n  },\n  SwitchStatement: (node, ctx, visitors) => {\n    walk(node.discriminant, ctx, visitors, node);\n    list(node.cases, ctx, visitors, node);\n  },\n  SwitchCase: (node, ctx, visitors) => {\n    if (node.test) walk(node.test, ctx, visitors, node);\n    list(node.consequent, ctx, visitors, node);\n  },\n  ReturnStatement: unary,\n\n  Program: (node, ctx, visitors) => {\n    walk(node.body[0], ctx, visitors, node);\n  }\n};"],"names":[],"mappings":"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","x_google_ignoreList":[0]}