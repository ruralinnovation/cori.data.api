{"version":3,"file":"cori.data.api6.js","sources":["../../lib/@cori-risi/components/GroupedBarChart.tsx"],"sourcesContent":["import React, { useRef, useEffect, useCallback, useState } from 'react';\nimport * as d3 from 'd3';\nimport { ERCData, MetricMetadata } from '../interfaces';\nimport * as d3textwrap from \"d3-textwrap\";\n\nimport CategoricalLegend from './CategoricalLegend';\n\nimport styles from \"./styles/Chart.module.css\";\n\nimport { renderVariable, getMaxYLabelWidth, applyCORIStyles, saveChartAsPNG, getLabel } from '../utils';\nimport { chartStyle } from '../utils/constants';\n\ninterface GroupedBarChartProps {\n    primary_geoid: string,\n    metric: string,\n    data: ERCData[];\n    metadata: MetricMetadata,\n    width: number;\n}\n\nconst GroupedBarChart: React.FC<GroupedBarChartProps> = ({ primary_geoid, metric, data, metadata, width }) => {\n\n    const primary_dta = data.filter(d => d.geoid === primary_geoid && d.metric === metric);\n    const has_valid_data = !primary_dta.every(d => d.value === null);\n\n    const ref = useRef<HTMLDivElement>(null);\n    const svgRef = useRef<SVGSVGElement>(null);\n\n    const [colorScaleDomain, setColorScaleDomain] = useState<string[]>([]);\n    const [colorScaleRange, setColorScaleRange] = useState<unknown[]>([]);\n\n    const bar_thickness = 45;\n    const height = data.length * bar_thickness;\n\n    useEffect(() => {\n\n        if (!svgRef.current) return;\n\n        const margin = {...chartStyle.margin};\n        const tick_number = Math.floor(width / 225);\n\n        const group_var: \"variable\" | \"year\" | \"geoid\" = metadata.groupVar !== undefined?\n            metadata.groupVar as \"variable\" | \"year\" | \"geoid\":\n            \"year\";\n        const groups = [...new Set(data.map(d => d[group_var].toString()))];\n\n        // Ensure always order from older to newer\n        if (group_var === \"year\") {\n            groups.sort((a, b) => a.localeCompare(b));\n        }\n\n        const svg = d3.select(svgRef.current)\n            .attr(\"viewBox\", `0 0 ${width} ${height}`)\n            .attr(\"preserveAspectRatio\", \"xMidYMid meet\");\n\n        const xscale_ratio = width < 500? 1.3: 1.1;\n        const xScale = d3\n            .scaleLinear<number>()\n            .domain([0, d3.max(data, (d) => d.value === null? undefined: (+d.value * xscale_ratio))! ])\n            .nice()\n            .range([margin.left, width - margin.right]);\n\n        const yScale = d3\n            .scaleBand<string>()\n            .domain(data.map((d) => {\n\n                if (metadata.yVar === \"variable\") {\n                    const variable_str: string = renderVariable(d.variable);\n                    return variable_str;\n                }\n\n                const geoid_str: string = d.name; // renderGEOID(d.geoid);\n                return geoid_str;\n\n            }))\n            .range([margin.top, height - margin.bottom])\n            .padding(0.1);\n\n        const ySubgroups = d3\n            .scaleBand()\n            .domain(groups)\n            .range([0, yScale.bandwidth()])\n            .padding(0);\n\n        const colorScale = d3.scaleOrdinal<string>()\n            .domain(groups) // Input domain\n            .range([\"#A3E2B5\", \"#00835D\", \"#26535C\"]);\n\n        setColorScaleDomain(colorScale.domain());\n        setColorScaleRange(colorScale.range());\n\n        let xAxis = d3.axisBottom<number>(xScale)\n            .ticks(tick_number, metadata.xFormat)\n            .tickSize(chartStyle.xTickSize);\n\n        const yAxis = d3.axisLeft<string>(yScale)\n            .tickSize(chartStyle.yTickSize);\n\n        svg\n            .select<SVGGElement>('.x-axis')\n            .attr('transform', `translate(0, ${height - margin.bottom})`)\n            .call(xAxis);\n\n        svg.select<SVGGElement>('.y-axis')\n            .attr(\"transform\", `translate(${margin.left},0)`)\n            .call(yAxis)\n            .call(g => g.select(\".domain\").remove());\n\n        // style y-axis text before calculating widths\n        svg.selectAll(\".y-axis text\")\n            .style(\"font-family\", chartStyle.tickFontFamily)\n            .style(\"font-size\", chartStyle.tickFontSize)\n            .style(\"color\", chartStyle.tickFontColor);\n\n        const maxw = getMaxYLabelWidth(svg);\n        if (maxw > 200) {\n\n            margin.left = 200;\n\n            // wrap the text\n            const text_buffer = 2;\n            const y_wrap = d3textwrap.textwrap().bounds({height: yScale.bandwidth(), width: margin.left - chartStyle.yTickSize});\n            svg.selectAll(\".y-axis text\")\n                .call(y_wrap);\n            svg.selectAll(\"foreignObject\")\n                .style(\n                    \"transform\",\n                    'translate(-' + (margin.left - chartStyle.yTickSize - text_buffer) + 'px, -' + yScale.bandwidth()/2 + 'px)'\n                )\n                .select(\"div\")\n                .style(\"margin\", 0)\n                .style(\"display\", \"flex\")\n                .style(\"align-items\", \"center\")\n                .style(\"justify-content\", \"end\")\n                .style(\"height\", \"inherit\");\n\n            xScale.range([margin.left, width - margin.right]);\n            xAxis = d3\n                .axisBottom<number>(xScale)\n                .tickSize(chartStyle.xTickSize)\n                .ticks(tick_number, metadata.xFormat);\n\n            svg\n                .select<SVGGElement>('.x-axis')\n                .attr('transform', `translate(0, ${height - margin.bottom})`)\n                .call(xAxis);\n\n            svg.select<SVGGElement>('.y-axis')\n                .attr(\"transform\", `translate(${margin.left},0)`);\n\n        }\n        else {\n\n            margin.left = maxw;\n\n            xScale.range([margin.left, width - margin.right]);\n\n            xAxis = d3.axisBottom<number>(xScale)\n                .ticks(tick_number, metadata.xFormat)\n                .tickSize(chartStyle.xTickSize);\n\n            svg\n                .select<SVGGElement>('.x-axis')\n                .attr('transform', `translate(0, ${height - margin.bottom})`)\n                .call(xAxis);\n\n            svg.select<SVGGElement>('.y-axis')\n                .attr(\"transform\", `translate(${margin.left},0)`)\n                .call(yAxis)\n                .call(g => g.select(\".domain\").remove());\n\n        }\n\n        svg\n            .selectAll('.bar')\n            .data(data)\n            .join('rect')\n            .attr('class', 'bar')\n            .attr('x', xScale.range()[0])\n            .attr('height', ySubgroups.bandwidth())\n            .attr('y', (d) => {\n\n                const y_var: string = metadata.yVar === \"variable\"? renderVariable(d.variable): d.name; // renderGEOID(d.geoid);\n                let yValue = yScale(y_var);\n\n\n\n                const ySubgroupValue = ySubgroups(d[group_var].toString());\n                if (ySubgroupValue !== undefined && yValue !== undefined) {\n                    yValue = yValue + ySubgroupValue;\n                }\n                return yValue !== undefined ? yValue : 0;\n            })\n            .attr('width', (d) => d.value === null? 0: xScale(+d.value) - xScale(0))\n            .attr('fill', (d) => colorScale(d[group_var].toString()));\n\n\n        // Data labels\n        svg\n            .selectAll(\".data-label\")\n            .data(data)\n            .join(\"text\")\n            .attr(\"class\", \"data-label\")\n            .attr(\"x\", (d) => d.value === null? xScale.range()[0]: xScale(+d.value))\n            .attr('y', (d) => {\n\n                const y_var: string = metadata.yVar === \"variable\"? renderVariable(d.variable): d.name; // renderGEOID(d.geoid);\n                let yValue = yScale(y_var);\n\n                const ySubgroupValue = ySubgroups(d[group_var].toString());\n                if (ySubgroupValue !== undefined && yValue !== undefined) {\n                    yValue = yValue + ySubgroupValue + ySubgroups.bandwidth()/2;\n                }\n                return yValue !== undefined ? yValue : 0;\n            })\n            .attr(\"dy\", \"0.35em\") // Vertical alignment\n            .attr(\"dx\", \"0.35em\") // Vertical alignment\n            .style(\"color\", chartStyle.dataLabelFontColor)\n            .style(\"font-size\", chartStyle.dataLabelFontSize)\n            .style(\"font-weight\", chartStyle.dataLabelFontWeight)\n            .text((d) => getLabel(metadata.dataLabelFormat, d.value));\n\n        svg.call(applyCORIStyles);\n\n    }, [data, width, height, metadata]);\n\n    const onButtonClick = useCallback(() => {\n        saveChartAsPNG(ref, metric + \".png\");\n    }, [ref, metric])\n\n    return (\n        <div className={styles[\"chart-wrapper\"]}>\n            {data.length > 0 && (\n                <>\n                    <div ref={ref} className={styles[\"chart\"]} style={{maxWidth: \"900px\", margin: \"0 auto\", padding: \"5px 20px\"}}>\n                        {has_valid_data === false &&\n                            (\n                                <div className={styles[\"no-data\"]}>\n                                    <p>Note: Chart data is not available for the selected county</p>\n                                </div>\n                            )\n                        }\n                        {data.length > 0 && (\n                            <>\n                                <h3>{metadata.title}</h3>\n                                {metadata.subtitle.length > 0? <p><em>{metadata.subtitle}</em></p>: <></>}\n                                <CategoricalLegend data_names={data.map(data => data.name)} domain={colorScaleDomain} range={colorScaleRange} />\n                                <svg ref={svgRef} style={{width: \"100%\"}}>\n                                    <g className=\"x-axis\" />\n                                    <g className=\"y-axis\" />\n                                </svg>\n                                <p className={styles['caption']}>{metadata[\"caption\"]}</p>\n                            </>\n                        )\n                        }\n                    </div>\n                    <button className={styles[\"download-chart\"]} onClick={onButtonClick}>Download image</button>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default GroupedBarChart;"],"names":["GroupedBarChart","primary_geoid","metric","data","metadata","width","has_valid_data","d","ref","useRef","svgRef","colorScaleDomain","setColorScaleDomain","useState","colorScaleRange","setColorScaleRange","height","useEffect","margin","chartStyle","tick_number","group_var","groups","a","b","svg","d3.select","xscale_ratio","xScale","d3.scaleLinear","d3.max","yScale","d3.scaleBand","renderVariable","ySubgroups","colorScale","d3.scaleOrdinal","xAxis","d3.axisBottom","yAxis","d3.axisLeft","g","maxw","getMaxYLabelWidth","text_buffer","y_wrap","d3textwrap.textwrap","y_var","yValue","ySubgroupValue","getLabel","applyCORIStyles","onButtonClick","useCallback","saveChartAsPNG","jsx","styles","jsxs","Fragment","CategoricalLegend"],"mappings":"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"}