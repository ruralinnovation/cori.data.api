{"version":3,"file":"value.js","sources":["../../../../../../node_modules/arquero/src/format/value.js"],"sourcesContent":["import { formatDate, formatUTCDate } from '../util/format-date';\nimport isDate from '../util/is-date';\nimport isFunction from '../util/is-function';\nimport isTypedArray from '../util/is-typed-array';\n\n/**\n * Column format object.\n * @typedef {object} ValueFormatObject\n * @property {boolean} [utc=false] If true, format dates in UTC time.\n * @property {number} [digits=0] The number of fractional digits to include\n *  when formatting numbers.\n * @property {number} [maxlen=30] The maximum string length for formatting\n *  nested object or array values.\n */\n\n/**\n * @callback ValueFormatFunction\n * @param {*} value The value to format.\n * @return {*} A string-coercible or JSON-compatible formatted value.\n */\n\n/**\n * Value format options.\n * @typedef {ValueFormatObject|ValueFormatFunction} ValueFormatOptions\n */\n\n/**\n * Format a value as a string.\n * @param {*} v The value to format.\n * @param {ValueFormatOptions} options Formatting options.\n * @return {string} The formatted string.\n */\nexport default function(v, options = {}) {\n  if (isFunction(options)) {\n    return options(v) + '';\n  }\n\n  const type = typeof v;\n\n  if (type === 'object') {\n    if (isDate(v)) {\n      return options.utc ? formatUTCDate(v) : formatDate(v);\n    } else {\n      const s = JSON.stringify(\n        v,\n        (k, v) => isTypedArray(v) ? Array.from(v) : v\n      );\n      const maxlen = options.maxlen || 30;\n      return s.length > maxlen\n        ? s.slice(0, 28) + '\\u2026' + (s[0] === '[' ? ']' : '}')\n        : s;\n    }\n  } else if (type === 'number') {\n    const digits = options.digits || 0;\n    let a;\n    return v !== 0 && ((a = Math.abs(v)) >= 1e18 || a < Math.pow(10, -digits))\n      ? v.toExponential(digits)\n      : v.toFixed(digits);\n  } else {\n    return v + '';\n  }\n}"],"names":[],"mappings":";;;;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,oBAAQ,CAAC,CAAC,EAAE,OAAO,GAAG,EAAE,EAAE;AACzC,EAAE,IAAI,UAAU,CAAC,OAAO,CAAC,EAAE;AAC3B,IAAI,OAAO,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;AAC3B,GAAG;AACH;AACA,EAAE,MAAM,IAAI,GAAG,OAAO,CAAC,CAAC;AACxB;AACA,EAAE,IAAI,IAAI,KAAK,QAAQ,EAAE;AACzB,IAAI,IAAI,MAAM,CAAC,CAAC,CAAC,EAAE;AACnB,MAAM,OAAO,OAAO,CAAC,GAAG,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;AAC5D,KAAK,MAAM;AACX,MAAM,MAAM,CAAC,GAAG,IAAI,CAAC,SAAS;AAC9B,QAAQ,CAAC;AACT,QAAQ,CAAC,CAAC,EAAE,CAAC,KAAK,YAAY,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;AACrD,OAAO,CAAC;AACR,MAAM,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,EAAE,CAAC;AAC1C,MAAM,OAAO,CAAC,CAAC,MAAM,GAAG,MAAM;AAC9B,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,QAAQ,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAChE,UAAU,CAAC,CAAC;AACZ,KAAK;AACL,GAAG,MAAM,IAAI,IAAI,KAAK,QAAQ,EAAE;AAChC,IAAI,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,CAAC,CAAC;AACvC,IAAI,IAAI,CAAC,CAAC;AACV,IAAI,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC;AAC9E,QAAQ,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC;AAC/B,QAAQ,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AAC1B,GAAG,MAAM;AACT,IAAI,OAAO,CAAC,GAAG,EAAE,CAAC;AAClB,GAAG;AACH;;;;","x_google_ignoreList":[0]}