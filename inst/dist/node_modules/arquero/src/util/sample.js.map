{"version":3,"file":"sample.js","sources":["../../../../../../node_modules/arquero/src/util/sample.js"],"sourcesContent":["import ascending from './ascending';\nimport bisector from './bisector';\nimport { random } from './random';\n\nexport default function(buffer, replace, index, weight) {\n  return (\n    replace\n      ? (weight ? sampleRW : sampleRU)\n      : (weight ? sampleNW : sampleNU)\n  )(buffer.length, buffer, index, weight);\n}\n\n// uniform sampling with replacement\n// uses straightforward uniform sampling\nfunction sampleRU(size, buffer, index) {\n  const n = index.length;\n  for (let i = 0; i < size; ++i) {\n    buffer[i] = index[(n * random()) | 0];\n  }\n  return buffer;\n}\n\n// weighted sampling with replacement\n// uses binary search lookup against cumulative weight\nfunction sampleRW(size, buffer, index, weight) {\n  const n = index.length;\n  const w = new Float64Array(n);\n\n  let sum = 0;\n  for (let i = 0; i < n; ++i) {\n    w[i] = (sum += weight(index[i]));\n  }\n\n  const bisect = bisector(ascending).right;\n  for (let i = 0; i < size; ++i) {\n    buffer[i] = index[bisect(w, sum * random())];\n  }\n  return buffer;\n}\n\n// uniform sampling without replacement\n// uses reservoir sampling to build out the sample\n// https://en.wikipedia.org/wiki/Reservoir_sampling\nfunction sampleNU(size, buffer, index) {\n  const n = index.length;\n  if (size >= n) return index;\n\n  for (let i = 0; i < size; ++i) {\n    buffer[i] = index[i];\n  }\n\n  for (let i = size; i < n; ++i) {\n    const j = i * random();\n    if (j < size) {\n      buffer[j | 0] = index[i];\n    }\n  }\n\n  return buffer;\n}\n\n// weighted sample without replacement\n// uses method of Efraimidis and Spirakis\n// TODO: could use min-heap to improve efficiency\nfunction sampleNW(size, buffer, index, weight) {\n  const n = index.length;\n  if (size >= n) return index;\n\n  const w = new Float32Array(n);\n  const k = new Uint32Array(n);\n  for (let i = 0; i < n; ++i) {\n    k[i] = i;\n    w[i] = -Math.log(random()) / weight(index[i]);\n  }\n\n  k.sort((a, b) => w[a] - w[b]);\n  for (let i = 0; i < size; ++i) {\n    buffer[i] = index[k[i]];\n  }\n  return buffer;\n}"],"names":[],"mappings":"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","x_google_ignoreList":[0]}