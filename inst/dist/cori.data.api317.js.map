{"version":3,"file":"cori.data.api317.js","sources":["../../node_modules/apache-arrow/util/bit.mjs"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/** @ignore */\nexport function getBool(_data, _index, byte, bit) {\n    return (byte & 1 << bit) !== 0;\n}\n/** @ignore */\nexport function getBit(_data, _index, byte, bit) {\n    return (byte & 1 << bit) >> bit;\n}\n/** @ignore */\nexport function setBool(bytes, index, value) {\n    return value ?\n        !!(bytes[index >> 3] |= (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false;\n}\n/** @ignore */\nexport function truncateBitmap(offset, length, bitmap) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n        bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :\n            // Otherwise iterate each bit from the offset and return a new one\n            packBools(new BitIterator(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\n        return bytes;\n    }\n    return bitmap;\n}\n/** @ignore */\nexport function packBools(values) {\n    const xs = [];\n    let i = 0, bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) {\n        xs[i++] = byte;\n    }\n    const b = new Uint8Array((xs.length + 7) & ~7);\n    b.set(xs);\n    return b;\n}\n/** @ignore */\nexport class BitIterator {\n    constructor(bytes, begin, length, context, get) {\n        this.bytes = bytes;\n        this.length = length;\n        this.context = context;\n        this.get = get;\n        this.bit = begin % 8;\n        this.byteIndex = begin >> 3;\n        this.byte = bytes[this.byteIndex++];\n        this.index = 0;\n    }\n    next() {\n        if (this.index < this.length) {\n            if (this.bit === 8) {\n                this.bit = 0;\n                this.byte = this.bytes[this.byteIndex++];\n            }\n            return {\n                value: this.get(this.context, this.index++, this.byte, this.bit++)\n            };\n        }\n        return { done: true, value: null };\n    }\n    [Symbol.iterator]() {\n        return this;\n    }\n}\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data, lhs, rhs) {\n    if (rhs - lhs <= 0) {\n        return 0;\n    }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of new BitIterator(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n    // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n    popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3));\n}\n/** @ignore */\nexport function popcnt_array(arr, byteOffset, byteLength) {\n    let cnt = 0, pos = Math.trunc(byteOffset);\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len = byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n/** @ignore */\nexport function popcnt_uint32(uint32) {\n    let i = Math.trunc(uint32);\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n\n//# sourceMappingURL=bit.mjs.map\n"],"names":["getBool","_data","_index","byte","bit","getBit","truncateBitmap","offset","length","bitmap","alignedSize","bytes","packBools","BitIterator","values","xs","i","value","b","begin","context","get","popcnt_bit_range","data","lhs","rhs","sum","rhsInside","lhsInside","popcnt_array","arr","byteOffset","byteLength","cnt","pos","view","len","popcnt_uint32","uint32"],"mappings":"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","x_google_ignoreList":[0]}