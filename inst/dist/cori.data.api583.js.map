{"version":3,"file":"cori.data.api583.js","sources":["../../node_modules/apache-arrow/util/recordbatch.mjs"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { makeData } from '../data.mjs';\nimport { Struct } from '../type.mjs';\nimport { RecordBatch } from '../recordbatch.mjs';\n/** @ignore */\nexport function distributeVectorsIntoRecordBatches(schema, vecs) {\n    return uniformlyDistributeChunksAcrossRecordBatches(schema, vecs.map((v) => v.data.concat()));\n}\n/** @ignore */\nfunction uniformlyDistributeChunksAcrossRecordBatches(schema, cols) {\n    const fields = [...schema.fields];\n    const batches = [];\n    const memo = { numBatches: cols.reduce((n, c) => Math.max(n, c.length), 0) };\n    let numBatches = 0, batchLength = 0;\n    let i = -1;\n    const numColumns = cols.length;\n    let child, children = [];\n    while (memo.numBatches-- > 0) {\n        for (batchLength = Number.POSITIVE_INFINITY, i = -1; ++i < numColumns;) {\n            children[i] = child = cols[i].shift();\n            batchLength = Math.min(batchLength, child ? child.length : batchLength);\n        }\n        if (Number.isFinite(batchLength)) {\n            children = distributeChildren(fields, batchLength, children, cols, memo);\n            if (batchLength > 0) {\n                batches[numBatches++] = makeData({\n                    type: new Struct(fields),\n                    length: batchLength,\n                    nullCount: 0,\n                    children: children.slice()\n                });\n            }\n        }\n    }\n    return [\n        schema = schema.assign(fields),\n        batches.map((data) => new RecordBatch(schema, data))\n    ];\n}\n/** @ignore */\nfunction distributeChildren(fields, batchLength, children, columns, memo) {\n    var _a;\n    const nullBitmapSize = ((batchLength + 63) & ~63) >> 3;\n    for (let i = -1, n = columns.length; ++i < n;) {\n        const child = children[i];\n        const length = child === null || child === void 0 ? void 0 : child.length;\n        if (length >= batchLength) {\n            if (length === batchLength) {\n                children[i] = child;\n            }\n            else {\n                children[i] = child.slice(0, batchLength);\n                memo.numBatches = Math.max(memo.numBatches, columns[i].unshift(child.slice(batchLength, length - batchLength)));\n            }\n        }\n        else {\n            const field = fields[i];\n            fields[i] = field.clone({ nullable: true });\n            children[i] = (_a = child === null || child === void 0 ? void 0 : child._changeLengthAndBackfillNullBitmap(batchLength)) !== null && _a !== void 0 ? _a : makeData({\n                type: field.type,\n                length: batchLength,\n                nullCount: batchLength,\n                nullBitmap: new Uint8Array(nullBitmapSize)\n            });\n        }\n    }\n    return children;\n}\n\n//# sourceMappingURL=recordbatch.mjs.map\n"],"names":["distributeVectorsIntoRecordBatches","schema","vecs","uniformlyDistributeChunksAcrossRecordBatches","v","cols","fields","batches","memo","n","c","numBatches","batchLength","i","numColumns","child","children","distributeChildren","makeData","Struct","data","RecordBatch","columns","_a","nullBitmapSize","length","field"],"mappings":";;;;;;;;;AAoBO,SAASA,EAAmCC,GAAQC,GAAM;AAC7D,SAAOC,EAA6CF,GAAQC,EAAK,IAAI,CAACE,MAAMA,EAAE,KAAK,OAAQ,CAAA,CAAC;AAChG;AAEA,SAASD,EAA6CF,GAAQI,GAAM;AAChE,QAAMC,IAAS,CAAC,GAAGL,EAAO,MAAM,GAC1BM,IAAU,CAAA,GACVC,IAAO,EAAE,YAAYH,EAAK,OAAO,CAACI,GAAGC,MAAM,KAAK,IAAID,GAAGC,EAAE,MAAM,GAAG,CAAC;AACzE,MAAIC,IAAa,GAAGC,IAAc,GAC9BC,IAAI;AACR,QAAMC,IAAaT,EAAK;AACxB,MAAIU,GAAOC,IAAW;AACtB,SAAOR,EAAK,eAAe,KAAG;AAC1B,SAAKI,IAAc,OAAO,mBAAmBC,IAAI,IAAI,EAAEA,IAAIC;AACvD,MAAAE,EAASH,CAAC,IAAIE,IAAQV,EAAKQ,CAAC,EAAE,SAC9BD,IAAc,KAAK,IAAIA,GAAaG,IAAQA,EAAM,SAASH,CAAW;AAE1E,IAAI,OAAO,SAASA,CAAW,MAC3BI,IAAWC,EAAmBX,GAAQM,GAAaI,GAAUX,GAAMG,CAAI,GACnEI,IAAc,MACdL,EAAQI,GAAY,IAAIO,EAAS;AAAA,MAC7B,MAAM,IAAIC,EAAOb,CAAM;AAAA,MACvB,QAAQM;AAAA,MACR,WAAW;AAAA,MACX,UAAUI,EAAS,MAAO;AAAA,IAC9C,CAAiB;AAAA,EAGZ;AACD,SAAO;AAAA,IACHf,IAASA,EAAO,OAAOK,CAAM;AAAA,IAC7BC,EAAQ,IAAI,CAACa,MAAS,IAAIC,EAAYpB,GAAQmB,CAAI,CAAC;AAAA,EAC3D;AACA;AAEA,SAASH,EAAmBX,GAAQM,GAAaI,GAAUM,GAASd,GAAM;AACtE,MAAIe;AACJ,QAAMC,KAAmBZ,IAAc,KAAM,QAAQ;AACrD,WAASC,IAAI,IAAIJ,IAAIa,EAAQ,QAAQ,EAAET,IAAIJ,KAAI;AAC3C,UAAMM,IAAQC,EAASH,CAAC,GAClBY,IAASV,KAAU,OAA2B,SAASA,EAAM;AACnE,QAAIU,KAAUb;AACV,MAAIa,MAAWb,IACXI,EAASH,CAAC,IAAIE,KAGdC,EAASH,CAAC,IAAIE,EAAM,MAAM,GAAGH,CAAW,GACxCJ,EAAK,aAAa,KAAK,IAAIA,EAAK,YAAYc,EAAQT,CAAC,EAAE,QAAQE,EAAM,MAAMH,GAAaa,IAASb,CAAW,CAAC,CAAC;AAAA,SAGjH;AACD,YAAMc,IAAQpB,EAAOO,CAAC;AACtB,MAAAP,EAAOO,CAAC,IAAIa,EAAM,MAAM,EAAE,UAAU,GAAI,CAAE,GAC1CV,EAASH,CAAC,KAAKU,IAAKR,KAAU,OAA2B,SAASA,EAAM,mCAAmCH,CAAW,OAAO,QAAQW,MAAO,SAASA,IAAKL,EAAS;AAAA,QAC/J,MAAMQ,EAAM;AAAA,QACZ,QAAQd;AAAA,QACR,WAAWA;AAAA,QACX,YAAY,IAAI,WAAWY,CAAc;AAAA,MACzD,CAAa;AAAA,IACJ;AAAA,EACJ;AACD,SAAOR;AACX;","x_google_ignoreList":[0]}