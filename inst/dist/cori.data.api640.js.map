{"version":3,"file":"cori.data.api640.js","sources":["../../node_modules/micromark-core-commonmark/lib/html-flow.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n};\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}"],"names":["htmlFlow","tokenizeHtmlFlow","resolveToHtmlFlow","blankLineBefore","tokenizeBlankLineBefore","nonLazyContinuationStart","tokenizeNonLazyContinuationStart","events","index","effects","ok","nok","self","marker","closingTag","buffer","markerB","start","code","before","open","declarationOpen","tagCloseStart","continuationDeclarationInside","asciiAlpha","tagName","commentOpenInside","cdataOpenInside","value","continuation","markdownLineEndingOrSpace","slash","name","htmlRawNames","htmlBlockNames","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","asciiAlphanumeric","markdownSpace","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","markdownLineEnding","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationAfter","continuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","after","blankLine"],"mappings":"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","x_google_ignoreList":[0]}