{"version":3,"file":"buffer.js","sources":["../../../../../node_modules/apache-arrow/builder/buffer.mjs"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { memcpy } from '../util/buffer.mjs';\n/** @ignore */\nfunction roundLengthUpToNearest64Bytes(len, BPE) {\n    const bytesMinus1 = Math.ceil(len) * BPE - 1;\n    return ((bytesMinus1 - bytesMinus1 % 64 + 64) || 64) / BPE;\n}\n/** @ignore */\nfunction resizeArray(arr, len = 0) {\n    return arr.length >= len ?\n        arr.subarray(0, len) :\n        memcpy(new arr.constructor(len), arr, 0);\n}\n/** @ignore */\nexport class BufferBuilder {\n    constructor(bufferType, initialSize = 0, stride = 1) {\n        this.length = Math.ceil(initialSize / stride);\n        this.buffer = new bufferType(this.length);\n        this.stride = stride;\n        this.BYTES_PER_ELEMENT = bufferType.BYTES_PER_ELEMENT;\n        this.ArrayType = bufferType;\n    }\n    get byteLength() {\n        return Math.ceil(this.length * this.stride) * this.BYTES_PER_ELEMENT;\n    }\n    get reservedLength() { return this.buffer.length / this.stride; }\n    get reservedByteLength() { return this.buffer.byteLength; }\n    // @ts-ignore\n    set(index, value) { return this; }\n    append(value) { return this.set(this.length, value); }\n    reserve(extra) {\n        if (extra > 0) {\n            this.length += extra;\n            const stride = this.stride;\n            const length = this.length * stride;\n            const reserved = this.buffer.length;\n            if (length >= reserved) {\n                this._resize(reserved === 0\n                    ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT)\n                    : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT));\n            }\n        }\n        return this;\n    }\n    flush(length = this.length) {\n        length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n        const array = resizeArray(this.buffer, length);\n        this.clear();\n        return array;\n    }\n    clear() {\n        this.length = 0;\n        this.buffer = new this.ArrayType();\n        return this;\n    }\n    _resize(newLength) {\n        return this.buffer = resizeArray(this.buffer, newLength);\n    }\n}\n/** @ignore */\nexport class DataBufferBuilder extends BufferBuilder {\n    last() { return this.get(this.length - 1); }\n    get(index) { return this.buffer[index]; }\n    set(index, value) {\n        this.reserve(index - this.length + 1);\n        this.buffer[index * this.stride] = value;\n        return this;\n    }\n}\n/** @ignore */\nexport class BitmapBufferBuilder extends DataBufferBuilder {\n    constructor() {\n        super(Uint8Array, 0, 1 / 8);\n        this.numValid = 0;\n    }\n    get numInvalid() { return this.length - this.numValid; }\n    get(idx) { return this.buffer[idx >> 3] >> idx % 8 & 1; }\n    set(idx, val) {\n        const { buffer } = this.reserve(idx - this.length + 1);\n        const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n        val ? cur === 0 && ((buffer[byte] |= (1 << bit)), ++this.numValid)\n            : cur === 1 && ((buffer[byte] &= ~(1 << bit)), --this.numValid);\n        return this;\n    }\n    clear() {\n        this.numValid = 0;\n        return super.clear();\n    }\n}\n/** @ignore */\nexport class OffsetsBufferBuilder extends DataBufferBuilder {\n    constructor(type) {\n        super(type.OffsetArrayType, 1, 1);\n    }\n    append(value) {\n        return this.set(this.length - 1, value);\n    }\n    set(index, value) {\n        const offset = this.length - 1;\n        const buffer = this.reserve(index - offset + 1).buffer;\n        if (offset < index++ && offset >= 0) {\n            buffer.fill(buffer[offset], offset, index);\n        }\n        buffer[index] = buffer[index - 1] + value;\n        return this;\n    }\n    flush(length = this.length - 1) {\n        if (length > this.length) {\n            this.set(length - 1, this.BYTES_PER_ELEMENT > 4 ? BigInt(0) : 0);\n        }\n        return super.flush(length + 1);\n    }\n}\n\n//# sourceMappingURL=buffer.mjs.map\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}