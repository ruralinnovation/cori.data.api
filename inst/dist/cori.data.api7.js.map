{"version":3,"file":"cori.data.api7.js","sources":["../../lib/@cori-risi/components/LineChart.tsx"],"sourcesContent":["import React, { useRef, useEffect, useCallback, useState } from 'react';\nimport * as d3 from 'd3';\n\nimport { ERCData, MetricMetadata } from '../interfaces';\nimport * as d3textwrap from \"d3-textwrap\";\n\nimport CategoricalLegend from './CategoricalLegend';\n\nimport styles from \"./styles/Chart.module.css\";\nimport { applyCORIStyles, getMaxYLabelWidth, saveChartAsPNG, getGEOIDColorRange } from '../utils';\n\nimport { chartStyle } from '../utils/constants';\n\ninterface LineChartProps {\n  primary_geoid: string,\n  metric: string,\n  data: ERCData[];\n  metadata: MetricMetadata,\n  width: number;\n  height: number;\n}\n\nconst LineChart: React.FC<LineChartProps> = ({ primary_geoid, metric, data, metadata, width, height }) => {\n\n  const primary_dta = data.filter(d => d.geoid === primary_geoid && d.metric === metric);\n  const has_valid_data = !primary_dta.every(d => d.value === null);\n\n  const ref = useRef<HTMLDivElement>(null)\n  const svgRef = useRef<SVGSVGElement>(null);\n\n  const [colorScaleDomain, setColorScaleDomain] = useState<string[]>([]);\n  const [colorScaleRange, setColorScaleRange] = useState<unknown[]>([]);\n\n  useEffect(() => {\n\n    if (!svgRef.current) return;\n\n    const margin = {...chartStyle.margin};\n    const tick_number = Math.floor(width / 225);\n    const y_axis_tick_size = 8;\n\n    const svg = d3.select(svgRef.current)\n        .attr(\"viewBox\", `0 0 ${width} ${height}`)\n        .attr(\"preserveAspectRatio\", \"xMidYMid meet\");\n\n    const xScale = d3\n        .scaleLinear()\n        .domain([d3.min(data, (d) => (+d.year))!, d3.max(data, (d) => (+d.year))! ])\n        .nice()\n        .range([margin.left, width - margin.right]);\n\n    const yScale = d3\n        .scaleLinear()\n        .domain([\n          d3.max(data, (d) => d.value === null? undefined: (+d.value))!,\n          d3.min(data, (d) => d.value === null? undefined: (+d.value))!\n        ])\n        .nice()\n        .range([margin.top, height - margin.bottom]);\n\n    const max_year: number = d3.max(data, (d) => +d.year) as number;\n    const sortedGEOIDs = [...data]\n        .filter(d => +d.year === max_year)\n        .sort((a, b) => { // b.value - a.value\n          if (a.value === null && b.value === null) return 0;\n          if (a.value === null) return 1; // Treat null values as greater (will move to end)\n          if (b.value === null) return -1; // Treat null values as greater (will move to end)\n          return +b.value - +a.value;\n        });\n\n    const geoid_domain = [...new Set(sortedGEOIDs.map(d => d.geoid.toString()))];\n    const colorScale = d3.scaleOrdinal()\n        .domain(geoid_domain)\n        .range(geoid_domain.map(getGEOIDColorRange));\n\n    setColorScaleDomain(colorScale.domain());\n    setColorScaleRange(colorScale.range());\n\n    let xAxis = d3.axisBottom<number>(xScale); // later is reassigned\n    const yAxis = d3.axisLeft<number>(yScale)\n        .ticks(tick_number, metadata.yFormat)\n        .tickSize(y_axis_tick_size);\n\n    svg\n        .select<SVGGElement>('.x-axis')\n        .attr('transform', `translate(0, ${height - margin.bottom})`)\n        .call(xAxis);\n\n    svg.select<SVGGElement>('.y-axis')\n        .attr(\"transform\", `translate(${margin.left},0)`)\n        .call(yAxis)\n        .call(g => g.select(\".domain\").remove());\n\n    // style y-axis text before calculating widths\n    svg.selectAll(\".y-axis text\")\n        .style(\"font-family\", chartStyle.tickFontFamily)\n        .style(\"font-size\", chartStyle.tickFontSize)\n        .style(\"color\", chartStyle.tickFontColor)\n\n    const maxw = getMaxYLabelWidth(svg);\n\n    // If we need to wrap labels\n    if (maxw > 200) {\n\n      // wrap the text\n      const textwrap_dimensions = {height: 20, width: 200};\n      const y_wrap = d3textwrap.textwrap().bounds(textwrap_dimensions);\n      svg.selectAll(\".y-axis text\")\n          .call(y_wrap)\n          .call(g => g.selectAll('foreignObject')\n              .style(\"transform\", 'translate(-' + textwrap_dimensions.width + 'px, -' + .5 + 'rem)')\n          );\n\n      xScale.range([margin.left, width - margin.right]);\n      xAxis = d3\n          .axisBottom<number>(xScale)\n          .tickSize(chartStyle.xTickSize)\n          .ticks(tick_number, metadata.xFormat);\n\n      svg\n          .select<SVGGElement>('.x-axis')\n          .attr('transform', `translate(0, ${height - margin.bottom})`)\n          .call(xAxis);\n\n      svg.select<SVGGElement>('.y-axis')\n          .attr(\"transform\", `translate(${margin.left},0)`);\n\n    }\n    else {\n\n      margin.left = maxw + y_axis_tick_size;\n\n      xScale.range([margin.left, width - margin.right]);\n      xAxis = d3\n          .axisBottom<number>(xScale)\n          .tickSize(12)\n          .ticks(tick_number, metadata.xFormat);\n\n      svg\n          .select<SVGGElement>('.x-axis')\n          .attr('transform', `translate(0, ${height - margin.bottom})`)\n          .call(xAxis);\n\n      svg.select<SVGGElement>('.y-axis')\n          .attr(\"transform\", `translate(${margin.left},0)`);\n\n    }\n\n    // Group data by geoid\n    const sortedData = [...data].sort((a, b) => a.year - b.year);\n    const nestedData = d3.group(sortedData, d => d.geoid);\n\n    // Define line generator\n    const line = d3.line<ERCData>()\n        .defined(d => d.value !== null)\n        .x(d => xScale(+d.year))\n        .y(d => yScale(+d.value!));\n\n    // Add gridlines\n    const GridLine = () => d3.axisLeft(yScale);\n    svg.selectAll(\".grid\").remove();\n    svg\n        .append(\"g\")\n        .attr(\"class\", \"grid\")\n        .call(GridLine().ticks(tick_number))\n        .call(g => g.select(\".domain\").remove())\n        .call(g => g.selectAll(\".tick line\")\n            .attr(\"x1\", margin.left)\n            .attr(\"x2\", width - margin.right)\n        );\n\n    svg.selectAll(\".data-lines\").remove();\n    nestedData.forEach((d) => {\n      svg\n          .append(\"path\")\n          .attr(\"class\", \"data-lines\")\n          .datum(d)\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", function(d) {\n            const line_color: string | unknown = colorScale(d[0].geoid);\n            if (typeof line_color === \"string\")\n              return line_color;\n\n            return \"black\";\n          })\n          .attr(\"stroke-width\", chartStyle.strokeWidth)\n          .attr(\"stroke-opacity\", chartStyle.strokeOpacity)\n          .attr(\"d\", line);\n    });\n\n    // nestedData.forEach((d) => {\n    //   svg\n    //   .append(\"g\")\n    //   .selectAll(\"dot\")\n    //   .data(d)\n    //   .enter()\n    //   .append(\"circle\")\n    //     .attr(\"cx\", function(d) { return xScale(+d.year) } )\n    //     .attr(\"cy\", function(d) { return yScale(+d.value) } )\n    //     .attr(\"r\", 5)\n    //     .attr(\"fill\", \"#69b3a2\")\n    // });\n\n    svg.call(applyCORIStyles);\n\n  }, [data, width, height, metadata]);\n\n  const onButtonClick = useCallback(() => {\n    saveChartAsPNG(ref, metric + \".png\");\n  }, [ref, metric])\n\n  return (\n      <div className={styles[\"chart-wrapper\"]}>\n        {data.length > 0 && (\n            <>\n              <div ref={ref} className={styles[\"chart\"]} style={{maxWidth: \"900px\", margin: \"0 auto\", padding: \"5px 20px\"}}>\n                {\n                    has_valid_data === false && (\n                        <div className={styles[\"no-data\"]}>\n                          <p>Note: Chart data is not available for the selected primary county</p>\n                        </div>\n                    )\n                }\n                <h3>{metadata.title}</h3>\n                {metadata.subtitle.length > 0? <p><em>{metadata.subtitle}</em></p>: <></>}\n                <CategoricalLegend data_names={data.map(data => data.name)} domain={colorScaleDomain} range={colorScaleRange} />\n                <svg ref={svgRef} style={{width: \"100%\"}}>\n                  <g className=\"x-axis\" />\n                  <g className=\"y-axis\" />\n                </svg>\n                <p className={styles['caption']}>{metadata[\"caption\"]}</p>\n              </div>\n              <button className={styles[\"download-chart\"]} onClick={onButtonClick}>Download image</button>\n            </>\n        )\n        }\n      </div>\n  );\n};\n\nexport default LineChart;"],"names":["LineChart","primary_geoid","metric","data","metadata","width","height","has_valid_data","d","ref","useRef","svgRef","colorScaleDomain","setColorScaleDomain","useState","colorScaleRange","setColorScaleRange","useEffect","margin","chartStyle","tick_number","y_axis_tick_size","svg","d3.select","xScale","d3.scaleLinear","d3.min","d3.max","yScale","max_year","sortedGEOIDs","a","b","geoid_domain","colorScale","d3.scaleOrdinal","getGEOIDColorRange","xAxis","d3.axisBottom","yAxis","d3.axisLeft","g","maxw","getMaxYLabelWidth","textwrap_dimensions","y_wrap","d3textwrap.textwrap","sortedData","nestedData","d3.group","line","d3.line","GridLine","line_color","applyCORIStyles","onButtonClick","useCallback","saveChartAsPNG","jsx","styles","jsxs","Fragment","CategoricalLegend"],"mappings":"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"}