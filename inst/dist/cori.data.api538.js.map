{"version":3,"file":"cori.data.api538.js","sources":["../../node_modules/arquero/src/engine/unroll.js"],"sourcesContent":["import { aggregateGet } from './reduce/util';\nimport columnSet from '../table/column-set';\nimport toArray from '../util/to-array';\n\nexport default function(table, { names = [], exprs = [], ops = [] }, options = {}) {\n  if (!names.length) return table;\n\n  const limit = options.limit > 0 ? +options.limit : Infinity;\n  const index = options.index\n    ? options.index === true ? 'index' : options.index + ''\n    : null;\n  const drop = new Set(options.drop);\n  const get = aggregateGet(table, ops, exprs);\n\n  // initialize output columns\n  const cols = columnSet();\n  const nset = new Set(names);\n  const priors = [];\n  const copies = [];\n  const unroll = [];\n\n  // original and copied columns\n  table.columnNames().forEach(name => {\n    if (!drop.has(name)) {\n      const col = cols.add(name, []);\n      if (!nset.has(name)) {\n        priors.push(table.column(name));\n        copies.push(col);\n      }\n    }\n  });\n\n  // unrolled output columns\n  names.forEach(name => {\n    if (!drop.has(name)) {\n      if (!cols.has(name)) cols.add(name, []);\n      unroll.push(cols.data[name]);\n    }\n  });\n\n  // index column, if requested\n  const icol = index ? cols.add(index, []) : null;\n\n  let start = 0;\n  const m = priors.length;\n  const n = unroll.length;\n\n  const copy = (row, maxlen) => {\n    for (let i = 0; i < m; ++i) {\n      copies[i].length = start + maxlen;\n      copies[i].fill(priors[i].get(row), start, start + maxlen);\n    }\n  };\n\n  const indices = icol\n    ? (row, maxlen) => {\n        for (let i = 0; i < maxlen; ++i) {\n          icol[row + i] = i;\n        }\n      }\n    : () => {};\n\n  if (n === 1) {\n    // optimize common case of one array-valued column\n    const fn = get[0];\n    const col = unroll[0];\n\n    table.scan((row, data) => {\n      // extract array data\n      const array = toArray(fn(row, data));\n      const maxlen = Math.min(array.length, limit);\n\n      // copy original table data\n      copy(row, maxlen);\n\n      // copy unrolled array data\n      for (let j = 0; j < maxlen; ++j) {\n        col[start + j] = array[j];\n      }\n\n      // fill in array indices\n      indices(start, maxlen);\n\n      start += maxlen;\n    });\n  } else {\n    table.scan((row, data) => {\n      let maxlen = 0;\n\n      // extract parallel array data\n      const arrays = get.map(fn => {\n        const value = toArray(fn(row, data));\n        maxlen = Math.min(Math.max(maxlen, value.length), limit);\n        return value;\n      });\n\n      // copy original table data\n      copy(row, maxlen);\n\n      // copy unrolled array data\n      for (let i = 0; i < n; ++i) {\n        const col = unroll[i];\n        const arr = arrays[i];\n        for (let j = 0; j < maxlen; ++j) {\n          col[start + j] = arr[j];\n        }\n      }\n\n      // fill in array indices\n      indices(start, maxlen);\n\n      start += maxlen;\n    });\n  }\n\n  return table.create(cols.new());\n}"],"names":["_unroll","table","names","exprs","ops","options","limit","index","drop","get","aggregateGet","cols","columnSet","nset","priors","copies","unroll","name","col","icol","start","m","n","copy","row","maxlen","i","indices","fn","data","array","toArray","j","arrays","value","arr"],"mappings":";;;;;;;;;AAIe,SAAQA,EAACC,GAAO,EAAE,OAAAC,IAAQ,CAAA,GAAI,OAAAC,IAAQ,IAAI,KAAAC,IAAM,CAAE,EAAA,GAAIC,IAAU,IAAI;AACjF,MAAI,CAACH,EAAM;AAAQ,WAAOD;AAE1B,QAAMK,IAAQD,EAAQ,QAAQ,IAAI,CAACA,EAAQ,QAAQ,OAC7CE,IAAQF,EAAQ,QAClBA,EAAQ,UAAU,KAAO,UAAUA,EAAQ,QAAQ,KACnD,MACEG,IAAO,IAAI,IAAIH,EAAQ,IAAI,GAC3BI,IAAMC,EAAaT,GAAOG,GAAKD,CAAK,GAGpCQ,IAAOC,KACPC,IAAO,IAAI,IAAIX,CAAK,GACpBY,IAAS,CAAA,GACTC,IAAS,CAAA,GACTC,IAAS,CAAA;AAGf,EAAAf,EAAM,YAAW,EAAG,QAAQ,CAAAgB,MAAQ;AAClC,QAAI,CAACT,EAAK,IAAIS,CAAI,GAAG;AACnB,YAAMC,IAAMP,EAAK,IAAIM,GAAM,CAAE,CAAA;AAC7B,MAAKJ,EAAK,IAAII,CAAI,MAChBH,EAAO,KAAKb,EAAM,OAAOgB,CAAI,CAAC,GAC9BF,EAAO,KAAKG,CAAG;AAAA,IAElB;AAAA,EACL,CAAG,GAGDhB,EAAM,QAAQ,CAAAe,MAAQ;AACpB,IAAKT,EAAK,IAAIS,CAAI,MACXN,EAAK,IAAIM,CAAI,KAAGN,EAAK,IAAIM,GAAM,CAAA,CAAE,GACtCD,EAAO,KAAKL,EAAK,KAAKM,CAAI,CAAC;AAAA,EAEjC,CAAG;AAGD,QAAME,IAAOZ,IAAQI,EAAK,IAAIJ,GAAO,CAAA,CAAE,IAAI;AAE3C,MAAIa,IAAQ;AACZ,QAAMC,IAAIP,EAAO,QACXQ,IAAIN,EAAO,QAEXO,IAAO,CAACC,GAAKC,MAAW;AAC5B,aAASC,IAAI,GAAGA,IAAIL,GAAG,EAAEK;AACvB,MAAAX,EAAOW,CAAC,EAAE,SAASN,IAAQK,GAC3BV,EAAOW,CAAC,EAAE,KAAKZ,EAAOY,CAAC,EAAE,IAAIF,CAAG,GAAGJ,GAAOA,IAAQK,CAAM;AAAA,EAE9D,GAEQE,IAAUR,IACZ,CAACK,GAAKC,MAAW;AACf,aAASC,IAAI,GAAGA,IAAID,GAAQ,EAAEC;AAC5B,MAAAP,EAAKK,IAAME,CAAC,IAAIA;AAAA,EAEnB,IACD,MAAM;AAAA;AAEV,MAAIJ,MAAM,GAAG;AAEX,UAAMM,IAAKnB,EAAI,CAAC,GACVS,IAAMF,EAAO,CAAC;AAEpB,IAAAf,EAAM,KAAK,CAACuB,GAAKK,MAAS;AAExB,YAAMC,IAAQC,EAAQH,EAAGJ,GAAKK,CAAI,CAAC,GAC7BJ,IAAS,KAAK,IAAIK,EAAM,QAAQxB,CAAK;AAG3C,MAAAiB,EAAKC,GAAKC,CAAM;AAGhB,eAASO,IAAI,GAAGA,IAAIP,GAAQ,EAAEO;AAC5B,QAAAd,EAAIE,IAAQY,CAAC,IAAIF,EAAME,CAAC;AAI1B,MAAAL,EAAQP,GAAOK,CAAM,GAErBL,KAASK;AAAA,IACf,CAAK;AAAA,EACL;AACI,IAAAxB,EAAM,KAAK,CAACuB,GAAKK,MAAS;AACxB,UAAIJ,IAAS;AAGb,YAAMQ,IAASxB,EAAI,IAAI,CAAAmB,MAAM;AAC3B,cAAMM,IAAQH,EAAQH,EAAGJ,GAAKK,CAAI,CAAC;AACnC,eAAAJ,IAAS,KAAK,IAAI,KAAK,IAAIA,GAAQS,EAAM,MAAM,GAAG5B,CAAK,GAChD4B;AAAA,MACf,CAAO;AAGD,MAAAX,EAAKC,GAAKC,CAAM;AAGhB,eAASC,IAAI,GAAGA,IAAIJ,GAAG,EAAEI,GAAG;AAC1B,cAAMR,IAAMF,EAAOU,CAAC,GACdS,IAAMF,EAAOP,CAAC;AACpB,iBAASM,IAAI,GAAGA,IAAIP,GAAQ,EAAEO;AAC5B,UAAAd,EAAIE,IAAQY,CAAC,IAAIG,EAAIH,CAAC;AAAA,MAEzB;AAGD,MAAAL,EAAQP,GAAOK,CAAM,GAErBL,KAASK;AAAA,IACf,CAAK;AAGH,SAAOxB,EAAM,OAAOU,EAAK,IAAK,CAAA;AAChC;","x_google_ignoreList":[0]}