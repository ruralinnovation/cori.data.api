{"version":3,"file":"cori.data.api504.js","sources":["../../node_modules/apache-arrow/builder.mjs"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from './vector.mjs';\nimport { makeData } from './data.mjs';\nimport { MapRow, kKeys } from './row/map.mjs';\nimport { strideForType, } from './type.mjs';\nimport { createIsValidFunction } from './builder/valid.mjs';\nimport { BitmapBufferBuilder, DataBufferBuilder, OffsetsBufferBuilder } from './builder/buffer.mjs';\n/**\n * An abstract base class for types that construct Arrow Vectors from arbitrary JavaScript values.\n *\n * A `Builder` is responsible for writing arbitrary JavaScript values\n * to ArrayBuffers and/or child Builders according to the Arrow specification\n * for each DataType, creating or resizing the underlying ArrayBuffers as necessary.\n *\n * The `Builder` for each Arrow `DataType` handles converting and appending\n * values for a given `DataType`. The high-level {@link makeBuilder `makeBuilder()`} convenience\n * method creates the specific `Builder` subclass for the supplied `DataType`.\n *\n * Once created, `Builder` instances support both appending values to the end\n * of the `Builder`, and random-access writes to specific indices\n * (`Builder.prototype.append(value)` is a convenience method for\n * `builder.set(builder.length, value)`). Appending or setting values beyond the\n * Builder's current length may cause the builder to grow its underlying buffers\n * or child Builders (if applicable) to accommodate the new values.\n *\n * After enough values have been written to a `Builder`, `Builder.prototype.flush()`\n * will commit the values to the underlying ArrayBuffers (or child Builders). The\n * internal Builder state will be reset, and an instance of `Data<T>` is returned.\n * Alternatively, `Builder.prototype.toVector()` will flush the `Builder` and return\n * an instance of `Vector<T>` instead.\n *\n * When there are no more values to write, use `Builder.prototype.finish()` to\n * finalize the `Builder`. This does not reset the internal state, so it is\n * necessary to call `Builder.prototype.flush()` or `toVector()` one last time\n * if there are still values queued to be flushed.\n *\n * Note: calling `Builder.prototype.finish()` is required when using a `DictionaryBuilder`,\n * because this is when it flushes the values that have been enqueued in its internal\n * dictionary's `Builder`, and creates the `dictionaryVector` for the `Dictionary` `DataType`.\n *\n * @example\n * ```ts\n * import { makeBuilder, Utf8 } from 'apache-arrow';\n *\n * const utf8Builder = makeBuilder({\n *     type: new Utf8(),\n *     nullValues: [null, 'n/a']\n * });\n *\n * utf8Builder\n *     .append('hello')\n *     .append('n/a')\n *     .append('world')\n *     .append(null);\n *\n * const utf8Vector = utf8Builder.finish().toVector();\n *\n * console.log(utf8Vector.toJSON());\n * // > [\"hello\", null, \"world\", null]\n * ```\n *\n * @typeparam T The `DataType` of this `Builder`.\n * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n */\nexport class Builder {\n    /** @nocollapse */\n    // @ts-ignore\n    static throughNode(options) {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    // @ts-ignore\n    static throughDOM(options) {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n    /**\n     * Construct a builder with the given Arrow DataType with optional null values,\n     * which will be interpreted as \"null\" when set or appended to the `Builder`.\n     * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.\n     */\n    constructor({ 'type': type, 'nullValues': nulls }) {\n        /**\n         * The number of values written to the `Builder` that haven't been flushed yet.\n         * @readonly\n         */\n        this.length = 0;\n        /**\n         * A boolean indicating whether `Builder.prototype.finish()` has been called on this `Builder`.\n         * @readonly\n         */\n        this.finished = false;\n        this.type = type;\n        this.children = [];\n        this.nullValues = nulls;\n        this.stride = strideForType(type);\n        this._nulls = new BitmapBufferBuilder();\n        if (nulls && nulls.length > 0) {\n            this._isValid = createIsValidFunction(nulls);\n        }\n    }\n    /**\n     * Flush the `Builder` and return a `Vector<T>`.\n     * @returns {Vector<T>} A `Vector<T>` of the flushed values.\n     */\n    toVector() { return new Vector([this.flush()]); }\n    get ArrayType() { return this.type.ArrayType; }\n    get nullCount() { return this._nulls.numInvalid; }\n    get numChildren() { return this.children.length; }\n    /**\n     * @returns The aggregate length (in bytes) of the values that have been written.\n     */\n    get byteLength() {\n        let size = 0;\n        const { _offsets, _values, _nulls, _typeIds, children } = this;\n        _offsets && (size += _offsets.byteLength);\n        _values && (size += _values.byteLength);\n        _nulls && (size += _nulls.byteLength);\n        _typeIds && (size += _typeIds.byteLength);\n        return children.reduce((size, child) => size + child.byteLength, size);\n    }\n    /**\n     * @returns The aggregate number of rows that have been reserved to write new values.\n     */\n    get reservedLength() {\n        return this._nulls.reservedLength;\n    }\n    /**\n     * @returns The aggregate length (in bytes) that has been reserved to write new values.\n     */\n    get reservedByteLength() {\n        let size = 0;\n        this._offsets && (size += this._offsets.reservedByteLength);\n        this._values && (size += this._values.reservedByteLength);\n        this._nulls && (size += this._nulls.reservedByteLength);\n        this._typeIds && (size += this._typeIds.reservedByteLength);\n        return this.children.reduce((size, child) => size + child.reservedByteLength, size);\n    }\n    get valueOffsets() { return this._offsets ? this._offsets.buffer : null; }\n    get values() { return this._values ? this._values.buffer : null; }\n    get nullBitmap() { return this._nulls ? this._nulls.buffer : null; }\n    get typeIds() { return this._typeIds ? this._typeIds.buffer : null; }\n    /**\n     * Appends a value (or null) to this `Builder`.\n     * This is equivalent to `builder.set(builder.length, value)`.\n     * @param {T['TValue'] | TNull } value The value to append.\n     */\n    append(value) { return this.set(this.length, value); }\n    /**\n     * Validates whether a value is valid (true), or null (false)\n     * @param {T['TValue'] | TNull } value The value to compare against null the value representations\n     */\n    isValid(value) { return this._isValid(value); }\n    /**\n     * Write a value (or null-value sentinel) at the supplied index.\n     * If the value matches one of the null-value representations, a 1-bit is\n     * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to\n     * the null `BitmapBufferBuilder`, and the value is passed to\n     * `Builder.prototype.setValue()`.\n     * @param {number} index The index of the value to write.\n     * @param {T['TValue'] | TNull } value The value to write at the supplied index.\n     * @returns {this} The updated `Builder` instance.\n     */\n    set(index, value) {\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value);\n        }\n        return this;\n    }\n    /**\n     * Write a value to the underlying buffers at the supplied index, bypassing\n     * the null-value check. This is a low-level method that\n     * @param {number} index\n     * @param {T['TValue'] | TNull } value\n     */\n    setValue(index, value) { this._setValue(this, index, value); }\n    setValid(index, valid) {\n        this.length = this._nulls.set(index, +valid).length;\n        return valid;\n    }\n    // @ts-ignore\n    addChild(child, name = `${this.numChildren}`) {\n        throw new Error(`Cannot append children to non-nested type \"${this.type}\"`);\n    }\n    /**\n     * Retrieve the child `Builder` at the supplied `index`, or null if no child\n     * exists at that index.\n     * @param {number} index The index of the child `Builder` to retrieve.\n     * @returns {Builder | null} The child Builder at the supplied index or null.\n     */\n    getChildAt(index) {\n        return this.children[index] || null;\n    }\n    /**\n     * Commit all the values that have been written to their underlying\n     * ArrayBuffers, including any child Builders if applicable, and reset\n     * the internal `Builder` state.\n     * @returns A `Data<T>` of the buffers and children representing the values written.\n     */\n    flush() {\n        let data;\n        let typeIds;\n        let nullBitmap;\n        let valueOffsets;\n        const { type, length, nullCount, _typeIds, _offsets, _values, _nulls } = this;\n        if (typeIds = _typeIds === null || _typeIds === void 0 ? void 0 : _typeIds.flush(length)) { // Unions, DenseUnions\n            valueOffsets = _offsets === null || _offsets === void 0 ? void 0 : _offsets.flush(length);\n        }\n        else if (valueOffsets = _offsets === null || _offsets === void 0 ? void 0 : _offsets.flush(length)) { // Variable-width primitives (Binary, LargeBinary, Utf8, LargeUtf8), and Lists\n            data = _values === null || _values === void 0 ? void 0 : _values.flush(_offsets.last());\n        }\n        else { // Fixed-width primitives (Int, Float, Decimal, Time, Timestamp, Duration and Interval)\n            data = _values === null || _values === void 0 ? void 0 : _values.flush(length);\n        }\n        if (nullCount > 0) {\n            nullBitmap = _nulls === null || _nulls === void 0 ? void 0 : _nulls.flush(length);\n        }\n        const children = this.children.map((child) => child.flush());\n        this.clear();\n        return makeData({\n            type, length, nullCount,\n            children, 'child': children[0],\n            data, typeIds, nullBitmap, valueOffsets,\n        });\n    }\n    /**\n     * Finalize this `Builder`, and child builders if applicable.\n     * @returns {this} The finalized `Builder` instance.\n     */\n    finish() {\n        this.finished = true;\n        for (const child of this.children)\n            child.finish();\n        return this;\n    }\n    /**\n     * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.\n     * @returns {this} The cleared `Builder` instance.\n     */\n    clear() {\n        var _a, _b, _c, _d;\n        this.length = 0;\n        (_a = this._nulls) === null || _a === void 0 ? void 0 : _a.clear();\n        (_b = this._values) === null || _b === void 0 ? void 0 : _b.clear();\n        (_c = this._offsets) === null || _c === void 0 ? void 0 : _c.clear();\n        (_d = this._typeIds) === null || _d === void 0 ? void 0 : _d.clear();\n        for (const child of this.children)\n            child.clear();\n        return this;\n    }\n}\nBuilder.prototype.length = 1;\nBuilder.prototype.stride = 1;\nBuilder.prototype.children = null;\nBuilder.prototype.finished = false;\nBuilder.prototype.nullValues = null;\nBuilder.prototype._isValid = () => true;\n/** @ignore */\nexport class FixedWidthBuilder extends Builder {\n    constructor(opts) {\n        super(opts);\n        this._values = new DataBufferBuilder(this.ArrayType, 0, this.stride);\n    }\n    setValue(index, value) {\n        const values = this._values;\n        values.reserve(index - values.length + 1);\n        return super.setValue(index, value);\n    }\n}\n/** @ignore */\nexport class VariableWidthBuilder extends Builder {\n    constructor(opts) {\n        super(opts);\n        this._pendingLength = 0;\n        this._offsets = new OffsetsBufferBuilder(opts.type);\n    }\n    setValue(index, value) {\n        const pending = this._pending || (this._pending = new Map());\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.length);\n        this._pendingLength += (value instanceof MapRow) ? value[kKeys].length : value.length;\n        pending.set(index, value);\n    }\n    setValid(index, isValid) {\n        if (!super.setValid(index, isValid)) {\n            (this._pending || (this._pending = new Map())).set(index, undefined);\n            return false;\n        }\n        return true;\n    }\n    clear() {\n        this._pendingLength = 0;\n        this._pending = undefined;\n        return super.clear();\n    }\n    flush() {\n        this._flush();\n        return super.flush();\n    }\n    finish() {\n        this._flush();\n        return super.finish();\n    }\n    _flush() {\n        const pending = this._pending;\n        const pendingLength = this._pendingLength;\n        this._pendingLength = 0;\n        this._pending = undefined;\n        if (pending && pending.size > 0) {\n            this._flushPending(pending, pendingLength);\n        }\n        return this;\n    }\n}\n\n//# sourceMappingURL=builder.mjs.map\n"],"names":["Builder","options","type","nulls","strideForType","BitmapBufferBuilder","createIsValidFunction","Vector","size","_offsets","_values","_nulls","_typeIds","children","child","value","index","valid","name","data","typeIds","nullBitmap","valueOffsets","length","nullCount","makeData","_a","_b","_c","_d","FixedWidthBuilder","opts","DataBufferBuilder","values","VariableWidthBuilder","OffsetsBufferBuilder","pending","current","MapRow","kKeys","isValid","pendingLength"],"mappings":"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","x_google_ignoreList":[0]}