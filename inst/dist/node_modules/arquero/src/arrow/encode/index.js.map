{"version":3,"file":"index.js","sources":["../../../../../../../node_modules/arquero/src/arrow/encode/index.js"],"sourcesContent":["import { Table } from 'apache-arrow'; // eslint-disable-line no-unused-vars\n\nimport dataFromObjects from './data-from-objects';\nimport dataFromTable from './data-from-table';\nimport { scanArray, scanTable } from './scan';\nimport { table } from '../arrow-table';\nimport error from '../../util/error';\nimport isArray from '../../util/is-array';\nimport isFunction from '../../util/is-function';\n\n/**\n * Options for Arrow encoding.\n * @typedef {object} ArrowFormatOptions\n * @property {number} [limit=Infinity] The maximum number of rows to include.\n * @property {number} [offset=0] The row offset indicating how many initial\n *  rows to skip.\n * @property {string[]|(data: object) => string[]} [columns] Ordered list of\n *  column names to include. If function-valued, the function should accept\n *  a dataset as input and return an array of column name strings.\n * @property {object} [types] The Arrow data types to use. If specified,\n *  the input should be an object with column names for keys and Arrow data\n *  types for values. If a column type is not explicitly provided, type\n *  inference will be performed to guess an appropriate type.\n */\n\n/**\n * Create an Apache Arrow table for an input dataset.\n * @param {Array|object} data An input dataset to convert to Arrow format.\n *  If array-valued, the data should consist of an array of objects where\n *  each entry represents a row and named properties represent columns.\n *  Otherwise, the input data should be an Arquero table.\n * @param {ArrowFormatOptions} [options] Encoding options, including\n *  column data types.\n * @return {Table} An Apache Arrow Table instance.\n */\nexport default function(data, options = {}) {\n  const { types = {} } = options;\n  const { dataFrom, names, nrows, scan } = init(data, options);\n  const cols = {};\n  names.forEach(name => {\n    const col = dataFrom(data, name, nrows, scan, types[name]);\n    if (col.length !== nrows) {\n      error('Column length mismatch');\n    }\n    cols[name] = col;\n  });\n  const T = table();\n  return new T(cols);\n}\n\nfunction init(data, options) {\n  const { columns, limit = Infinity, offset = 0 } = options;\n  const names = isFunction(columns) ? columns(data)\n    : isArray(columns) ? columns\n    : null;\n  if (isArray(data)) {\n    return {\n      dataFrom: dataFromObjects,\n      names: names || Object.keys(data[0]),\n      nrows: Math.min(limit, data.length - offset),\n      scan: scanArray(data, limit, offset)\n    };\n  } else if (isTable(data)) {\n    return {\n      dataFrom: dataFromTable,\n      names: names || data.columnNames(),\n      nrows: Math.min(limit, data.numRows() - offset),\n      scan: scanTable(data, limit, offset)\n    };\n  } else {\n    error('Unsupported input data type');\n  }\n}\n\nfunction isTable(data) {\n  return data && isFunction(data.reify);\n}"],"names":[],"mappings":";;;;;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,gBAAQ,CAAC,IAAI,EAAE,OAAO,GAAG,EAAE,EAAE;AAC5C,EAAE,MAAM,EAAE,KAAK,GAAG,EAAE,EAAE,GAAG,OAAO,CAAC;AACjC,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAC/D,EAAE,MAAM,IAAI,GAAG,EAAE,CAAC;AAClB,EAAE,KAAK,CAAC,OAAO,CAAC,IAAI,IAAI;AACxB,IAAI,MAAM,GAAG,GAAG,QAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;AAC/D,IAAI,IAAI,GAAG,CAAC,MAAM,KAAK,KAAK,EAAE;AAC9B,MAAM,KAAK,CAAC,wBAAwB,CAAC,CAAC;AACtC,KAAK;AACL,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;AACrB,GAAG,CAAC,CAAC;AACL,EAAE,MAAM,CAAC,GAAG,KAAK,EAAE,CAAC;AACpB,EAAE,OAAO,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;AACrB,CAAC;AACD;AACA,SAAS,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE;AAC7B,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,GAAG,QAAQ,EAAE,MAAM,GAAG,CAAC,EAAE,GAAG,OAAO,CAAC;AAC5D,EAAE,MAAM,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC;AACnD,MAAM,OAAO,CAAC,OAAO,CAAC,GAAG,OAAO;AAChC,MAAM,IAAI,CAAC;AACX,EAAE,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;AACrB,IAAI,OAAO;AACX,MAAM,QAAQ,EAAE,eAAe;AAC/B,MAAM,KAAK,EAAE,KAAK,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC1C,MAAM,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AAClD,MAAM,IAAI,EAAE,SAAS,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC;AAC1C,KAAK,CAAC;AACN,GAAG,MAAM,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;AAC5B,IAAI,OAAO;AACX,MAAM,QAAQ,EAAE,aAAa;AAC7B,MAAM,KAAK,EAAE,KAAK,IAAI,IAAI,CAAC,WAAW,EAAE;AACxC,MAAM,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,EAAE,GAAG,MAAM,CAAC;AACrD,MAAM,IAAI,EAAE,SAAS,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC;AAC1C,KAAK,CAAC;AACN,GAAG,MAAM;AACT,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;AACzC,GAAG;AACH,CAAC;AACD;AACA,SAAS,OAAO,CAAC,IAAI,EAAE;AACvB,EAAE,OAAO,IAAI,IAAI,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACxC;;;;","x_google_ignoreList":[0]}