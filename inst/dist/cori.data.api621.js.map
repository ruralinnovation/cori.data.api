{"version":3,"file":"cori.data.api621.js","sources":["../../node_modules/arquero/src/table/bit-set.js"],"sourcesContent":["const ONE = 0x80000000;\nconst ALL = 0xFFFFFFFF;\n\n/**\n * Represent an indexable set of bits.\n */\nexport default class BitSet {\n  /**\n   * Instantiate a new BitSet instance.\n   * @param {number} size The number of bits.\n   */\n  constructor(size) {\n    this._size = size;\n    this._bits = new Uint32Array(Math.ceil(size / 32));\n  }\n\n  /**\n   * The number of bits.\n   * @return {number}\n   */\n  get length() {\n    return this._size;\n  }\n\n  /**\n   * The number of bits set to one.\n   * https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan\n   * @return {number}\n   */\n  count() {\n    const n = this._bits.length;\n    let count = 0;\n    for (let i = 0; i < n; ++i) {\n      for (let b = this._bits[i]; b; ++count) {\n        b &= b - 1;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Get the bit at a given index.\n   * @param {number} i The bit index.\n   */\n  get(i) {\n    return this._bits[i >> 5] & (ONE >>> i);\n  }\n\n  /**\n   * Set the bit at a given index to one.\n   * @param {number} i The bit index.\n   */\n  set(i) {\n    this._bits[i >> 5] |= (ONE >>> i);\n  }\n\n  /**\n   * Clear the bit at a given index to zero.\n   * @param {number} i The bit index.\n   */\n  clear(i) {\n    this._bits[i >> 5] &= ~(ONE >>> i);\n  }\n\n  /**\n   * Scan the bits, invoking a callback function with the index of\n   * each non-zero bit.\n   * @param {(i: number) => void} fn A callback function.\n   */\n  scan(fn) {\n    for (let i = this.next(0); i >= 0; i = this.next(i + 1)) {\n      fn(i);\n    }\n  }\n\n  /**\n   * Get the next non-zero bit starting from a given index.\n   * @param {number} i The bit index.\n   */\n  next(i) {\n    const bits = this._bits;\n    const n = bits.length;\n\n    let index = i >> 5;\n    let curr = bits[index] & (ALL >>> i);\n\n    for (; index < n; curr = bits[++index]) {\n      if (curr !== 0) {\n        return (index << 5) + Math.clz32(curr);\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * Return the index of the nth non-zero bit.\n   * @param {number} n The number of non-zero bits to advance.\n   * @return {number} The index of the nth non-zero bit.\n   */\n  nth(n) {\n    let i = this.next(0);\n    while (n-- && i >= 0) i = this.next(i + 1);\n    return i;\n  }\n\n  /**\n   * Negate all bits in this bitset.\n   * Modifies this BitSet in place.\n   * @return {this}\n   */\n  not() {\n    const bits = this._bits;\n    const n = bits.length;\n\n    // invert all bits\n    for (let i = 0; i < n; ++i) {\n      bits[i] = ~bits[i];\n    }\n\n    // unset extraneous trailing bits\n    const tail = this._size % 32;\n    if (tail) {\n      bits[n - 1] &= ONE >> (tail - 1);\n    }\n\n    return this;\n  }\n\n  /**\n   * Compute the logical AND of this BitSet and another.\n   * @param {BitSet} bitset The BitSet to combine with.\n   * @return {BitSet} This BitSet updated with the logical AND.\n   */\n  and(bitset) {\n    if (bitset) {\n      const a = this._bits;\n      const b = bitset._bits;\n      const n = a.length;\n\n      for (let i = 0; i < n; ++i) {\n        a[i] &= b[i];\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Compute the logical OR of this BitSet and another.\n   * @param {BitSet} bitset The BitSet to combine with.\n   * @return {BitSet} This BitSet updated with the logical OR.\n   */\n  or(bitset) {\n    if (bitset) {\n      const a = this._bits;\n      const b = bitset._bits;\n      const n = a.length;\n\n      for (let i = 0; i < n; ++i) {\n        a[i] |= b[i];\n      }\n    }\n    return this;\n  }\n}"],"names":["BitSet","size","n","count","i","b","fn","bits","index","curr","tail","bitset","a"],"mappings":";;;;;;AAMe,MAAMA,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAK1B,YAAYC,GAAM;AAChB,SAAK,QAAQA,GACb,KAAK,QAAQ,IAAI,YAAY,KAAK,KAAKA,IAAO,EAAE,CAAC;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,IAAI,SAAS;AACX,WAAO,KAAK;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,QAAQ;AACN,UAAMC,IAAI,KAAK,MAAM;AACrB,QAAIC,IAAQ;AACZ,aAASC,IAAI,GAAGA,IAAIF,GAAG,EAAEE;AACvB,eAASC,IAAI,KAAK,MAAMD,CAAC,GAAGC,GAAG,EAAEF;AAC/B,QAAAE,KAAKA,IAAI;AAGb,WAAOF;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,IAAIC,GAAG;AACL,WAAO,KAAK,MAAMA,KAAK,CAAC,IAAK,eAAQA;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,IAAIA,GAAG;AACL,SAAK,MAAMA,KAAK,CAAC,KAAM,eAAQA;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,MAAMA,GAAG;AACP,SAAK,MAAMA,KAAK,CAAC,KAAK,EAAE,eAAQA;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,KAAKE,GAAI;AACP,aAASF,IAAI,KAAK,KAAK,CAAC,GAAGA,KAAK,GAAGA,IAAI,KAAK,KAAKA,IAAI,CAAC;AACpD,MAAAE,EAAGF,CAAC;AAAA,EAEP;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,KAAKA,GAAG;AACN,UAAMG,IAAO,KAAK,OACZL,IAAIK,EAAK;AAEf,QAAIC,IAAQJ,KAAK,GACbK,IAAOF,EAAKC,CAAK,IAAK,eAAQJ;AAElC,WAAOI,IAAQN,GAAGO,IAAOF,EAAK,EAAEC,CAAK;AACnC,UAAIC,MAAS;AACX,gBAAQD,KAAS,KAAK,KAAK,MAAMC,CAAI;AAIzC,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,IAAIP,GAAG;AACL,QAAIE,IAAI,KAAK,KAAK,CAAC;AACnB,WAAOF,OAAOE,KAAK;AAAG,MAAAA,IAAI,KAAK,KAAKA,IAAI,CAAC;AACzC,WAAOA;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAM;AACJ,UAAMG,IAAO,KAAK,OACZL,IAAIK,EAAK;AAGf,aAASH,IAAI,GAAGA,IAAIF,GAAG,EAAEE;AACvB,MAAAG,EAAKH,CAAC,IAAI,CAACG,EAAKH,CAAC;AAInB,UAAMM,IAAO,KAAK,QAAQ;AAC1B,WAAIA,MACFH,EAAKL,IAAI,CAAC,KAAK,cAAQQ,IAAO,IAGzB;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,IAAIC,GAAQ;AACV,QAAIA,GAAQ;AACV,YAAMC,IAAI,KAAK,OACTP,IAAIM,EAAO,OACX,IAAIC,EAAE;AAEZ,eAAS,IAAI,GAAG,IAAI,GAAG,EAAE;AACvB,QAAAA,EAAE,CAAC,KAAKP,EAAE,CAAC;AAAA,IAEd;AACD,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,GAAGM,GAAQ;AACT,QAAIA,GAAQ;AACV,YAAMC,IAAI,KAAK,OACTP,IAAIM,EAAO,OACX,IAAIC,EAAE;AAEZ,eAAS,IAAI,GAAG,IAAI,GAAG,EAAE;AACvB,QAAAA,EAAE,CAAC,KAAKP,EAAE,CAAC;AAAA,IAEd;AACD,WAAO;AAAA,EACR;AACH;","x_google_ignoreList":[0]}