{"version":3,"file":"cori.data.api318.js","sources":["../../node_modules/arquero/src/table/column.js"],"sourcesContent":["import isFunction from '../util/is-function';\n\n/**\n * Class representing an array-backed data column.\n */\nexport default class Column {\n  /**\n   * Create a new column instance.\n   * @param {Array} data The backing array (or array-like object)\n   *  containing the column data.\n   */\n  constructor(data) {\n    this.data = data;\n  }\n\n  /**\n   * Get the length (number of rows) of the column.\n   * @return {number} The length of the column array.\n   */\n  get length() {\n    return this.data.length;\n  }\n\n  /**\n   * Get the column value at the given row index.\n   * @param {number} row The row index of the value to retrieve.\n   * @return {import('./table').DataValue} The column value.\n   */\n  get(row) {\n    return this.data[row];\n  }\n\n  /**\n   * Returns an iterator over the column values.\n   * @return {Iterator<object>} An iterator over column values.\n   */\n  [Symbol.iterator]() {\n    return this.data[Symbol.iterator]();\n  }\n}\n\n/**\n * Column interface. Any object that adheres to this interface\n * can be used as a data column within a {@link ColumnTable}.\n * @typedef {object} ColumnType\n * @property {number} length\n *  The length (number of rows) of the column.\n * @property {import('./table').ColumnGetter} get\n *  Column value getter.\n */\n\n/**\n * Column factory function interface.\n * @callback ColumnFactory\n * @param {*} data The input column data.\n * @return {ColumnType} A column instance.\n */\n\n/**\n * Create a new column from the given input data.\n * @param {any} data The backing column data. If the value conforms to\n *  the Column interface it is returned directly. If the value is an\n *  array, it will be wrapped in a new Column instance.\n * @return {ColumnType} A compatible column instance.\n */\nexport let defaultColumnFactory = function(data) {\n  return data && isFunction(data.get) ? data : new Column(data);\n};\n\n/**\n * Get or set the default factory function for instantiating table columns.\n * @param {ColumnFactory} [factory] The new default factory.\n * @return {ColumnFactory} The current default column factory.\n */\nexport function columnFactory(factory) {\n  return arguments.length\n    ? (defaultColumnFactory = factory)\n    : defaultColumnFactory;\n}"],"names":["Column","data","row","defaultColumnFactory","isFunction"],"mappings":";;;;;;;AAKe,MAAMA,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM1B,YAAYC,GAAM;AAChB,SAAK,OAAOA;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,IAAI,SAAS;AACX,WAAO,KAAK,KAAK;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,IAAIC,GAAK;AACP,WAAO,KAAK,KAAKA,CAAG;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,CAAC,OAAO,QAAQ,IAAI;AAClB,WAAO,KAAK,KAAK,OAAO,QAAQ,EAAC;AAAA,EAClC;AACH;AA0BU,IAACC,IAAuB,SAASF,GAAM;AAC/C,SAAOA,KAAQG,EAAWH,EAAK,GAAG,IAAIA,IAAO,IAAID,EAAOC,CAAI;AAC9D;","x_google_ignoreList":[0]}