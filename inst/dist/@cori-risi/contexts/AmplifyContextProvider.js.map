{"version":3,"file":"AmplifyContextProvider.js","sources":["../../../../lib/@cori-risi/contexts/AmplifyContextProvider.tsx"],"sourcesContent":["import * as React from \"react\";\nimport {\n    createContext,\n    ReactElement,\n    useEffect,\n    useState\n} from \"react\";\nimport {Amplify, ResourcesConfig} from \"aws-amplify\";\n\nimport amplifyconfig from './amplifyconfiguration.json';\n\nimport { User } from \"../models\";\n\nAmplify.configure(amplifyconfig);\n\n// let hasAuthSession = false;\n// let hasAuthUser = false;\n// let hasAuthClient = false;\n\ntype AmplifyContextType = {\n    // authenticated_user: User | null;\n    domain?: string;\n    region?: string;\n    identityPoolId?: string;\n    userPoolId?: string;\n    userPoolClientId?: string;\n    // TODO:\n    // updateUser: Function\n};\n\nconst initAmplifyContext: AmplifyContextType = {\n    // authenticated_user: null,\n    domain: undefined,\n    region: undefined,\n    identityPoolId: undefined,\n    userPoolId: undefined,\n    userPoolClientId: undefined,\n};\n\n/**\n * This is the configuration context for an Amplify app that uses authentication to connect\n * to the [CORI Data API](https://cori-data-api.ruralinnovation.us/){target=_blank}.\n */\nexport const AmplifyContext = createContext<AmplifyContextType | null>(initAmplifyContext);\n\n/**\n * This component provides the configuration context to an Amplify/React app, which is particularly useful to one that requires\n * authentication in order to access the [CORI Data API](https://cori-data-api.ruralinnovation.us/){target=_blank}.\n * Other than the `children` prop, the parameters are\n * [AWS Cognito](https://us-east-1.console.aws.amazon.com/cognito/v2/home?region=us-east-1){target=_blank}\n * values that are passed so that the Amplify configuration method can use the specified User pool\n * and Identity pool to authenticate users (including the `cori-risi-public` user).\n *\n * ```ts\n * import { AmplifyContextProvider } from \"@cori-risi/cori.data.api\";\n *\n * // ...\n *\n * <AmplifyContextProvider domain={import.meta.env.VITE_COGNITO_DOMAIN}\n *                         region={import.meta.env.VITE_REGION}\n *                         identityPoolId={import.meta.env.VITE_IDENTITY_POOL_ID}\n *                         userPoolId={import.meta.env.VITE_USER_POOL_ID}\n *                         userPoolClientId={import.meta.env.VITE_USER_POOL_CLIENT_ID} >\n *     <App />\n * </AmplifyContextProvider>\n * ```\n *\n *  @param props.domain s- domain for the Cognito Hosted UI and/or OAuth 2.0 endpoints\n *  @param props.region - AWS region where Cognito service is hosted\n *  @param props.identityPoolId - Cognito Identity pool ID\n *  @param props.userPoolId - Cognito User pool ID\n *  @param props.userPoolClientId - ACognito User pool App client ID (App clients are the user pool authentication resources attached to your app).\n */\nexport default function AmplifyContextProvider (props: {\n    children?: ReactElement<any, any> | ReactElement<any, any>[],\n    domain?: string,\n    region?: string,\n    identityPoolId?: string,\n    userPoolId?: string,\n    userPoolClientId?: string\n}) {\n\n    // const userState = useSelector(selectUser);\n    // const dispatch = useDispatch();\n\n    // const [ authenticated_user, setAuthenticatedUser ] = useState<User>(userState);\n\n    const [ state, setState ] = useState<AmplifyContextType | null>((!!props.domain\n        && !!props.region\n        && !!props.identityPoolId\n        && !!props.userPoolId\n        && !!props.userPoolClientId\n    ) ?\n        {\n            // authenticated_user: null,\n            ...props\n        } :\n        initAmplifyContext);\n\n    useEffect(() => {\n        if (!!props.domain\n            && !!props.region\n            && !!props.identityPoolId\n            && !!props.userPoolId\n            && !!props.userPoolClientId\n        ) {\n\n            const {\n                domain,\n                region,\n                identityPoolId,\n                userPoolId,\n                userPoolClientId\n            } = props;\n\n            console.log(\"Configuring Amplify context with props:\", {\n                domain,\n                region,\n                identityPoolId,\n                userPoolId,\n                userPoolClientId\n            });\n\n            // Ex. Auth data structure:\n            //     Auth: {\n            //         Cognito: {\n            //             userPoolClientId: \"5eusi16g0o2q1g1rr5ehgudodm\",\n            //             userPoolId: \"us-east-1_QeA4600FA\",\n            //             userPoolEndpoint: \"authcori.auth.us-east-1.amazoncognito.com\",\n            //             identityPoolId: \"us-east-1:2194a76a-fa3d-4c33-999e-e3c4b2b049ee\",\n            //             loginWith: { // Optional\n            //                 oauth: {\n            //                     domain: 'authcori.auth.us-east-1.amazoncognito.com',\n            //                         scopes: ['email', 'openid', 'profile'],\n            //                         redirectSignIn: [\"http://localhost:3000\", \"http://localhost:5173\", \"http://localhost:5174\"],\n            //                         redirectSignOut: [\"http://localhost:3000/\", \"http://localhost:5173/\", \"http://localhost:5174/\"],\n            //                         responseType: 'code',\n            //                 },\n            //                 username: true,\n            //                     email: true, // Optional\n            //                     phone: false, // Optional\n            //\n            //             },\n            //             // signUpVerificationMethod: \"\",\n            //             // userAttributes: \"\",\n            //             // mfa: \"\",\n            //             // passwordFormat: \"\",\n            //         },\n            //         region: config.region,\n            //         oauth: {\n            //             scope: ['email', 'openid', 'profile'],\n            //                 redirectSignIn: '',\n            //                 redirectSignOut: '',\n            //                 responseType: 'code',\n            //                 mandatorySignIn: true,\n            //         },\n            //     },\n\n            const aws_original_auth_config = {\n                \"Auth\": {\n                    \"domain\": domain,\n                    \"region\": region,\n                    \"identityPoolRegion\": region,\n                    \"identityPoolId\": identityPoolId,\n                    \"userPoolId\": userPoolId,\n                    // \"userPoolClientId\": userPoolClientId,\n                    \"userPoolWebClientId\": userPoolClientId,\n                    \"clientId\": userPoolClientId,\n                    \"oauth\": {\n                        \"domain\": domain,\n                        // \"scope\": [ \"email\", \"openid\", \"profile\" ],\n                        \"scope\": [\n                            \"openid\",\n                            \"email\",\n                            \"phone\",\n                            \"profile\",\n                            \"aws.cognito.signin.user.admin\"\n                        ],\n                        \"redirectSignIn\": window.location.protocol + \"//\" + window.location.hostname + ((!!window.location.port) ? \":\" + window.location.port : \"\"),\n                        \"redirectSignOut\": window.location.protocol + \"//\" + window.location.hostname + ((!!window.location.port) ? \":\" + window.location.port : \"\") + \"/\",\n                        \"responseType\": (\"code\" as \"code\")  // ... or \"token\", note that REFRESH token will only\n                                                            // be generated when the responseType is \"code\"\n                    }\n                }\n            };\n\n            Amplify.configure(({\n                // TODO: Why is this so ridiculous and how can these options be\n                //       specified exclusively in amplifyconfiguration.json ???\n                ...Amplify.getConfig(),\n                Auth: {\n                    ...Amplify.getConfig().Auth!,\n                    Cognito: {\n                        ...Amplify.getConfig().Auth!.Cognito!,\n                        ...aws_original_auth_config.Auth,\n                        loginWith: {\n                            ...Amplify.getConfig().Auth!.Cognito!.loginWith!,\n                            oauth: {\n                                ...Amplify.getConfig().Auth!.Cognito!.loginWith!.oauth!,\n                                ...aws_original_auth_config.Auth.oauth,\n                                redirectSignIn: [\n                                    aws_original_auth_config.Auth.oauth.redirectSignIn\n                                ],\n                                redirectSignOut: [\n                                    aws_original_auth_config.Auth.oauth.redirectSignOut\n                                ],\n                                responseType: (aws_original_auth_config.Auth.oauth.responseType as \"code\"),\n                                scopes: [\n                                    ...aws_original_auth_config.Auth.oauth.scope\n                                ]\n                            },\n                            username: true,\n                        },\n                        userPoolClientId: aws_original_auth_config.Auth.clientId\n                    }\n                }\n            }) as ResourcesConfig);\n\n            // const session: Promise<AuthSession> = fetchAuthSession();\n            //\n            // session\n            //     .then((sess) => {\n            //\n            //         if (!hasAuthSession) {\n            //\n            //             const tokens = sess.tokens!;\n            //\n            //             console.log(\"API tokens:\", tokens);\n            //\n            //             if (!!tokens && tokens.hasOwnProperty(\"idToken\")) {\n            //\n            //                 hasAuthSession = true;\n            //\n            //                 console.log(\"API Session is authenticated:\", hasAuthSession);\n            //                 console.log(\"API Session config:\", sess);\n            //\n            //                 console.log(\"idToken:\", tokens.idToken!);\n            //                 setState({\n            //                     // authenticated_user: authenticated_user,\n            //                     domain,\n            //                     region,\n            //                     identityPoolId,\n            //                     userPoolId,\n            //                     userPoolClientId,\n            //                     token: tokens.idToken!\n            //                 });\n            //\n            //                 const user: Promise<User> = getCurrentUser();\n            //\n            //\n            //\n            //\n            //                 user.then((u) => {\n            //                     if (!hasAuthUser) {\n            //\n            //                         // console.log(\"Initial userState:\", userState);\n            //\n            //                         hasAuthUser = true;\n            //\n            //                         console.log(\"API User is authenticated:\", hasAuthSession);\n            //                         console.log(\"API User:\", u);\n            //                         console.log(\"API User type:\", u.constructor.name);\n            //\n            //                         // function updateUser (u: User) {\n            //                         //     try {\n            //                         //         if (!!u.userId) {\n            //                         //             console.log(\"Update userId:\", u.userId);\n            //                         //             dispatch(updateUserId(u.userId));\n            //                         //         }\n            //                         //         if (!!u.userId && !!u.username) {\n            //                         //             console.log(\"Update username:\", u.username);\n            //                         //             dispatch(updateUserName(u.username));\n            //                         //         }\n            //                         //\n            //                         //         if (!!tokens.idToken) {\n            //                         //             console.log(\"Update user tokens:\", tokens);\n            //                         //             dispatch(updateUserTokens(JSON.stringify(tokens)));\n            //                         //         }\n            //                         //\n            //                         //     } catch (e: any) {\n            //                         //         console.error(e);\n            //                         //     }\n            //                         //\n            //                         //     setState({\n            //                         //         authenticated_user: u,\n            //                         //         domain,\n            //                         //         region,\n            //                         //         identityPoolId,\n            //                         //         userPoolId,\n            //                         //         userPoolClientId,\n            //                         //         token: tokens.idToken!\n            //                         //     });\n            //                         //\n            //                         //     setAuthenticatedUser(u);\n            //                         // }\n            //\n            //                         // updateUser(u);\n            //                     }\n            //                 });\n            //             }\n            //         }\n            //     });\n\n            setState({\n                // authenticated_user: authenticated_user,\n                domain,\n                region,\n                identityPoolId,\n                userPoolId,\n                userPoolClientId\n            });\n        }\n\n    }, []);\n\n\n    return (<>\n        <AmplifyContext.Provider value={state}>\n            {props.children}\n        </AmplifyContext.Provider>\n    </>);\n\n}\n"],"names":[],"mappings":"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"}