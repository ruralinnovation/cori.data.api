{"version":3,"file":"cori.data.api519.js","sources":["../../node_modules/arquero/src/engine/join-filter.js"],"sourcesContent":["import { rowLookup } from './join/lookup';\nimport BitSet from '../table/bit-set';\nimport isArray from '../util/is-array';\n\nexport default function(tableL, tableR, predicate, options = {}) {\n  // calculate semi-join filter mask\n  const filter = new BitSet(tableL.totalRows());\n  const join = isArray(predicate) ? hashSemiJoin : loopSemiJoin;\n  join(filter, tableL, tableR, predicate);\n\n  // if anti-join, negate the filter\n  if (options.anti) {\n    filter.not().and(tableL.mask());\n  }\n\n  return tableL.create({ filter });\n}\n\nfunction hashSemiJoin(filter, tableL, tableR, [keyL, keyR]) {\n  // build lookup table\n  const lut = rowLookup(tableR, keyR);\n\n  // scan table, update filter with matches\n  tableL.scan((rowL, data) => {\n    const rowR = lut.get(keyL(rowL, data));\n    if (rowR >= 0) filter.set(rowL);\n  });\n}\n\nfunction loopSemiJoin(filter, tableL, tableR, predicate) {\n  const nL = tableL.numRows();\n  const nR = tableR.numRows();\n  const dataL = tableL.data();\n  const dataR = tableR.data();\n\n  if (tableL.isFiltered() || tableR.isFiltered()) {\n    // use indices as at least one table is filtered\n    const idxL = tableL.indices(false);\n    const idxR = tableR.indices(false);\n    for (let i = 0; i < nL; ++i) {\n      const rowL = idxL[i];\n      for (let j = 0; j < nR; ++j) {\n        if (predicate(rowL, dataL, idxR[j], dataR)) {\n          filter.set(rowL);\n          break;\n        }\n      }\n    }\n  } else {\n    // no filters, enumerate row indices directly\n    for (let i = 0; i < nL; ++i) {\n      for (let j = 0; j < nR; ++j) {\n        if (predicate(i, dataL, j, dataR)) {\n          filter.set(i);\n          break;\n        }\n      }\n    }\n  }\n}\n\n// export default function(tableL, tableR, predicate, options = {}) {\n//   const filter = new BitSet(tableL.totalRows());\n//   const nL = tableL.numRows();\n//   const nR = tableR.numRows();\n//   const dataL = tableL.data();\n//   const dataR = tableR.data();\n\n//   if (tableL.isFiltered() || tableR.isFiltered()) {\n//     // use indices as at least one table is filtered\n//     const idxL = tableL.indices(false);\n//     const idxR = tableR.indices(false);\n//     for (let i = 0; i < nL; ++i) {\n//       const rowL = idxL[i];\n//       for (let j = 0; j < nR; ++j) {\n//         if (predicate(rowL, dataL, idxR[j], dataR)) {\n//           filter.set(rowL);\n//           break;\n//         }\n//       }\n//     }\n//   } else {\n//     // no filters, enumerate row indices directly\n//     for (let i = 0; i < nL; ++i) {\n//       for (let j = 0; j < nR; ++j) {\n//         if (predicate(i, dataL, j, dataR)) {\n//           filter.set(i);\n//           break;\n//         }\n//       }\n//     }\n//   }\n\n//   // if anti-join, negate the filter\n//   if (options.anti) {\n//     filter.not().and(tableL.mask());\n//   }\n\n//   return tableL.create({ filter });\n// }"],"names":["_join_filter","tableL","tableR","predicate","options","filter","BitSet","isArray","hashSemiJoin","loopSemiJoin","keyL","keyR","lut","rowLookup","rowL","data","nL","nR","dataL","dataR","idxL","idxR","i","j"],"mappings":";;;;;;;;;AAIe,SAAQA,EAACC,GAAQC,GAAQC,GAAWC,IAAU,CAAA,GAAI;AAE/D,QAAMC,IAAS,IAAIC,EAAOL,EAAO,UAAW,CAAA;AAE5C,UADaM,EAAQJ,CAAS,IAAIK,IAAeC,GAC5CJ,GAAQJ,GAAQC,GAAQC,CAAS,GAGlCC,EAAQ,QACVC,EAAO,IAAG,EAAG,IAAIJ,EAAO,KAAM,CAAA,GAGzBA,EAAO,OAAO,EAAE,QAAAI,EAAQ,CAAA;AACjC;AAEA,SAASG,EAAaH,GAAQJ,GAAQC,GAAQ,CAACQ,GAAMC,CAAI,GAAG;AAE1D,QAAMC,IAAMC,EAAUX,GAAQS,CAAI;AAGlC,EAAAV,EAAO,KAAK,CAACa,GAAMC,MAAS;AAE1B,IADaH,EAAI,IAAIF,EAAKI,GAAMC,CAAI,CAAC,KACzB,KAAGV,EAAO,IAAIS,CAAI;AAAA,EAClC,CAAG;AACH;AAEA,SAASL,EAAaJ,GAAQJ,GAAQC,GAAQC,GAAW;AACvD,QAAMa,IAAKf,EAAO,WACZgB,IAAKf,EAAO,WACZgB,IAAQjB,EAAO,QACfkB,IAAQjB,EAAO;AAErB,MAAID,EAAO,WAAU,KAAMC,EAAO,WAAU,GAAI;AAE9C,UAAMkB,IAAOnB,EAAO,QAAQ,EAAK,GAC3BoB,IAAOnB,EAAO,QAAQ,EAAK;AACjC,aAASoB,IAAI,GAAGA,IAAIN,GAAI,EAAEM,GAAG;AAC3B,YAAMR,IAAOM,EAAKE,CAAC;AACnB,eAASC,IAAI,GAAGA,IAAIN,GAAI,EAAEM;AACxB,YAAIpB,EAAUW,GAAMI,GAAOG,EAAKE,CAAC,GAAGJ,CAAK,GAAG;AAC1C,UAAAd,EAAO,IAAIS,CAAI;AACf;AAAA,QACD;AAAA,IAEJ;AAAA,EACL;AAEI,aAASQ,IAAI,GAAGA,IAAIN,GAAI,EAAEM;AACxB,eAASC,IAAI,GAAGA,IAAIN,GAAI,EAAEM;AACxB,YAAIpB,EAAUmB,GAAGJ,GAAOK,GAAGJ,CAAK,GAAG;AACjC,UAAAd,EAAO,IAAIiB,CAAC;AACZ;AAAA,QACD;AAIT;","x_google_ignoreList":[0]}