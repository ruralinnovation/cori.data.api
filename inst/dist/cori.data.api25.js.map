{"version":3,"file":"cori.data.api25.js","sources":["../../lib/@cori-risi/contexts/CDAContextWrapper.tsx"],"sourcesContent":["// react-context.js\nimport { createContext, useEffect, useState, useRef } from 'react';\nimport { createRoot, Root } from 'react-dom/client';\n\ninterface CDAContextType {\n    root: Root | null,\n    useRef: typeof useRef\n}\n\nconst defaultCDAContext: CDAContextType = {\n    root: null,\n    useRef: useRef\n};\n\nexport const CDAContext = createContext<CDAContextType>(defaultCDAContext);\n\nexport default function CDAContextWrapper({ children }: any) {\n    const [ context, setContext ] = useState<CDAContextType>(defaultCDAContext);\n\n    useEffect(() => {\n        if (!context.root) {\n            console.log(\"UPDATE CDAContextWrapper root!\")\n            setContext({\n                root: createRoot(document.getElementById('root')!),\n                useRef: useRef\n            });\n        }\n    // }, [context]);\n    }, []);\n\n    return (\n        <CDAContext.Provider value={context}>\n            {children}\n        </CDAContext.Provider>\n    );\n}\n\nexport function wrapComponent<T>(WrappedComponent: T) {\n    return () => {\n        return (\n            <CDAContextWrapper>\n                {WrappedComponent}\n            </CDAContextWrapper>\n        );\n    };\n}\n"],"names":["defaultCDAContext","useRef","CDAContext","createContext","CDAContextWrapper","children","context","setContext","useState","useEffect","createRoot"],"mappings":";;;;;;;;;AASA,MAAMA,IAAoC;AAAA,EACtC,MAAM;AAAA,EAAA,QACNC,EAAA;AACJ,GAEaC,IAAaC,gBAA8BH,CAAiB;AAEjD,SAAAI,EAAkB,EAAE,UAAAC,KAAiB;AACzD,QAAM,CAAEC,GAASC,CAAW,IAAIC,WAAyBR,CAAiB;AAE1ES,SAAAA,EAAAA,UAAU,MAAM;AACR,IAACH,EAAQ,SACT,QAAQ,IAAI,gCAAgC,GACjCC,EAAA;AAAA,MACP,MAAMG,EAAW,SAAS,eAAe,MAAM,CAAE;AAAA,MAAA,QACjDT,EAAA;AAAA,IAAA,CACH;AAAA,EAGT,GAAG,CAAE,CAAA,yBAGAC,EAAW,UAAX,EAAoB,OAAOI,GACvB,UAAAD,EACL,CAAA;AAER;"}