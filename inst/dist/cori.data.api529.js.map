{"version":3,"file":"cori.data.api529.js","sources":["../../node_modules/arquero/src/verbs/util/join-keys.js"],"sourcesContent":["import parseKey from './parse-key';\nimport error from '../../util/error';\nimport intersect from '../../util/intersect';\nimport isArray from '../../util/is-array';\nimport isString from '../../util/is-string';\n\nexport function inferKeys(tableL, tableR, on) {\n  if (!on) {\n    // perform natural join if join condition not provided\n    const isect = intersect(tableL.columnNames(), tableR.columnNames());\n    if (!isect.length) error('Natural join requires shared column names.');\n    on = [isect, isect];\n  } else if (isString(on)) {\n    on = [on, on];\n  } else if (isArray(on) && on.length === 1) {\n    on = [on[0], on[0]];\n  }\n\n  return on;\n}\n\nexport function keyPredicate(tableL, tableR, onL, onR) {\n  if (onL.length !== onR.length) {\n    error('Mismatched number of join keys');\n  }\n  return [\n    parseKey('join', tableL, onL),\n    parseKey('join', tableR, onR)\n  ];\n}"],"names":["inferKeys","tableL","tableR","on","isString","isArray","isect","intersect","error","keyPredicate","onL","onR","parseKey"],"mappings":";;;;;;;;;;;AAMO,SAASA,EAAUC,GAAQC,GAAQC,GAAI;AAC5C,MAAKA;AAKE,IAAIC,EAASD,CAAE,IACpBA,IAAK,CAACA,GAAIA,CAAE,IACHE,EAAQF,CAAE,KAAKA,EAAG,WAAW,MACtCA,IAAK,CAACA,EAAG,CAAC,GAAGA,EAAG,CAAC,CAAC;AAAA,OARX;AAEP,UAAMG,IAAQC,EAAUN,EAAO,YAAW,GAAIC,EAAO,YAAW,CAAE;AAClE,IAAKI,EAAM,UAAQE,EAAM,4CAA4C,GACrEL,IAAK,CAACG,GAAOA,CAAK;AAAA,EACtB;AAME,SAAOH;AACT;AAEO,SAASM,EAAaR,GAAQC,GAAQQ,GAAKC,GAAK;AACrD,SAAID,EAAI,WAAWC,EAAI,UACrBH,EAAM,gCAAgC,GAEjC;AAAA,IACLI,EAAS,QAAQX,GAAQS,CAAG;AAAA,IAC5BE,EAAS,QAAQV,GAAQS,CAAG;AAAA,EAChC;AACA;","x_google_ignoreList":[0]}