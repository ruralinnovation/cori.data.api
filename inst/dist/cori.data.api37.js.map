{"version":3,"file":"cori.data.api37.js","sources":["../../node_modules/html-to-image/es/index.js"],"sourcesContent":["import { cloneNode } from './clone-node';\nimport { embedImages } from './embed-images';\nimport { applyStyle } from './apply-style';\nimport { embedWebFonts, getWebFontCSS } from './embed-webfonts';\nimport { getImageSize, getPixelRatio, createImage, canvasToBlob, nodeToDataURL, checkCanvasDimensions, } from './util';\nexport async function toSvg(node, options = {}) {\n    const { width, height } = getImageSize(node, options);\n    const clonedNode = (await cloneNode(node, options, true));\n    await embedWebFonts(clonedNode, options);\n    await embedImages(clonedNode, options);\n    applyStyle(clonedNode, options);\n    const datauri = await nodeToDataURL(clonedNode, width, height);\n    return datauri;\n}\nexport async function toCanvas(node, options = {}) {\n    const { width, height } = getImageSize(node, options);\n    const svg = await toSvg(node, options);\n    const img = await createImage(svg);\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n    const ratio = options.pixelRatio || getPixelRatio();\n    const canvasWidth = options.canvasWidth || width;\n    const canvasHeight = options.canvasHeight || height;\n    canvas.width = canvasWidth * ratio;\n    canvas.height = canvasHeight * ratio;\n    if (!options.skipAutoScale) {\n        checkCanvasDimensions(canvas);\n    }\n    canvas.style.width = `${canvasWidth}`;\n    canvas.style.height = `${canvasHeight}`;\n    if (options.backgroundColor) {\n        context.fillStyle = options.backgroundColor;\n        context.fillRect(0, 0, canvas.width, canvas.height);\n    }\n    context.drawImage(img, 0, 0, canvas.width, canvas.height);\n    return canvas;\n}\nexport async function toPixelData(node, options = {}) {\n    const { width, height } = getImageSize(node, options);\n    const canvas = await toCanvas(node, options);\n    const ctx = canvas.getContext('2d');\n    return ctx.getImageData(0, 0, width, height).data;\n}\nexport async function toPng(node, options = {}) {\n    const canvas = await toCanvas(node, options);\n    return canvas.toDataURL();\n}\nexport async function toJpeg(node, options = {}) {\n    const canvas = await toCanvas(node, options);\n    return canvas.toDataURL('image/jpeg', options.quality || 1);\n}\nexport async function toBlob(node, options = {}) {\n    const canvas = await toCanvas(node, options);\n    const blob = await canvasToBlob(canvas);\n    return blob;\n}\nexport async function getFontEmbedCSS(node, options = {}) {\n    return getWebFontCSS(node, options);\n}\n//# sourceMappingURL=index.js.map"],"names":["toSvg","node","options","width","height","getImageSize","clonedNode","cloneNode","embedWebFonts","embedImages","applyStyle","nodeToDataURL","toCanvas","svg","img","createImage","canvas","context","ratio","getPixelRatio","canvasWidth","canvasHeight","checkCanvasDimensions","toPng"],"mappings":";;;;;;;;;;;AAKO,eAAeA,EAAMC,GAAMC,IAAU,IAAI;AAC5C,QAAM,EAAE,OAAAC,GAAO,QAAAC,EAAM,IAAKC,EAAaJ,GAAMC,CAAO,GAC9CI,IAAc,MAAMC,EAAUN,GAAMC,GAAS,EAAI;AACvD,eAAMM,EAAcF,GAAYJ,CAAO,GACvC,MAAMO,EAAYH,GAAYJ,CAAO,GACrCQ,EAAWJ,GAAYJ,CAAO,GACd,MAAMS,EAAcL,GAAYH,GAAOC,CAAM;AAEjE;AACO,eAAeQ,EAASX,GAAMC,IAAU,IAAI;AAC/C,QAAM,EAAE,OAAAC,GAAO,QAAAC,EAAM,IAAKC,EAAaJ,GAAMC,CAAO,GAC9CW,IAAM,MAAMb,EAAMC,GAAMC,CAAO,GAC/BY,IAAM,MAAMC,EAAYF,CAAG,GAC3BG,IAAS,SAAS,cAAc,QAAQ,GACxCC,IAAUD,EAAO,WAAW,IAAI,GAChCE,IAAQhB,EAAQ,cAAciB,EAAa,GAC3CC,IAAclB,EAAQ,eAAeC,GACrCkB,IAAenB,EAAQ,gBAAgBE;AAC7C,SAAAY,EAAO,QAAQI,IAAcF,GAC7BF,EAAO,SAASK,IAAeH,GAC1BhB,EAAQ,iBACToB,EAAsBN,CAAM,GAEhCA,EAAO,MAAM,QAAQ,GAAGI,CAAW,IACnCJ,EAAO,MAAM,SAAS,GAAGK,CAAY,IACjCnB,EAAQ,oBACRe,EAAQ,YAAYf,EAAQ,iBAC5Be,EAAQ,SAAS,GAAG,GAAGD,EAAO,OAAOA,EAAO,MAAM,IAEtDC,EAAQ,UAAUH,GAAK,GAAG,GAAGE,EAAO,OAAOA,EAAO,MAAM,GACjDA;AACX;AAOO,eAAeO,EAAMtB,GAAMC,IAAU,IAAI;AAE5C,UADe,MAAMU,EAASX,GAAMC,CAAO,GAC7B;AAClB;","x_google_ignoreList":[0]}