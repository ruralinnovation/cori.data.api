{"version":3,"file":"LineChart.js","sources":["../../../../lib/@cori-risi/components/LineChart.tsx"],"sourcesContent":["// TODO: Basically any thing with useRef<SVGSVGElement> is unusable atm\nimport React, { useRef, useEffect, useCallback, useState } from 'react';\nimport * as d3 from 'd3';\nimport * as d3textwrap from \"d3-textwrap\";\n\nimport { ERCData, MetricMetadata } from '../interfaces';\n// import {\n//   applyCORIStyles,\n//   getMaxYLabelWidth,\n//   saveChartAsPNG,\n//   getGEOIDColorRange\n// } from '../utils';\n// import { chartStyle } from '../utils/constants';\n\nimport CategoricalLegend from './CategoricalLegend';\n\nimport style from \"./styles/Chart.module.css\";\n\ninterface LineChartProps {\n  primary_geoid: string,\n  metric: string,\n  data: ERCData[];\n  metadata: MetricMetadata,\n  width: number;\n  height: number;\n}\n\nexport default function LineChart ({ primary_geoid, metric, data, metadata, width, height }: LineChartProps) {\n\n  const primary_dta = data.filter(d => d.geoid === primary_geoid && d.metric === metric);\n  const has_valid_data = !primary_dta.every(d => d.value === null);\n\n  const ref = useRef<HTMLDivElement>(null);\n  const svgRef = useRef<SVGSVGElement>(null);\n\n  const [colorScaleDomain, setColorScaleDomain] = useState<string[]>([]);\n  const [colorScaleRange, setColorScaleRange] = useState<unknown[]>([]);\n\n  // TODO: WHY DOES saveChartAsPNG and other utility functions BREAK the library build????\n  const onButtonClick = useCallback(() => {\n      console.log(`saveChartAsPNG(${ref}, ${metric + \".png\"})`);\n  }, [ref, metric]);\n\n  useEffect(() => {\n\n    if (!svgRef.current) return;\n\n    // const margin = {...chartStyle.margin};\n    const tick_number = Math.floor(width / 225);\n    const y_axis_tick_size = 8;\n\n    // const svg = d3.select(svgRef.current)\n    //   .attr(\"viewBox\", `0 0 ${width} ${height}`)\n    //   .attr(\"preserveAspectRatio\", \"xMidYMid meet\");\n    //\n    // const xScale = d3\n    //   .scaleLinear()\n    //   .domain([d3.min(data, (d) => (+d.year))!, d3.max(data, (d) => (+d.year))! ])\n    //   .nice()\n    //   // .range([margin.left, width - margin.right]);\n    //\n    // const yScale = d3\n    //   .scaleLinear()\n    //   .domain([\n    //     d3.max(data, (d) => d.value === null? undefined: (+d.value))!,\n    //     d3.min(data, (d) => d.value === null? undefined: (+d.value))!\n    //   ])\n    //   .nice()\n    //   // .range([margin.top, height - margin.bottom]);\n    //\n    // const max_year: number = d3.max(data, (d) => +d.year) as number;\n    // const sortedGEOIDs = [...data]\n    //   .filter(d => +d.year === max_year)\n    //   .sort((a, b) => { // b.value - a.value\n    //     if (a.value === null && b.value === null) return 0;\n    //     if (a.value === null) return 1; // Treat null values as greater (will move to end)\n    //     if (b.value === null) return -1; // Treat null values as greater (will move to end)\n    //     return +b.value - +a.value;\n    //   });\n    //\n    // const geoid_domain = [...new Set(sortedGEOIDs.map(d => d.geoid.toString()))];\n    // const colorScale = d3.scaleOrdinal()\n    //   .domain(geoid_domain)\n    //   // .range(geoid_domain.map(getGEOIDColorRange));\n    //\n    // setColorScaleDomain(colorScale.domain());\n    // setColorScaleRange(colorScale.range());\n    //\n    // let xAxis = d3.axisBottom<number>(xScale); // later is reassigned\n    // const yAxis = d3.axisLeft<number>(yScale)\n    //   .ticks(tick_number, metadata.yFormat)\n    //   .tickSize(y_axis_tick_size);\n    //\n    // svg\n    //   .select<SVGGElement>('.x-axis')\n    //   // .attr('transform', `translate(0, ${height - margin.bottom})`)\n    //   // .call(xAxis);\n    //\n    // svg.select<SVGGElement>('.y-axis')\n    //   // .attr(\"transform\", `translate(${margin.left},0)`)\n    //   .call(yAxis)\n    //   .call(g => g.select(\".domain\").remove());\n    //\n    // // style y-axis text before calculating widths\n    // svg.selectAll(\".y-axis text\")\n    //   // .style(\"font-family\", chartStyle.tickFontFamily)\n    //   // .style(\"font-size\", chartStyle.tickFontSize)\n    //   // .style(\"color\", chartStyle.tickFontColor)\n    //\n    // // const maxw = getMaxYLabelWidth(svg);\n    //\n    // // // If we need to wrap labels\n    // // if (maxw > 200) {\n    // //\n    // //   // wrap the text\n    // //   const textwrap_dimensions = {height: 20, width: 200};\n    // //   const y_wrap = d3textwrap.textwrap().bounds(textwrap_dimensions);\n    // //   svg.selectAll(\".y-axis text\")\n    // //     .call(y_wrap)\n    // //     .call(g => g.selectAll('foreignObject')\n    // //       .style(\"transform\", 'translate(-' + textwrap_dimensions.width + 'px, -' + .5 + 'rem)')\n    // //     );\n    // //\n    // //   xScale.range([margin.left, width - margin.right]);\n    // //   xAxis = d3\n    // //     .axisBottom<number>(xScale)\n    // //     .tickSize(chartStyle.xTickSize)\n    // //     .ticks(tick_number, metadata.xFormat);\n    // //\n    // //   svg\n    // //     .select<SVGGElement>('.x-axis')\n    // //     .attr('transform', `translate(0, ${height - margin.bottom})`)\n    // //     .call(xAxis);\n    // //\n    // //   svg.select<SVGGElement>('.y-axis')\n    // //     .attr(\"transform\", `translate(${margin.left},0)`);\n    // //\n    // // }\n    // // else {\n    //\n    //   // margin.left = maxw + y_axis_tick_size;\n    //\n    //   // xScale.range([margin.left, width - margin.right]);\n    //   xAxis = d3\n    //     .axisBottom<number>(xScale)\n    //     .tickSize(12)\n    //     .ticks(tick_number, metadata.xFormat);\n    //\n    //   svg\n    //     .select<SVGGElement>('.x-axis')\n    //     // .attr('transform', `translate(0, ${height - margin.bottom})`)\n    //     .call(xAxis);\n    //\n    //   svg.select<SVGGElement>('.y-axis')\n    //     // .attr(\"transform\", `translate(${margin.left},0)`);\n    //\n    // // }\n    //\n    // // Group data by geoid\n    // const sortedData = [...data].sort((a, b) => a.year - b.year);\n    // const nestedData = d3.group(sortedData, d => d.geoid);\n    //\n    // // Define line generator\n    // const line = d3.line<ERCData>()\n    //   .defined(d => d.value !== null)\n    //   .x(d => xScale(+d.year))\n    //   .y(d => yScale(+d.value!));\n    //\n    // // Add gridlines\n    // const GridLine = () => d3.axisLeft(yScale);\n    // svg.selectAll(\".grid\").remove();\n    // svg\n    //   .append(\"g\")\n    //     .attr(\"class\", \"grid\")\n    //   .call(GridLine().ticks(tick_number))\n    //   .call(g => g.select(\".domain\").remove())\n    //   .call(g => g.selectAll(\".tick line\")\n    //       // .attr(\"x1\", margin.left)\n    //       // .attr(\"x2\", width - margin.right)\n    //   );\n    //\n    // svg.selectAll(\".data-lines\").remove();\n    // nestedData.forEach((d) => {\n    //   svg\n    //     .append(\"path\")\n    //     .attr(\"class\", \"data-lines\")\n    //     .datum(d)\n    //     .attr(\"fill\", \"none\")\n    //     .attr(\"stroke\", function(d) {\n    //       const line_color: string | unknown = colorScale(d[0].geoid);\n    //       if (typeof line_color === \"string\")\n    //         return line_color;\n    //\n    //       return \"black\";\n    //     })\n    //     // .attr(\"stroke-width\", chartStyle.strokeWidth)\n    //     // .attr(\"stroke-opacity\", chartStyle.strokeOpacity)\n    //     .attr(\"d\", line);\n    // });\n\n    // nestedData.forEach((d) => {\n    //   svg\n    //   .append(\"g\")\n    //   .selectAll(\"dot\")\n    //   .data(d)\n    //   .enter()\n    //   .append(\"circle\")\n    //     .attr(\"cx\", function(d) { return xScale(+d.year) } )\n    //     .attr(\"cy\", function(d) { return yScale(+d.value) } )\n    //     .attr(\"r\", 5)\n    //     .attr(\"fill\", \"#69b3a2\")\n    // });\n\n    // svg.call(applyCORIStyles);\n\n  }, [data, width, height, metadata]);\n\n  return (\n    <div className={style[\"chart-wrapper\"]}>\n    {/*  {data.length > 0 && (*/}\n    {/*    <>*/}\n    {/*      <div ref={ref} className={style[\"chart\"]} style={{maxWidth: \"900px\", margin: \"0 auto\", padding: \"5px 20px\"}}>*/}\n    {/*        {*/}\n    {/*          has_valid_data === false && (*/}\n    {/*            <div className={style[\"no-data\"]}>*/}\n    {/*              <p>Note: Chart data is not available for the selected primary county</p>*/}\n    {/*            </div>*/}\n    {/*          )*/}\n    {/*        }*/}\n    {/*        <h3>{metadata.title}</h3>*/}\n    {/*        {metadata.subtitle.length > 0? <p><em>{metadata.subtitle}</em></p>: <></>}*/}\n            <CategoricalLegend domain_names={colorScaleDomain.map(c => data.filter(d => d.geoid === c).map(d => d.name)[0])} domain={colorScaleDomain} range={colorScaleRange} />\n    {/*        <svg ref={svgRef} style={{width: \"100%\"}}>*/}\n    {/*          <g className=\"x-axis\" />*/}\n    {/*          <g className=\"y-axis\" />*/}\n    {/*        </svg>*/}\n    {/*        <p className={style['caption']}>{metadata[\"caption\"]}</p>*/}\n    {/*      </div>*/}\n    {/*      <button className={style[\"download-chart\"]} onClick={onButtonClick}>Download image</button>*/}\n    {/*  </>*/}\n    {/*  )*/}\n    {/*}*/}\n    </div>\n  );\n};\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AA2Bc,SAAU,SAAS,CAAE,EAAE,aAAa,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAkB,EAAA;IAEzG,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,KAAK,aAAa,IAAI,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC;AACvF,IAAuB,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,KAAK,IAAI,EAAE;AAEjE,IAAA,MAAM,GAAG,GAAG,MAAM,CAAiB,IAAI,CAAC,CAAC;AACzC,IAAA,MAAM,MAAM,GAAG,MAAM,CAAgB,IAAI,CAAC,CAAC;IAE3C,MAAM,CAAC,gBAAgB,EAAE,mBAAmB,CAAC,GAAG,QAAQ,CAAW,EAAE,CAAC,CAAC;IACvE,MAAM,CAAC,eAAe,EAAE,kBAAkB,CAAC,GAAG,QAAQ,CAAY,EAAE,CAAC,CAAC;;AAGtE,IAAsB,WAAW,CAAC,MAAK;QACnC,OAAO,CAAC,GAAG,CAAC,CAAkB,eAAA,EAAA,GAAG,CAAK,EAAA,EAAA,MAAM,GAAG,MAAM,CAAG,CAAA,CAAA,CAAC,CAAC;AAC9D,KAAC,EAAE,CAAC,GAAG,EAAE,MAAM,CAAC,EAAE;IAElB,SAAS,CAAC,MAAK;QAEb,IAAI,CAAC,MAAM,CAAC,OAAO;YAAE,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA0K7B,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;AAEpC,IAAA,QACE,KAAK,CAAA,aAAA,CAAA,KAAA,EAAA,EAAA,SAAS,EAAE,KAAK,CAAC,eAAe,CAAC,EAAA;QAa9B,KAAC,CAAA,aAAA,CAAA,iBAAiB,EAAC,EAAA,YAAY,EAAE,gBAAgB,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,gBAAgB,EAAE,KAAK,EAAE,eAAe,EAAA,CAAI,CAWvK,EACN;AACJ;;;;"}