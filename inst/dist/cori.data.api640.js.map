{"version":3,"file":"cori.data.api640.js","sources":["../../node_modules/apache-arrow/fb/dictionary-encoding.mjs"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { DictionaryKind } from './dictionary-kind.mjs';\nimport { Int } from './int.mjs';\nexport class DictionaryEncoding {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsDictionaryEncoding(bb, obj) {\n        return (obj || new DictionaryEncoding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsDictionaryEncoding(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new DictionaryEncoding()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    /**\n     * The known dictionary id in the application where this data is used. In\n     * the file or streaming formats, the dictionary ids are found in the\n     * DictionaryBatch messages\n     */\n    id() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt64(this.bb_pos + offset) : BigInt('0');\n    }\n    /**\n     * The dictionary indices are constrained to be non-negative integers. If\n     * this field is null, the indices must be signed int32. To maximize\n     * cross-language compatibility and performance, implementations are\n     * recommended to prefer signed integer types over unsigned integer types\n     * and to avoid uint64 indices unless they are required by an application.\n     */\n    indexType(obj) {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? (obj || new Int()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n    }\n    /**\n     * By default, dictionaries are not ordered, or the order does not have\n     * semantic meaning. In some statistical, applications, dictionary-encoding\n     * is used to represent ordered categorical data, and we provide a way to\n     * preserve that metadata here\n     */\n    isOrdered() {\n        const offset = this.bb.__offset(this.bb_pos, 8);\n        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n    }\n    dictionaryKind() {\n        const offset = this.bb.__offset(this.bb_pos, 10);\n        return offset ? this.bb.readInt16(this.bb_pos + offset) : DictionaryKind.DenseArray;\n    }\n    static startDictionaryEncoding(builder) {\n        builder.startObject(4);\n    }\n    static addId(builder, id) {\n        builder.addFieldInt64(0, id, BigInt('0'));\n    }\n    static addIndexType(builder, indexTypeOffset) {\n        builder.addFieldOffset(1, indexTypeOffset, 0);\n    }\n    static addIsOrdered(builder, isOrdered) {\n        builder.addFieldInt8(2, +isOrdered, +false);\n    }\n    static addDictionaryKind(builder, dictionaryKind) {\n        builder.addFieldInt16(3, dictionaryKind, DictionaryKind.DenseArray);\n    }\n    static endDictionaryEncoding(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n}\n\n//# sourceMappingURL=dictionary-encoding.mjs.map\n"],"names":["DictionaryEncoding","i","bb","obj","flatbuffers.SIZE_PREFIX_LENGTH","offset","Int","DictionaryKind","builder","id","indexTypeOffset","isOrdered","dictionaryKind"],"mappings":";;;;;;;;;;;AAIO,MAAMA,EAAmB;AAAA,EAC5B,cAAc;AACV,SAAK,KAAK,MACV,KAAK,SAAS;AAAA,EACjB;AAAA,EACD,OAAOC,GAAGC,GAAI;AACV,gBAAK,SAASD,GACd,KAAK,KAAKC,GACH;AAAA,EACV;AAAA,EACD,OAAO,4BAA4BA,GAAIC,GAAK;AACxC,YAAQA,KAAO,IAAIH,EAAkB,GAAI,OAAOE,EAAG,UAAUA,EAAG,SAAU,CAAA,IAAIA,EAAG,SAAU,GAAEA,CAAE;AAAA,EAClG;AAAA,EACD,OAAO,wCAAwCA,GAAIC,GAAK;AACpD,WAAAD,EAAG,YAAYA,EAAG,SAAU,IAAGE,CAA8B,IACrDD,KAAO,IAAIH,EAAkB,GAAI,OAAOE,EAAG,UAAUA,EAAG,SAAU,CAAA,IAAIA,EAAG,SAAU,GAAEA,CAAE;AAAA,EAClG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,KAAK;AACD,UAAMG,IAAS,KAAK,GAAG,SAAS,KAAK,QAAQ,CAAC;AAC9C,WAAOA,IAAS,KAAK,GAAG,UAAU,KAAK,SAASA,CAAM,IAAI,OAAO,GAAG;AAAA,EACvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,UAAUF,GAAK;AACX,UAAME,IAAS,KAAK,GAAG,SAAS,KAAK,QAAQ,CAAC;AAC9C,WAAOA,KAAUF,KAAO,IAAIG,EAAK,GAAE,OAAO,KAAK,GAAG,WAAW,KAAK,SAASD,CAAM,GAAG,KAAK,EAAE,IAAI;AAAA,EAClG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,YAAY;AACR,UAAMA,IAAS,KAAK,GAAG,SAAS,KAAK,QAAQ,CAAC;AAC9C,WAAOA,IAAS,CAAC,CAAC,KAAK,GAAG,SAAS,KAAK,SAASA,CAAM,IAAI;AAAA,EAC9D;AAAA,EACD,iBAAiB;AACb,UAAMA,IAAS,KAAK,GAAG,SAAS,KAAK,QAAQ,EAAE;AAC/C,WAAOA,IAAS,KAAK,GAAG,UAAU,KAAK,SAASA,CAAM,IAAIE,EAAe;AAAA,EAC5E;AAAA,EACD,OAAO,wBAAwBC,GAAS;AACpC,IAAAA,EAAQ,YAAY,CAAC;AAAA,EACxB;AAAA,EACD,OAAO,MAAMA,GAASC,GAAI;AACtB,IAAAD,EAAQ,cAAc,GAAGC,GAAI,OAAO,GAAG,CAAC;AAAA,EAC3C;AAAA,EACD,OAAO,aAAaD,GAASE,GAAiB;AAC1C,IAAAF,EAAQ,eAAe,GAAGE,GAAiB,CAAC;AAAA,EAC/C;AAAA,EACD,OAAO,aAAaF,GAASG,GAAW;AACpC,IAAAH,EAAQ,aAAa,GAAG,CAACG,GAAW,CAAM;AAAA,EAC7C;AAAA,EACD,OAAO,kBAAkBH,GAASI,GAAgB;AAC9C,IAAAJ,EAAQ,cAAc,GAAGI,GAAgBL,EAAe,UAAU;AAAA,EACrE;AAAA,EACD,OAAO,sBAAsBC,GAAS;AAElC,WADeA,EAAQ;EAE1B;AACL;","x_google_ignoreList":[0]}