{"version":3,"file":"AmplifyContextProvider.js","sources":["../../../../lib/@cori-risi/cotexts/AmplifyContextProvider.tsx"],"sourcesContent":["import React, {\n    createContext,\n    ReactElement,\n    useEffect,\n    useState\n} from \"react\";\nimport {Amplify, ResourcesConfig} from \"aws-amplify\";\n\nimport amplifyconfig from './amplifyconfiguration.json';\nimport { AuthTokens, JWT } from \"@aws-amplify/auth\";\nimport { User } from \"../models\";\nimport {ApiContext} from \"./ApiContextProvider\";\n\nAmplify.configure(amplifyconfig);\n\ntype AWSCredentials = {\n    accessKeyId: string;\n    secretAccessKey: string;\n    sessionToken?: string;\n    expiration?: Date;\n};\n\ntype AuthSession = {\n    tokens?: AuthTokens;\n    credentials?: AWSCredentials;\n    identityId?: string;\n    userSub?: string;\n};\n\n\ntype  AmplifyContextType = {\n    // authenticated_user: User | null;\n    domain?: string,\n    region?: string,\n    identityPoolId?: string,\n    userPoolId?: string,\n    userPoolClientId?: string,\n    token: JWT | null;\n};\n\nconst initAmplifyContext: AmplifyContextType = {\n    // authenticated_user: null,\n    domain: undefined,\n    region: undefined,\n    identityPoolId: undefined,\n    userPoolId: undefined,\n    userPoolClientId: undefined,\n    token: null\n};\n\nexport const AmplifyContext = createContext<AmplifyContextType | null>(initAmplifyContext);\n\nlet hasAuthSession = false;\nlet hasAuthUser = false;\nlet hasAuthClient = false;\n\nexport default function AmplifyContextProvider(props: {\n    children?: ReactElement,\n    domain?: string,\n    region?: string,\n    identityPoolId?: string,\n    userPoolId?: string,\n    userPoolClientId?: string,\n    fetchAuthSession: Function,\n    getCurrentUser: Function\n}) {\n\n    // const userState = useSelector(selectUser);\n    // const dispatch = useDispatch();\n\n    // const [ authenticated_user, setAuthenticatedUser ] = useState<User>(userState);\n\n    const [ state, setState ] = useState<AmplifyContextType | null>((!!props.domain\n        && !!props.region\n        && !!props.identityPoolId\n        && !!props.userPoolId\n        && !!props.userPoolClientId\n    ) ?\n        {\n            // authenticated_user: null,\n            ...props,\n            token: null\n        } :\n        initAmplifyContext);\n\n    useEffect(() => {\n        if (!!props.domain\n            && !!props.region\n            && !!props.identityPoolId\n            && !!props.userPoolId\n            && !!props.userPoolClientId\n        ) {\n\n            const {\n                domain,\n                region,\n                identityPoolId,\n                userPoolId,\n                userPoolClientId,\n                fetchAuthSession,\n                getCurrentUser\n            } = props;\n\n            console.log(\"Configuring Amplify context with props:\", {\n                domain,\n                region,\n                identityPoolId,\n                userPoolId,\n                userPoolClientId\n            });\n\n            // Ex. Auth data structure:\n            //     Auth: {\n            //         Cognito: {\n            //             userPoolClientId: \"5eusi16g0o2q1g1rr5ehgudodm\",\n            //             userPoolId: \"us-east-1_QeA4600FA\",\n            //             userPoolEndpoint: \"authcori.auth.us-east-1.amazoncognito.com\",\n            //             identityPoolId: \"us-east-1:2194a76a-fa3d-4c33-999e-e3c4b2b049ee\",\n            //             loginWith: { // Optional\n            //                 oauth: {\n            //                     domain: 'authcori.auth.us-east-1.amazoncognito.com',\n            //                         scopes: ['email', 'openid', 'profile'],\n            //                         redirectSignIn: [\"http://localhost:3000\", \"http://localhost:5173\", \"http://localhost:5174\"],\n            //                         redirectSignOut: [\"http://localhost:3000/\", \"http://localhost:5173/\", \"http://localhost:5174/\"],\n            //                         responseType: 'code',\n            //                 },\n            //                 username: true,\n            //                     email: true, // Optional\n            //                     phone: false, // Optional\n            //\n            //             },\n            //             // signUpVerificationMethod: \"\",\n            //             // userAttributes: \"\",\n            //             // mfa: \"\",\n            //             // passwordFormat: \"\",\n            //         },\n            //         region: config.region,\n            //         oauth: {\n            //             scope: ['email', 'openid', 'profile'],\n            //                 redirectSignIn: '',\n            //                 redirectSignOut: '',\n            //                 responseType: 'code',\n            //                 mandatorySignIn: true,\n            //         },\n            //     },\n\n            const aws_original_auth_config = {\n                \"Auth\": {\n                    \"domain\": domain,\n                    \"region\": region,\n                    \"identityPoolRegion\": region,\n                    \"identityPoolId\": identityPoolId,\n                    \"userPoolId\": userPoolId,\n                    // \"userPoolClientId\": userPoolClientId,\n                    \"userPoolWebClientId\": userPoolClientId,\n                    \"clientId\": userPoolClientId,\n                    \"oauth\": {\n                        \"domain\": domain,\n                        // \"scope\": [ \"email\", \"profile\", \"openid\", \"aws.cognito.signin.user.admin\" ],\n                        // \"scope\": [ \"email\", \"openid\", \"profile\" ],\n                        // \"scope\": [ \"email\" ],\n                        \"scope\": [\"openid\"],\n                        \"redirectSignIn\": window.location.protocol + \"//\" + window.location.hostname + ((!!window.location.port) ? \":\" + window.location.port : \"\"),\n                        \"redirectSignOut\": window.location.protocol + \"//\" + window.location.hostname + ((!!window.location.port) ? \":\" + window.location.port : \"\") + \"/\",\n                        \"responseType\": (\"code\" as \"code\")  // ... or \"token\", note that REFRESH token will only\n                                                            // be generated when the responseType is \"code\"\n                    }\n                }\n            };\n\n            Amplify.configure(({\n                // TODO: Why is this so ridiculous and how can these options be\n                //       specified exclusively in amplifyconfiguration.json ???\n                ...Amplify.getConfig(),\n                Auth: {\n                    ...Amplify.getConfig().Auth!,\n                    Cognito: {\n                        ...Amplify.getConfig().Auth!.Cognito!,\n                        ...aws_original_auth_config.Auth,\n                        loginWith: {\n                            ...Amplify.getConfig().Auth!.Cognito!.loginWith!,\n                            oauth: {\n                                ...Amplify.getConfig().Auth!.Cognito!.loginWith!.oauth!,\n                                ...aws_original_auth_config.Auth.oauth,\n                                redirectSignIn: [\n                                    aws_original_auth_config.Auth.oauth.redirectSignIn\n                                ],\n                                redirectSignOut: [\n                                    aws_original_auth_config.Auth.oauth.redirectSignOut\n                                ],\n                                responseType: (aws_original_auth_config.Auth.oauth.responseType as \"code\"),\n                                scopes: [\n                                    ...aws_original_auth_config.Auth.oauth.scope\n                                ]\n                            },\n                            username: true,\n                        },\n                        userPoolClientId: aws_original_auth_config.Auth.clientId\n                    }\n                }\n            }) as ResourcesConfig);\n\n            const session: Promise<AuthSession> = fetchAuthSession();\n\n\n            session\n                .then((sess) => {\n\n                    if (!hasAuthSession) {\n\n                        const tokens = sess.tokens!;\n\n                        console.log(\"API tokens:\", tokens);\n\n                        if (!!tokens && tokens.hasOwnProperty(\"idToken\")) {\n\n                            hasAuthSession = true;\n\n                            console.log(\"API Session is authenticated:\", hasAuthSession);\n                            console.log(\"API Session config:\", sess);\n\n                            console.log(\"idToken:\", tokens.idToken!);\n                            setState({\n                                // authenticated_user: authenticated_user,\n                                domain,\n                                region,\n                                identityPoolId,\n                                userPoolId,\n                                userPoolClientId,\n                                token: tokens.idToken!\n                            });\n\n                            const user: Promise<User> = getCurrentUser();\n\n\n\n\n                            user.then((u) => {\n                                if (!hasAuthUser) {\n\n                                    // console.log(\"Initial userState:\", userState);\n\n                                    hasAuthUser = true;\n\n                                    console.log(\"API User is authenticated:\", hasAuthSession);\n                                    console.log(\"API User:\", u);\n                                    console.log(\"API User type:\", u.constructor.name);\n\n                                    // function updateUser (u: User) {\n                                    //     try {\n                                    //         if (!!u.userId) {\n                                    //             console.log(\"Update userId:\", u.userId);\n                                    //             dispatch(updateUserId(u.userId));\n                                    //         }\n                                    //         if (!!u.userId && !!u.username) {\n                                    //             console.log(\"Update username:\", u.username);\n                                    //             dispatch(updateUserName(u.username));\n                                    //         }\n                                    //\n                                    //         if (!!tokens.idToken) {\n                                    //             console.log(\"Update user tokens:\", tokens);\n                                    //             dispatch(updateUserTokens(JSON.stringify(tokens)));\n                                    //         }\n                                    //\n                                    //     } catch (e: any) {\n                                    //         console.error(e);\n                                    //     }\n                                    //\n                                    //     setState({\n                                    //         authenticated_user: u,\n                                    //         domain,\n                                    //         region,\n                                    //         identityPoolId,\n                                    //         userPoolId,\n                                    //         userPoolClientId,\n                                    //         token: tokens.idToken!\n                                    //     });\n                                    //\n                                    //     setAuthenticatedUser(u);\n                                    // }\n\n                                    // updateUser(u);\n                                }\n                            });\n                        }\n                    }\n                });\n\n            setState({\n                // authenticated_user: authenticated_user,\n                domain,\n                region,\n                identityPoolId,\n                userPoolId,\n                userPoolClientId,\n                token: null\n            });\n        }\n\n    }, []);\n\n\n    return (<>\n        <AmplifyContext.Provider value={state}>\n            {props.children}\n        </AmplifyContext.Provider>\n    </>);\n\n}\n"],"names":[],"mappings":"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"}