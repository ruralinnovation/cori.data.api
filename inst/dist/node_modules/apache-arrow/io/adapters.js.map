{"version":3,"file":"adapters.js","sources":["../../../../../node_modules/apache-arrow/io/adapters.mjs"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { __asyncGenerator, __await, __awaiter } from \"tslib\";\nimport { toUint8Array, joinUint8Arrays, toUint8ArrayIterator, toUint8ArrayAsyncIterator } from '../util/buffer.mjs';\n/** @ignore */\nexport default {\n    fromIterable(source) {\n        return pump(fromIterable(source));\n    },\n    fromAsyncIterable(source) {\n        return pump(fromAsyncIterable(source));\n    },\n    fromDOMStream(source) {\n        return pump(fromDOMStream(source));\n    },\n    fromNodeStream(stream) {\n        return pump(fromNodeStream(stream));\n    },\n    // @ts-ignore\n    toDOMStream(source, options) {\n        throw new Error(`\"toDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toNodeStream(source, options) {\n        throw new Error(`\"toNodeStream\" not available in this environment`);\n    },\n};\n/** @ignore */\nconst pump = (iterator) => { iterator.next(); return iterator; };\n/** @ignore */\nfunction* fromIterable(source) {\n    let done, threw = false;\n    let buffers = [], buffer;\n    let cmd, size, bufferLength = 0;\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd, size } = (yield (() => null)()) || { cmd: 'read', size: 0 });\n    // initialize the iterator\n    const it = toUint8ArrayIterator(source)[Symbol.iterator]();\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = Number.isNaN(size - bufferLength) ?\n                it.next() : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    }\n    catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\n    }\n    finally {\n        (threw === false) && (typeof it.return === 'function') && (it.return(null));\n    }\n    return null;\n}\n/** @ignore */\nfunction fromAsyncIterable(source) {\n    return __asyncGenerator(this, arguments, function* fromAsyncIterable_1() {\n        let done, threw = false;\n        let buffers = [], buffer;\n        let cmd, size, bufferLength = 0;\n        function byteRange() {\n            if (cmd === 'peek') {\n                return joinUint8Arrays(buffers, size)[0];\n            }\n            [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n            return buffer;\n        }\n        // Yield so the caller can inject the read command before creating the source AsyncIterator\n        ({ cmd, size } = (yield yield __await((() => null)())) || { cmd: 'read', size: 0 });\n        // initialize the iterator\n        const it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n        try {\n            do {\n                // read the next value\n                ({ done, value: buffer } = Number.isNaN(size - bufferLength)\n                    ? yield __await(it.next())\n                    : yield __await(it.next(size - bufferLength)));\n                // if chunk is not null or empty, push it onto the queue\n                if (!done && buffer.byteLength > 0) {\n                    buffers.push(buffer);\n                    bufferLength += buffer.byteLength;\n                }\n                // If we have enough bytes in our buffer, yield chunks until we don't\n                if (done || size <= bufferLength) {\n                    do {\n                        ({ cmd, size } = yield yield __await(byteRange()));\n                    } while (size < bufferLength);\n                }\n            } while (!done);\n        }\n        catch (e) {\n            (threw = true) && (typeof it.throw === 'function') && (yield __await(it.throw(e)));\n        }\n        finally {\n            (threw === false) && (typeof it.return === 'function') && (yield __await(it.return(new Uint8Array(0))));\n        }\n        return yield __await(null);\n    });\n}\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\n/** @ignore */\nfunction fromDOMStream(source) {\n    return __asyncGenerator(this, arguments, function* fromDOMStream_1() {\n        let done = false, threw = false;\n        let buffers = [], buffer;\n        let cmd, size, bufferLength = 0;\n        function byteRange() {\n            if (cmd === 'peek') {\n                return joinUint8Arrays(buffers, size)[0];\n            }\n            [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n            return buffer;\n        }\n        // Yield so the caller can inject the read command before we establish the ReadableStream lock\n        ({ cmd, size } = (yield yield __await((() => null)())) || { cmd: 'read', size: 0 });\n        // initialize the reader and lock the stream\n        const it = new AdaptiveByteReader(source);\n        try {\n            do {\n                // read the next value\n                ({ done, value: buffer } = Number.isNaN(size - bufferLength)\n                    ? yield __await(it['read']())\n                    : yield __await(it['read'](size - bufferLength)));\n                // if chunk is not null or empty, push it onto the queue\n                if (!done && buffer.byteLength > 0) {\n                    buffers.push(toUint8Array(buffer));\n                    bufferLength += buffer.byteLength;\n                }\n                // If we have enough bytes in our buffer, yield chunks until we don't\n                if (done || size <= bufferLength) {\n                    do {\n                        ({ cmd, size } = yield yield __await(byteRange()));\n                    } while (size < bufferLength);\n                }\n            } while (!done);\n        }\n        catch (e) {\n            (threw = true) && (yield __await(it['cancel'](e)));\n        }\n        finally {\n            (threw === false) ? (yield __await(it['cancel']()))\n                : source['locked'] && it.releaseLock();\n        }\n        return yield __await(null);\n    });\n}\n/** @ignore */\nclass AdaptiveByteReader {\n    constructor(source) {\n        this.source = source;\n        this.reader = null;\n        this.reader = this.source['getReader']();\n        // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n        // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n        // about why these errors are raised, but I'm sure there's some important spec reason that\n        // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n        // only solution in this case :/\n        this.reader['closed'].catch(() => { });\n    }\n    get closed() {\n        return this.reader ? this.reader['closed'].catch(() => { }) : Promise.resolve();\n    }\n    releaseLock() {\n        if (this.reader) {\n            this.reader.releaseLock();\n        }\n        this.reader = null;\n    }\n    cancel(reason) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { reader, source } = this;\n            reader && (yield reader['cancel'](reason).catch(() => { }));\n            source && (source['locked'] && this.releaseLock());\n        });\n    }\n    read(size) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (size === 0) {\n                return { done: this.reader == null, value: new Uint8Array(0) };\n            }\n            const result = yield this.reader.read();\n            !result.done && (result.value = toUint8Array(result));\n            return result;\n        });\n    }\n}\n/** @ignore */\nconst onEvent = (stream, event) => {\n    const handler = (_) => resolve([event, _]);\n    let resolve;\n    return [event, handler, new Promise((r) => (resolve = r) && stream['once'](event, handler))];\n};\n/** @ignore */\nfunction fromNodeStream(stream) {\n    return __asyncGenerator(this, arguments, function* fromNodeStream_1() {\n        const events = [];\n        let event = 'error';\n        let done = false, err = null;\n        let cmd, size, bufferLength = 0;\n        let buffers = [], buffer;\n        function byteRange() {\n            if (cmd === 'peek') {\n                return joinUint8Arrays(buffers, size)[0];\n            }\n            [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n            return buffer;\n        }\n        // Yield so the caller can inject the read command before we\n        // add the listener for the source stream's 'readable' event.\n        ({ cmd, size } = (yield yield __await((() => null)())) || { cmd: 'read', size: 0 });\n        // ignore stdin if it's a TTY\n        if (stream['isTTY']) {\n            yield yield __await(new Uint8Array(0));\n            return yield __await(null);\n        }\n        try {\n            // initialize the stream event handlers\n            events[0] = onEvent(stream, 'end');\n            events[1] = onEvent(stream, 'error');\n            do {\n                events[2] = onEvent(stream, 'readable');\n                // wait on the first message event from the stream\n                [event, err] = yield __await(Promise.race(events.map((x) => x[2])));\n                // if the stream emitted an Error, rethrow it\n                if (event === 'error') {\n                    break;\n                }\n                if (!(done = event === 'end')) {\n                    // If the size is NaN, request to read everything in the stream's internal buffer\n                    if (!Number.isFinite(size - bufferLength)) {\n                        buffer = toUint8Array(stream['read']());\n                    }\n                    else {\n                        buffer = toUint8Array(stream['read'](size - bufferLength));\n                        // If the byteLength is 0, then the requested amount is more than the stream has\n                        // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                        // continue emitting readable events, so request to read everything the stream\n                        // has in its internal buffer right now.\n                        if (buffer.byteLength < (size - bufferLength)) {\n                            buffer = toUint8Array(stream['read']());\n                        }\n                    }\n                    // if chunk is not null or empty, push it onto the queue\n                    if (buffer.byteLength > 0) {\n                        buffers.push(buffer);\n                        bufferLength += buffer.byteLength;\n                    }\n                }\n                // If we have enough bytes in our buffer, yield chunks until we don't\n                if (done || size <= bufferLength) {\n                    do {\n                        ({ cmd, size } = yield yield __await(byteRange()));\n                    } while (size < bufferLength);\n                }\n            } while (!done);\n        }\n        finally {\n            yield __await(cleanup(events, event === 'error' ? err : null));\n        }\n        return yield __await(null);\n        function cleanup(events, err) {\n            buffer = buffers = null;\n            return new Promise((resolve, reject) => {\n                for (const [evt, fn] of events) {\n                    stream['off'](evt, fn);\n                }\n                try {\n                    // Some stream implementations don't call the destroy callback,\n                    // because it's really a node-internal API. Just calling `destroy`\n                    // here should be enough to conform to the ReadableStream contract\n                    const destroy = stream['destroy'];\n                    destroy && destroy.call(stream, err);\n                    err = undefined;\n                }\n                catch (e) {\n                    err = e || err;\n                }\n                finally {\n                    err != null ? reject(err) : resolve();\n                }\n            });\n        }\n    });\n}\n\n//# sourceMappingURL=adapters.mjs.map\n"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA,qBAAe;AACf,IAAI,YAAY,CAAC,MAAM,EAAE;AACzB,QAAQ,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;AAC1C,KAAK;AACL,IAAI,iBAAiB,CAAC,MAAM,EAAE;AAC9B,QAAQ,OAAO,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;AAC/C,KAAK;AACL,IAAI,aAAa,CAAC,MAAM,EAAE;AAC1B,QAAQ,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;AAC3C,KAAK;AACL,IAAI,cAAc,CAAC,MAAM,EAAE;AAC3B,QAAQ,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;AAC5C,KAAK;AACL;AACA,IAAI,WAAW,CAAC,MAAM,EAAE,OAAO,EAAE;AACjC,QAAQ,MAAM,IAAI,KAAK,CAAC,CAAC,+CAA+C,CAAC,CAAC,CAAC;AAC3E,KAAK;AACL;AACA,IAAI,YAAY,CAAC,MAAM,EAAE,OAAO,EAAE;AAClC,QAAQ,MAAM,IAAI,KAAK,CAAC,CAAC,gDAAgD,CAAC,CAAC,CAAC;AAC5E,KAAK;AACL,CAAC,CAAC;AACF;AACA,MAAM,IAAI,GAAG,CAAC,QAAQ,KAAK,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,QAAQ,CAAC,EAAE,CAAC;AACjE;AACA,UAAU,YAAY,CAAC,MAAM,EAAE;AAC/B,IAAI,IAAI,IAAI,EAAE,KAAK,GAAG,KAAK,CAAC;AAC5B,IAAI,IAAI,OAAO,GAAG,EAAE,EAAE,MAAM,CAAC;AAC7B,IAAI,IAAI,GAAG,EAAE,IAAI,EAAE,YAAY,GAAG,CAAC,CAAC;AACpC,IAAI,SAAS,SAAS,GAAG;AACzB,QAAQ,IAAI,GAAG,KAAK,MAAM,EAAE;AAC5B,YAAY,OAAO,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,SAAS;AACT,QAAQ,CAAC,MAAM,EAAE,OAAO,EAAE,YAAY,CAAC,GAAG,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AACzE,QAAQ,OAAO,MAAM,CAAC;AACtB,KAAK;AACL;AACA,IAAI,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,IAAI,GAAG,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE;AACzE;AACA,IAAI,MAAM,EAAE,GAAG,oBAAoB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;AAC/D,IAAI,IAAI;AACR,QAAQ,GAAG;AACX;AACA,YAAY,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,GAAG,YAAY,CAAC;AACxE,gBAAgB,EAAE,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC,EAAE;AAC1D;AACA,YAAY,IAAI,CAAC,IAAI,IAAI,MAAM,CAAC,UAAU,GAAG,CAAC,EAAE;AAChD,gBAAgB,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACrC,gBAAgB,YAAY,IAAI,MAAM,CAAC,UAAU,CAAC;AAClD,aAAa;AACb;AACA,YAAY,IAAI,IAAI,IAAI,IAAI,IAAI,YAAY,EAAE;AAC9C,gBAAgB,GAAG;AACnB,oBAAoB,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,MAAM,SAAS,EAAE,EAAE;AACxD,iBAAiB,QAAQ,IAAI,GAAG,YAAY,EAAE;AAC9C,aAAa;AACb,SAAS,QAAQ,CAAC,IAAI,EAAE;AACxB,KAAK;AACL,IAAI,OAAO,CAAC,EAAE;AACd,QAAQ,CAAC,KAAK,GAAG,IAAI,MAAM,OAAO,EAAE,CAAC,KAAK,KAAK,UAAU,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5E,KAAK;AACL,YAAY;AACZ,QAAQ,CAAC,KAAK,KAAK,KAAK,MAAM,OAAO,EAAE,CAAC,MAAM,KAAK,UAAU,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;AACpF,KAAK;AACL,IAAI,OAAO,IAAI,CAAC;AAChB,CAAC;AACD;AACA,SAAS,iBAAiB,CAAC,MAAM,EAAE;AACnC,IAAI,OAAO,gBAAgB,CAAC,IAAI,EAAE,SAAS,EAAE,UAAU,mBAAmB,GAAG;AAC7E,QAAQ,IAAI,IAAI,EAAE,KAAK,GAAG,KAAK,CAAC;AAChC,QAAQ,IAAI,OAAO,GAAG,EAAE,EAAE,MAAM,CAAC;AACjC,QAAQ,IAAI,GAAG,EAAE,IAAI,EAAE,YAAY,GAAG,CAAC,CAAC;AACxC,QAAQ,SAAS,SAAS,GAAG;AAC7B,YAAY,IAAI,GAAG,KAAK,MAAM,EAAE;AAChC,gBAAgB,OAAO,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,aAAa;AACb,YAAY,CAAC,MAAM,EAAE,OAAO,EAAE,YAAY,CAAC,GAAG,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AAC7E,YAAY,OAAO,MAAM,CAAC;AAC1B,SAAS;AACT;AACA,QAAQ,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,MAAM,MAAM,OAAO,CAAC,CAAC,MAAM,IAAI,GAAG,CAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE;AAC5F;AACA,QAAQ,MAAM,EAAE,GAAG,yBAAyB,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC;AAC7E,QAAQ,IAAI;AACZ,YAAY,GAAG;AACf;AACA,gBAAgB,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,GAAG,YAAY,CAAC;AAC5E,sBAAsB,MAAM,OAAO,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC;AAC9C,sBAAsB,MAAM,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC,CAAC,EAAE;AACnE;AACA,gBAAgB,IAAI,CAAC,IAAI,IAAI,MAAM,CAAC,UAAU,GAAG,CAAC,EAAE;AACpD,oBAAoB,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACzC,oBAAoB,YAAY,IAAI,MAAM,CAAC,UAAU,CAAC;AACtD,iBAAiB;AACjB;AACA,gBAAgB,IAAI,IAAI,IAAI,IAAI,IAAI,YAAY,EAAE;AAClD,oBAAoB,GAAG;AACvB,wBAAwB,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,MAAM,MAAM,OAAO,CAAC,SAAS,EAAE,CAAC,EAAE;AAC3E,qBAAqB,QAAQ,IAAI,GAAG,YAAY,EAAE;AAClD,iBAAiB;AACjB,aAAa,QAAQ,CAAC,IAAI,EAAE;AAC5B,SAAS;AACT,QAAQ,OAAO,CAAC,EAAE;AAClB,YAAY,CAAC,KAAK,GAAG,IAAI,MAAM,OAAO,EAAE,CAAC,KAAK,KAAK,UAAU,CAAC,KAAK,MAAM,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/F,SAAS;AACT,gBAAgB;AAChB,YAAY,CAAC,KAAK,KAAK,KAAK,MAAM,OAAO,EAAE,CAAC,MAAM,KAAK,UAAU,CAAC,KAAK,MAAM,OAAO,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpH,SAAS;AACT,QAAQ,OAAO,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC;AACnC,KAAK,CAAC,CAAC;AACP,CAAC;AACD;AACA;AACA;AACA;AACA,SAAS,aAAa,CAAC,MAAM,EAAE;AAC/B,IAAI,OAAO,gBAAgB,CAAC,IAAI,EAAE,SAAS,EAAE,UAAU,eAAe,GAAG;AACzE,QAAQ,IAAI,IAAI,GAAG,KAAK,EAAE,KAAK,GAAG,KAAK,CAAC;AACxC,QAAQ,IAAI,OAAO,GAAG,EAAE,EAAE,MAAM,CAAC;AACjC,QAAQ,IAAI,GAAG,EAAE,IAAI,EAAE,YAAY,GAAG,CAAC,CAAC;AACxC,QAAQ,SAAS,SAAS,GAAG;AAC7B,YAAY,IAAI,GAAG,KAAK,MAAM,EAAE;AAChC,gBAAgB,OAAO,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,aAAa;AACb,YAAY,CAAC,MAAM,EAAE,OAAO,EAAE,YAAY,CAAC,GAAG,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AAC7E,YAAY,OAAO,MAAM,CAAC;AAC1B,SAAS;AACT;AACA,QAAQ,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,MAAM,MAAM,OAAO,CAAC,CAAC,MAAM,IAAI,GAAG,CAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE;AAC5F;AACA,QAAQ,MAAM,EAAE,GAAG,IAAI,kBAAkB,CAAC,MAAM,CAAC,CAAC;AAClD,QAAQ,IAAI;AACZ,YAAY,GAAG;AACf;AACA,gBAAgB,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,GAAG,YAAY,CAAC;AAC5E,sBAAsB,MAAM,OAAO,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC;AACjD,sBAAsB,MAAM,OAAO,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,GAAG,YAAY,CAAC,CAAC,EAAE;AACtE;AACA,gBAAgB,IAAI,CAAC,IAAI,IAAI,MAAM,CAAC,UAAU,GAAG,CAAC,EAAE;AACpD,oBAAoB,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;AACvD,oBAAoB,YAAY,IAAI,MAAM,CAAC,UAAU,CAAC;AACtD,iBAAiB;AACjB;AACA,gBAAgB,IAAI,IAAI,IAAI,IAAI,IAAI,YAAY,EAAE;AAClD,oBAAoB,GAAG;AACvB,wBAAwB,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,MAAM,MAAM,OAAO,CAAC,SAAS,EAAE,CAAC,EAAE;AAC3E,qBAAqB,QAAQ,IAAI,GAAG,YAAY,EAAE;AAClD,iBAAiB;AACjB,aAAa,QAAQ,CAAC,IAAI,EAAE;AAC5B,SAAS;AACT,QAAQ,OAAO,CAAC,EAAE;AAClB,YAAY,CAAC,KAAK,GAAG,IAAI,MAAM,MAAM,OAAO,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/D,SAAS;AACT,gBAAgB;AAChB,YAAY,CAAC,KAAK,KAAK,KAAK,KAAK,MAAM,OAAO,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC;AAC9D,kBAAkB,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;AACvD,SAAS;AACT,QAAQ,OAAO,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC;AACnC,KAAK,CAAC,CAAC;AACP,CAAC;AACD;AACA,MAAM,kBAAkB,CAAC;AACzB,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AAC7B,QAAQ,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;AAC3B,QAAQ,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC;AACjD;AACA;AACA;AACA;AACA;AACA,QAAQ,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;AAC/C,KAAK;AACL,IAAI,IAAI,MAAM,GAAG;AACjB,QAAQ,OAAO,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;AACxF,KAAK;AACL,IAAI,WAAW,GAAG;AAClB,QAAQ,IAAI,IAAI,CAAC,MAAM,EAAE;AACzB,YAAY,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;AACtC,SAAS;AACT,QAAQ,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;AAC3B,KAAK;AACL,IAAI,MAAM,CAAC,MAAM,EAAE;AACnB,QAAQ,OAAO,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;AAC5D,YAAY,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;AAC5C,YAAY,MAAM,KAAK,MAAM,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACxE,YAAY,MAAM,KAAK,MAAM,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;AAC/D,SAAS,CAAC,CAAC;AACX,KAAK;AACL,IAAI,IAAI,CAAC,IAAI,EAAE;AACf,QAAQ,OAAO,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;AAC5D,YAAY,IAAI,IAAI,KAAK,CAAC,EAAE;AAC5B,gBAAgB,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE,KAAK,EAAE,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC;AAC/E,aAAa;AACb,YAAY,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;AACpD,YAAY,CAAC,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,KAAK,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;AAClE,YAAY,OAAO,MAAM,CAAC;AAC1B,SAAS,CAAC,CAAC;AACX,KAAK;AACL,CAAC;AACD;AACA,MAAM,OAAO,GAAG,CAAC,MAAM,EAAE,KAAK,KAAK;AACnC,IAAI,MAAM,OAAO,GAAG,CAAC,CAAC,KAAK,OAAO,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;AAC/C,IAAI,IAAI,OAAO,CAAC;AAChB,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,GAAG,CAAC,KAAK,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;AACjG,CAAC,CAAC;AACF;AACA,SAAS,cAAc,CAAC,MAAM,EAAE;AAChC,IAAI,OAAO,gBAAgB,CAAC,IAAI,EAAE,SAAS,EAAE,UAAU,gBAAgB,GAAG;AAC1E,QAAQ,MAAM,MAAM,GAAG,EAAE,CAAC;AAC1B,QAAQ,IAAI,KAAK,GAAG,OAAO,CAAC;AAC5B,QAAQ,IAAI,IAAI,GAAG,KAAK,EAAE,GAAG,GAAG,IAAI,CAAC;AACrC,QAAQ,IAAI,GAAG,EAAE,IAAI,EAAE,YAAY,GAAG,CAAC,CAAC;AACxC,QAAQ,IAAI,OAAO,GAAG,EAAE,EAAE,MAAM,CAAC;AACjC,QAAQ,SAAS,SAAS,GAAG;AAC7B,YAAY,IAAI,GAAG,KAAK,MAAM,EAAE;AAChC,gBAAgB,OAAO,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,aAAa;AACb,YAAY,CAAC,MAAM,EAAE,OAAO,EAAE,YAAY,CAAC,GAAG,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AAC7E,YAAY,OAAO,MAAM,CAAC;AAC1B,SAAS;AACT;AACA;AACA,QAAQ,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,MAAM,MAAM,OAAO,CAAC,CAAC,MAAM,IAAI,GAAG,CAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE;AAC5F;AACA,QAAQ,IAAI,MAAM,CAAC,OAAO,CAAC,EAAE;AAC7B,YAAY,MAAM,MAAM,OAAO,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,YAAY,OAAO,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC;AACvC,SAAS;AACT,QAAQ,IAAI;AACZ;AACA,YAAY,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AAC/C,YAAY,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AACjD,YAAY,GAAG;AACf,gBAAgB,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;AACxD;AACA,gBAAgB,CAAC,KAAK,EAAE,GAAG,CAAC,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpF;AACA,gBAAgB,IAAI,KAAK,KAAK,OAAO,EAAE;AACvC,oBAAoB,MAAM;AAC1B,iBAAiB;AACjB,gBAAgB,IAAI,EAAE,IAAI,GAAG,KAAK,KAAK,KAAK,CAAC,EAAE;AAC/C;AACA,oBAAoB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAG,YAAY,CAAC,EAAE;AAC/D,wBAAwB,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AAChE,qBAAqB;AACrB,yBAAyB;AACzB,wBAAwB,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,GAAG,YAAY,CAAC,CAAC,CAAC;AACnF;AACA;AACA;AACA;AACA,wBAAwB,IAAI,MAAM,CAAC,UAAU,IAAI,IAAI,GAAG,YAAY,CAAC,EAAE;AACvE,4BAA4B,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AACpE,yBAAyB;AACzB,qBAAqB;AACrB;AACA,oBAAoB,IAAI,MAAM,CAAC,UAAU,GAAG,CAAC,EAAE;AAC/C,wBAAwB,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC7C,wBAAwB,YAAY,IAAI,MAAM,CAAC,UAAU,CAAC;AAC1D,qBAAqB;AACrB,iBAAiB;AACjB;AACA,gBAAgB,IAAI,IAAI,IAAI,IAAI,IAAI,YAAY,EAAE;AAClD,oBAAoB,GAAG;AACvB,wBAAwB,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,MAAM,MAAM,OAAO,CAAC,SAAS,EAAE,CAAC,EAAE;AAC3E,qBAAqB,QAAQ,IAAI,GAAG,YAAY,EAAE;AAClD,iBAAiB;AACjB,aAAa,QAAQ,CAAC,IAAI,EAAE;AAC5B,SAAS;AACT,gBAAgB;AAChB,YAAY,MAAM,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,KAAK,OAAO,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;AAC3E,SAAS;AACT,QAAQ,OAAO,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC;AACnC,QAAQ,SAAS,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE;AACtC,YAAY,MAAM,GAAG,OAAO,GAAG,IAAI,CAAC;AACpC,YAAY,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;AACpD,gBAAgB,KAAK,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,MAAM,EAAE;AAChD,oBAAoB,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;AAC3C,iBAAiB;AACjB,gBAAgB,IAAI;AACpB;AACA;AACA;AACA,oBAAoB,MAAM,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;AACtD,oBAAoB,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AACzD,oBAAoB,GAAG,GAAG,SAAS,CAAC;AACpC,iBAAiB;AACjB,gBAAgB,OAAO,CAAC,EAAE;AAC1B,oBAAoB,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC;AACnC,iBAAiB;AACjB,wBAAwB;AACxB,oBAAoB,GAAG,IAAI,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,OAAO,EAAE,CAAC;AAC1D,iBAAiB;AACjB,aAAa,CAAC,CAAC;AACf,SAAS;AACT,KAAK,CAAC,CAAC;AACP;;;;","x_google_ignoreList":[0]}