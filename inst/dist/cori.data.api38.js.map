{"version":3,"file":"cori.data.api38.js","sources":["../../node_modules/arquero/src/query/verb.js"],"sourcesContent":["import { Verb as VerbType } from './constants';\n\nimport {\n  fromObject,\n  getTable,\n  joinKeys,\n  joinValues,\n  orderbyKeys,\n  toObject\n} from './util';\n\nimport {\n  Expr,\n  ExprList,\n  ExprNumber,\n  ExprObject,\n  JoinKeys,\n  JoinValues,\n  Options,\n  OrderbyKeys,\n  SelectionList,\n  TableRef,\n  TableRefList\n} from './constants';\n\nimport toAST from './to-ast';\n\n/**\n * Model an Arquero verb as a serializable object.\n */\nexport class Verb {\n\n  /**\n   * Construct a new verb instance.\n   * @param {string} verb The verb name.\n   * @param {object[]} schema Schema describing verb parameters.\n   * @param {any[]} params Array of parameter values.\n   */\n  constructor(verb, schema = [], params = []) {\n    this.verb = verb;\n    this.schema = schema;\n    schema.forEach((s, index) => {\n      const type = s.type;\n      const param = params[index];\n      const value = type === JoinKeys ? joinKeys(param)\n        : type === JoinValues ? joinValues(param)\n        : type === OrderbyKeys ? orderbyKeys(param)\n        : param;\n      this[s.name] = value !== undefined ? value : s.default;\n    });\n  }\n\n  /**\n   * Create new verb instance from the given serialized object.\n   * @param {object} object A serialized verb representation, such as\n   *  those generated by Verb.toObject.\n   * @returns {Verb} The instantiated verb.\n   */\n  static from(object) {\n    const verb = Verbs[object.verb];\n    const params = (verb.schema || [])\n      .map(({ name }) => fromObject(object[name]));\n    return verb(...params);\n  }\n\n  /**\n   * Evaluate this verb against a given table and catalog.\n   * @param {Table} table The Arquero table to process.\n   * @param {Function} catalog A table lookup function that accepts a table\n   *  name string as input and returns a corresponding Arquero table.\n   * @returns {Table} The resulting Arquero table.\n   */\n  evaluate(table, catalog) {\n    const params = this.schema.map(({ name, type }) => {\n      const value = this[name];\n      return type === TableRef ? getTable(catalog, value)\n        : type === TableRefList ? value.map(t => getTable(catalog, t))\n        : value;\n    });\n    return table[this.verb](...params);\n  }\n\n  /**\n   * Serialize this verb as a JSON-compatible object. The resulting\n   * object can be passed to Verb.from to re-instantiate this verb.\n   * @returns {object} A JSON-compatible object representing this verb.\n   */\n  toObject() {\n    const obj = { verb: this.verb };\n    this.schema.forEach(({ name }) => {\n      obj[name] = toObject(this[name]);\n    });\n    return obj;\n  }\n\n  /**\n   * Serialize this verb to a JSON-compatible abstract syntax tree.\n   * All table expressions will be parsed and represented as AST instances\n   * using a modified form of the Mozilla JavaScript AST format.\n   * This method can be used to output parsed and serialized representations\n   * to translate Arquero verbs to alternative data processing platforms.\n   * @returns {object} A JSON-compatible abstract syntax tree object.\n   */\n  toAST() {\n    const obj = { type: VerbType, verb: this.verb };\n    this.schema.forEach(({ name, type, props }) => {\n      obj[name] = toAST(this[name], type, props);\n    });\n    return obj;\n  }\n}\n\n/**\n * Verb parameter type.\n * @typedef {Expr|ExprList|ExprNumber|ExprObject|JoinKeys|JoinValues|Options|OrderbyKeys|SelectionList|TableRef|TableRefList} ParamType\n */\n\n/**\n * Verb parameter schema.\n * @typedef {object} ParamDef\n * @property {string} name The name of the parameter.\n * @property {ParamType} type The type of the parameter.\n * @property {{ [key: string]: ParamType }} [props] Types for non-literal properties.\n */\n\n/**\n * Create a new constructors.\n * @param {string} name The name of the verb.\n * @param {ParamDef[]} schema The verb parameter schema.\n * @return {Function} A verb constructor function.\n */\nexport function createVerb(name, schema) {\n  return Object.assign(\n    (...params) => new Verb(name, schema, params),\n    { schema }\n  );\n}\n\n/**\n * A lookup table of verb classes.\n */\nexport const Verbs = {\n  count:      createVerb('count', [\n                { name: 'options', type: Options }\n              ]),\n  derive:     createVerb('derive', [\n                { name: 'values', type: ExprObject },\n                { name: 'options', type: Options,\n                  props: { before: SelectionList, after: SelectionList }\n                }\n              ]),\n  filter:     createVerb('filter', [\n                { name: 'criteria', type: ExprObject }\n              ]),\n  groupby:    createVerb('groupby', [\n                { name: 'keys', type: ExprList }\n              ]),\n  orderby:    createVerb('orderby', [\n                { name: 'keys', type: OrderbyKeys }\n              ]),\n  relocate:   createVerb('relocate', [\n                { name: 'columns', type: SelectionList },\n                { name: 'options', type: Options,\n                  props: { before: SelectionList, after: SelectionList }\n                }\n              ]),\n  rename:     createVerb('rename', [\n                { name: 'columns', type: SelectionList }\n              ]),\n  rollup:     createVerb('rollup', [\n                { name: 'values', type: ExprObject }\n              ]),\n  sample:     createVerb('sample', [\n                { name: 'size', type: ExprNumber },\n                { name: 'options', type: Options, props: { weight: Expr } }\n              ]),\n  select:     createVerb('select', [\n                { name: 'columns', type: SelectionList }\n              ]),\n  ungroup:    createVerb('ungroup'),\n  unorder:    createVerb('unorder'),\n  reify:      createVerb('reify'),\n  dedupe:     createVerb('dedupe', [\n                { name: 'keys', type: ExprList, default: [] }\n              ]),\n  impute:     createVerb('impute', [\n                { name: 'values', type: ExprObject },\n                { name: 'options', type: Options, props: { expand: ExprList } }\n              ]),\n  fold:       createVerb('fold', [\n                { name: 'values', type: ExprList },\n                { name: 'options', type: Options }\n              ]),\n  pivot:      createVerb('pivot', [\n                { name: 'keys', type: ExprList },\n                { name: 'values', type: ExprList },\n                { name: 'options', type: Options }\n              ]),\n  spread:     createVerb('spread', [\n                { name: 'values', type: ExprList },\n                { name: 'options', type: Options }\n              ]),\n  unroll:     createVerb('unroll', [\n                { name: 'values', type: ExprList },\n                { name: 'options', type: Options, props: { drop: ExprList } }\n              ]),\n  lookup:     createVerb('lookup', [\n                { name: 'table', type: TableRef },\n                { name: 'on', type: JoinKeys },\n                { name: 'values', type: ExprList }\n              ]),\n  join:       createVerb('join', [\n                { name: 'table', type: TableRef },\n                { name: 'on', type: JoinKeys },\n                { name: 'values', type: JoinValues },\n                { name: 'options', type: Options }\n              ]),\n  cross:      createVerb('cross', [\n                { name: 'table', type: TableRef },\n                { name: 'values', type: JoinValues },\n                { name: 'options', type: Options }\n              ]),\n  semijoin:   createVerb('semijoin', [\n                { name: 'table', type: TableRef },\n                { name: 'on', type: JoinKeys }\n              ]),\n  antijoin:   createVerb('antijoin', [\n                { name: 'table', type: TableRef },\n                { name: 'on', type: JoinKeys }\n              ]),\n  concat:     createVerb('concat', [\n                { name: 'tables', type: TableRefList }\n              ]),\n  union:      createVerb('union', [\n                { name: 'tables', type: TableRefList }\n              ]),\n  intersect:  createVerb('intersect', [\n                { name: 'tables', type: TableRefList }\n              ]),\n  except:     createVerb('except', [\n                { name: 'tables', type: TableRefList }\n              ])\n};\n\n/**\n * Abstract class representing a data table.\n * @typedef {import('../table/table').default} Table\n */\n"],"names":["Verb","verb","schema","params","s","index","type","param","value","JoinKeys","joinKeys","JoinValues","joinValues","OrderbyKeys","orderbyKeys","object","Verbs","name","fromObject","table","catalog","TableRef","getTable","TableRefList","t","obj","toObject","VerbType","props","toAST","createVerb","Options","ExprObject","SelectionList","ExprList","ExprNumber","Expr"],"mappings":"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","x_google_ignoreList":[0]}