{"version":3,"file":"cori.data.api657.js","sources":["../../node_modules/micromark-core-commonmark/lib/autolink.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}"],"names":["autolink","tokenizeAutolink","effects","ok","nok","size","start","code","open","asciiAlpha","schemeOrEmailAtext","emailAtext","asciiAlphanumeric","schemeInsideOrEmailAtext","urlInside","asciiControl","emailAtSignOrDot","asciiAtext","emailLabel","emailValue","next"],"mappings":";;;;;;;AASY,MAACA,IAAW;AAAA,EACtB,MAAM;AAAA,EACN,UAAUC;AACZ;AAMA,SAASA,EAAiBC,GAASC,GAAIC,GAAK;AAC1C,MAAIC,IAAO;AACX,SAAOC;AAcP,WAASA,EAAMC,GAAM;AACnB,WAAAL,EAAQ,MAAM,UAAU,GACxBA,EAAQ,MAAM,gBAAgB,GAC9BA,EAAQ,QAAQK,CAAI,GACpBL,EAAQ,KAAK,gBAAgB,GAC7BA,EAAQ,MAAM,kBAAkB,GACzBM;AAAA,EACR;AAcD,WAASA,EAAKD,GAAM;AAClB,WAAIE,EAAWF,CAAI,KACjBL,EAAQ,QAAQK,CAAI,GACbG,KAELH,MAAS,KACJH,EAAIG,CAAI,IAEVI,EAAWJ,CAAI;AAAA,EACvB;AAcD,WAASG,EAAmBH,GAAM;AAEhC,WAAIA,MAAS,MAAMA,MAAS,MAAMA,MAAS,MAAMK,EAAkBL,CAAI,KAErEF,IAAO,GACAQ,EAAyBN,CAAI,KAE/BI,EAAWJ,CAAI;AAAA,EACvB;AAcD,WAASM,EAAyBN,GAAM;AACtC,WAAIA,MAAS,MACXL,EAAQ,QAAQK,CAAI,GACpBF,IAAO,GACAS,MAIJP,MAAS,MAAMA,MAAS,MAAMA,MAAS,MAAMK,EAAkBL,CAAI,MAAMF,MAAS,MACrFH,EAAQ,QAAQK,CAAI,GACbM,MAETR,IAAO,GACAM,EAAWJ,CAAI;AAAA,EACvB;AAYD,WAASO,EAAUP,GAAM;AACvB,WAAIA,MAAS,MACXL,EAAQ,KAAK,kBAAkB,GAC/BA,EAAQ,MAAM,gBAAgB,GAC9BA,EAAQ,QAAQK,CAAI,GACpBL,EAAQ,KAAK,gBAAgB,GAC7BA,EAAQ,KAAK,UAAU,GAChBC,KAILI,MAAS,QAAQA,MAAS,MAAMA,MAAS,MAAMQ,EAAaR,CAAI,IAC3DH,EAAIG,CAAI,KAEjBL,EAAQ,QAAQK,CAAI,GACbO;AAAA,EACR;AAYD,WAASH,EAAWJ,GAAM;AACxB,WAAIA,MAAS,MACXL,EAAQ,QAAQK,CAAI,GACbS,KAELC,EAAWV,CAAI,KACjBL,EAAQ,QAAQK,CAAI,GACbI,KAEFP,EAAIG,CAAI;AAAA,EAChB;AAYD,WAASS,EAAiBT,GAAM;AAC9B,WAAOK,EAAkBL,CAAI,IAAIW,EAAWX,CAAI,IAAIH,EAAIG,CAAI;AAAA,EAC7D;AAYD,WAASW,EAAWX,GAAM;AACxB,WAAIA,MAAS,MACXL,EAAQ,QAAQK,CAAI,GACpBF,IAAO,GACAW,KAELT,MAAS,MAEXL,EAAQ,KAAK,kBAAkB,EAAE,OAAO,iBACxCA,EAAQ,MAAM,gBAAgB,GAC9BA,EAAQ,QAAQK,CAAI,GACpBL,EAAQ,KAAK,gBAAgB,GAC7BA,EAAQ,KAAK,UAAU,GAChBC,KAEFgB,EAAWZ,CAAI;AAAA,EACvB;AAcD,WAASY,EAAWZ,GAAM;AAExB,SAAKA,MAAS,MAAMK,EAAkBL,CAAI,MAAMF,MAAS,IAAI;AAC3D,YAAMe,IAAOb,MAAS,KAAKY,IAAaD;AACxC,aAAAhB,EAAQ,QAAQK,CAAI,GACba;AAAA,IACR;AACD,WAAOhB,EAAIG,CAAI;AAAA,EAChB;AACH;","x_google_ignoreList":[0]}