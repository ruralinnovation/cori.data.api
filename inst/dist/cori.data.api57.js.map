{"version":3,"file":"cori.data.api57.js","sources":["../../node_modules/hast-util-to-jsx-runtime/lib/index.js"],"sourcesContent":["// Register MDX nodes in mdast:\n/// <reference types=\"mdast-util-mdx-expression\" />\n/// <reference types=\"mdast-util-mdx-jsx\" />\n/// <reference types=\"mdast-util-mdxjs-esm\" />\n\n/**\n * @typedef {import('estree').Identifier} Identifier\n * @typedef {import('estree').Literal} Literal\n * @typedef {import('estree').MemberExpression} MemberExpression\n * @typedef {import('estree').Expression} Expression\n * @typedef {import('estree').Program} Program\n *\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n *\n * @typedef {import('mdast-util-mdx-expression').MdxFlowExpressionHast} MdxFlowExpression\n * @typedef {import('mdast-util-mdx-expression').MdxTextExpressionHast} MdxTextExpression\n *\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxFlowElementHast} MdxJsxFlowElement\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxTextElementHast} MdxJsxTextElement\n *\n * @typedef {import('mdast-util-mdxjs-esm').MdxjsEsmHast} MdxjsEsm\n *\n * @typedef {import('property-information').Schema} Schema\n *\n * @typedef {import('unist').Position} Position\n *\n * @typedef {import('./components.js').Components} Components\n */\n\n/**\n * @typedef {JSX.Element | string | null | undefined} Child\n *   Child.\n *\n * @callback Create\n *   Create something in development or production.\n * @param {Nodes} node\n *   hast node.\n * @param {unknown} type\n *   Fragment symbol or tag name.\n * @param {Props} props\n *   Properties and children.\n * @param {string | undefined} key\n *   Key.\n * @returns {JSX.Element}\n *   Result.\n *\n * @callback CreateEvaluater\n *   Create an evaluator that turns ESTree ASTs from embedded MDX into values.\n * @returns {Evaluater}\n *   Evaluater.\n *\n * @typedef {'html' | 'react'} ElementAttributeNameCase\n *   Casing to use for attribute names.\n *\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`.\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`.\n *\n * @callback EvaluateExpression\n *   Turn an MDX expression into a value.\n * @param {Expression} expression\n *   ESTree expression.\n * @returns {unknown}\n *   Result of expression.\n *\n * @callback EvaluateProgram\n *   Turn an MDX program (export/import statements) into a value.\n * @param {Program} expression\n *   ESTree program.\n * @returns {unknown}\n *   Result of program;\n *   should likely be `undefined` as ESM changes the scope but doesnâ€™t yield\n *   something.\n *\n * @typedef Evaluater\n *   Evaluator that turns ESTree ASTs from embedded MDX into values.\n * @property {EvaluateExpression} evaluateExpression\n *   Evaluate an expression.\n * @property {EvaluateProgram} evaluateProgram\n *   Evaluate a program.\n *\n * @typedef {[string, Value]} Field\n *   Property field.\n *\n * @typedef {unknown} Fragment\n *   Represent the children, typically a symbol.\n *\n * @callback Jsx\n *   Create a production element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} [key]\n *   Dynamicly generated key to use.\n * @returns {JSX.Element}\n *   Element from your framework.\n *\n * @callback JsxDev\n *   Create a development element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} key\n *   Dynamicly generated key to use.\n * @param {boolean} isStaticChildren\n *   Whether two or more children are passed (in an array), which is whether\n *   `jsxs` or `jsx` would be used.\n * @param {Source} source\n *   Info about source.\n * @param {undefined} self\n *   Nothing (this is used by frameworks that have components, we donâ€™t).\n * @returns {JSX.Element}\n *   Element from your framework.\n *\n * @typedef {{children?: Array<Child> | Child, node?: Element | MdxJsxFlowElement | MdxJsxTextElement | undefined, [prop: string]: Array<Child> | Child | Element | MdxJsxFlowElement | MdxJsxTextElement | Value | undefined}} Props\n *   Properties and children.\n *\n * @typedef RegularFields\n *   Configuration.\n * @property {Partial<Components> | null | undefined} [components]\n *   Components to use (optional).\n * @property {CreateEvaluater | null | undefined} [createEvaluater]\n *   Create an evaluator that turns ESTree ASTs into values (optional).\n * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']\n *   Specify casing to use for attribute names (default: `'react'`).\n * @property {string | null | undefined} [filePath]\n *   File path to the original source file (optional).\n *\n *   Passed in source info to `jsxDEV` when using the automatic runtime with\n *   `development: true`.\n * @property {boolean | null | undefined} [ignoreInvalidStyle=false]\n *   Ignore invalid CSS in `style` props (default: `false`);\n *   the default behavior is to throw an error.\n * @property {boolean | null | undefined} [passKeys=true]\n *   Generate keys to optimize frameworks that support them (default: `true`).\n *\n *   > ðŸ‘‰ **Note**: Solid currently fails if keys are passed.\n * @property {boolean | null | undefined} [passNode=false]\n *   Pass the hast element node to components (default: `false`).\n * @property {Space | null | undefined} [space='html']\n *   Whether `tree` is in the `'html'` or `'svg'` space (default: `'html'`).\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']\n *   Specify casing to use for property names in `style` objects (default:\n *   `'dom'`).\n * @property {boolean | null | undefined} [tableCellAlignToStyle=true]\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props\n *   (default: `true`).\n *\n * @typedef RuntimeDevelopment\n *   Runtime fields when development is on.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {true} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev} jsxDEV\n *   Development JSX.\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef RuntimeProduction\n *   Runtime fields when development is off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {false | null | undefined} [development]\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off) (optional).\n * @property {Jsx} jsx\n *   Dynamic JSX.\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx} jsxs\n *   Static JSX.\n *\n * @typedef RuntimeUnknown\n *   Runtime fields when development might be on or off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {boolean} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef Source\n *   Info about source.\n * @property {number | undefined} columnNumber\n *   Column where thing starts (0-indexed).\n * @property {string | undefined} fileName\n *   Name of source file.\n * @property {number | undefined} lineNumber\n *   Line where thing starts (1-indexed).\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n *   > ðŸ‘‰ **Note**: hast is not XML.\n *   > It supports SVG as embedded in HTML.\n *   > It does not support the features available in XML.\n *   > Passing SVG might break but fragments of modern SVG should be fine.\n *   > Use `xast` if you need to support SVG as XML.\n *\n * @typedef State\n *   Info passed around.\n * @property {unknown} Fragment\n *   Fragment symbol.\n * @property {Array<Parents>} ancestors\n *   Stack of parents.\n * @property {Partial<Components>} components\n *   Components to swap.\n * @property {Create} create\n *   Create something in development or production.\n * @property {ElementAttributeNameCase} elementAttributeNameCase\n *   Casing to use for attribute names.\n * @property {Evaluater | undefined} evaluater\n *   Evaluator that turns ESTree ASTs into values.\n * @property {string | undefined} filePath\n *   File path.\n * @property {boolean} ignoreInvalidStyle\n *   Ignore invalid CSS in `style` props.\n * @property {boolean} passKeys\n *   Generate keys to optimize frameworks that support them.\n * @property {boolean} passNode\n *   Pass `node` to components.\n * @property {Schema} schema\n *   Current schema.\n * @property {StylePropertyNameCase} stylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n * @property {boolean} tableCellAlignToStyle\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props.\n *\n * @typedef {Record<string, string>} Style\n *   Style map.\n *\n * @typedef {'css' | 'dom'} StylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n *\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`.\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`.\n *\n * @typedef {Style | boolean | number | string} Value\n *   Primitive property value and `Style` map.\n */\n\n/**\n * @typedef {RuntimeDevelopment & RegularFields} Development\n *   Configuration (development).\n * @typedef {Development | Production | Unknown} Options\n *   Configuration.\n * @typedef {RegularFields & RuntimeProduction} Production\n *   Configuration (production).\n * @typedef {RegularFields & RuntimeUnknown} Unknown\n *   Configuration (production or development).\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToObject from 'style-to-object'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they donâ€™t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JSX.Element}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpression | MdxTextExpression} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsm} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElement | MdxJsxTextElement} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesnâ€™t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    // @ts-expect-error: `style-to-object` types are broken.\n    styleToObject(value, replacer)\n  } catch (error) {\n    if (!state.ignoreInvalidStyle) {\n      const cause = /** @type {Error} */ (error)\n      const message = new VFileMessage('Cannot parse `style` attribute', {\n        ancestors: state.ancestors,\n        cause,\n        ruleId: 'style',\n        source: 'hast-util-to-jsx-runtime'\n      })\n      message.file = state.filePath || undefined\n      message.url = docs + '#cannot-parse-style-attribute'\n\n      throw message\n    }\n  }\n\n  return result\n\n  /**\n   * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS\n   * property.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function replacer(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {keyof JSX.IntrinsicElements} */ (result.value)\n\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n"],"names":["own","emptyMap","cap","dashSomething","tableElements","tableCellElement","docs","toJsxRuntime","tree","options","filePath","create","developmentCreate","productionCreate","state","svg","html","result","one","node","key","element","mdxExpression","mdxJsxElement","mdxEsm","root","text","parentSchema","schema","type","findComponentFromName","props","createElementProps","children","createChildren","child","whitespace","addNode","addChildren","expression","assert","crashEstree","createJsxElementProps","_","value","jsx","jsxs","fn","jsxDEV","isStaticChildren","point","pointStart","alignValue","prop","createProperty","style","attribute","objectExpression","property","name","index","countsByName","count","info","find","commas","spaces","styleObject","parseStyle","transformStylesToCssCasing","hastToReact","styleToObject","replacer","error","cause","message","VFileMessage","toCamel","allowExpression","identifiers","isIdentifierName","place","domCasing","cssCasing","from","transformStyleToCssCasing","to","toDash","$1","$0"],"mappings":"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","x_google_ignoreList":[0]}