{"version":3,"file":"cori.data.api572.js","sources":["../../node_modules/flatbuffers/mjs/builder.js"],"sourcesContent":["import { ByteBuffer } from \"./byte-buffer.js\";\nimport { SIZEOF_SHORT, SIZE_PREFIX_LENGTH, SIZEOF_INT, FILE_IDENTIFIER_LENGTH } from \"./constants.js\";\nexport class Builder {\n    /**\n     * Create a FlatBufferBuilder.\n     */\n    constructor(opt_initial_size) {\n        /** Minimum alignment encountered so far. */\n        this.minalign = 1;\n        /** The vtable for the current table. */\n        this.vtable = null;\n        /** The amount of fields we're actually using. */\n        this.vtable_in_use = 0;\n        /** Whether we are currently serializing a table. */\n        this.isNested = false;\n        /** Starting offset of the current struct/table. */\n        this.object_start = 0;\n        /** List of offsets of all vtables. */\n        this.vtables = [];\n        /** For the current vector being built. */\n        this.vector_num_elems = 0;\n        /** False omits default values from the serialized data */\n        this.force_defaults = false;\n        this.string_maps = null;\n        this.text_encoder = new TextEncoder();\n        let initial_size;\n        if (!opt_initial_size) {\n            initial_size = 1024;\n        }\n        else {\n            initial_size = opt_initial_size;\n        }\n        /**\n         * @type {ByteBuffer}\n         * @private\n         */\n        this.bb = ByteBuffer.allocate(initial_size);\n        this.space = initial_size;\n    }\n    clear() {\n        this.bb.clear();\n        this.space = this.bb.capacity();\n        this.minalign = 1;\n        this.vtable = null;\n        this.vtable_in_use = 0;\n        this.isNested = false;\n        this.object_start = 0;\n        this.vtables = [];\n        this.vector_num_elems = 0;\n        this.force_defaults = false;\n        this.string_maps = null;\n    }\n    /**\n     * In order to save space, fields that are set to their default value\n     * don't get serialized into the buffer. Forcing defaults provides a\n     * way to manually disable this optimization.\n     *\n     * @param forceDefaults true always serializes default values\n     */\n    forceDefaults(forceDefaults) {\n        this.force_defaults = forceDefaults;\n    }\n    /**\n     * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n     * called finish(). The actual data starts at the ByteBuffer's current position,\n     * not necessarily at 0.\n     */\n    dataBuffer() {\n        return this.bb;\n    }\n    /**\n     * Get the bytes representing the FlatBuffer. Only call this after you've\n     * called finish().\n     */\n    asUint8Array() {\n        return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n    }\n    /**\n     * Prepare to write an element of `size` after `additional_bytes` have been\n     * written, e.g. if you write a string, you need to align such the int length\n     * field is aligned to 4 bytes, and the string data follows it directly. If all\n     * you need to do is alignment, `additional_bytes` will be 0.\n     *\n     * @param size This is the of the new element to write\n     * @param additional_bytes The padding size\n     */\n    prep(size, additional_bytes) {\n        // Track the biggest thing we've ever aligned to.\n        if (size > this.minalign) {\n            this.minalign = size;\n        }\n        // Find the amount of alignment needed such that `size` is properly\n        // aligned after `additional_bytes`\n        const align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n        // Reallocate the buffer if needed.\n        while (this.space < align_size + size + additional_bytes) {\n            const old_buf_size = this.bb.capacity();\n            this.bb = Builder.growByteBuffer(this.bb);\n            this.space += this.bb.capacity() - old_buf_size;\n        }\n        this.pad(align_size);\n    }\n    pad(byte_size) {\n        for (let i = 0; i < byte_size; i++) {\n            this.bb.writeInt8(--this.space, 0);\n        }\n    }\n    writeInt8(value) {\n        this.bb.writeInt8(this.space -= 1, value);\n    }\n    writeInt16(value) {\n        this.bb.writeInt16(this.space -= 2, value);\n    }\n    writeInt32(value) {\n        this.bb.writeInt32(this.space -= 4, value);\n    }\n    writeInt64(value) {\n        this.bb.writeInt64(this.space -= 8, value);\n    }\n    writeFloat32(value) {\n        this.bb.writeFloat32(this.space -= 4, value);\n    }\n    writeFloat64(value) {\n        this.bb.writeFloat64(this.space -= 8, value);\n    }\n    /**\n     * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n     * @param value The `int8` to add the buffer.\n     */\n    addInt8(value) {\n        this.prep(1, 0);\n        this.writeInt8(value);\n    }\n    /**\n     * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n     * @param value The `int16` to add the buffer.\n     */\n    addInt16(value) {\n        this.prep(2, 0);\n        this.writeInt16(value);\n    }\n    /**\n     * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n     * @param value The `int32` to add the buffer.\n     */\n    addInt32(value) {\n        this.prep(4, 0);\n        this.writeInt32(value);\n    }\n    /**\n     * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n     * @param value The `int64` to add the buffer.\n     */\n    addInt64(value) {\n        this.prep(8, 0);\n        this.writeInt64(value);\n    }\n    /**\n     * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n     * @param value The `float32` to add the buffer.\n     */\n    addFloat32(value) {\n        this.prep(4, 0);\n        this.writeFloat32(value);\n    }\n    /**\n     * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n     * @param value The `float64` to add the buffer.\n     */\n    addFloat64(value) {\n        this.prep(8, 0);\n        this.writeFloat64(value);\n    }\n    addFieldInt8(voffset, value, defaultValue) {\n        if (this.force_defaults || value != defaultValue) {\n            this.addInt8(value);\n            this.slot(voffset);\n        }\n    }\n    addFieldInt16(voffset, value, defaultValue) {\n        if (this.force_defaults || value != defaultValue) {\n            this.addInt16(value);\n            this.slot(voffset);\n        }\n    }\n    addFieldInt32(voffset, value, defaultValue) {\n        if (this.force_defaults || value != defaultValue) {\n            this.addInt32(value);\n            this.slot(voffset);\n        }\n    }\n    addFieldInt64(voffset, value, defaultValue) {\n        if (this.force_defaults || value !== defaultValue) {\n            this.addInt64(value);\n            this.slot(voffset);\n        }\n    }\n    addFieldFloat32(voffset, value, defaultValue) {\n        if (this.force_defaults || value != defaultValue) {\n            this.addFloat32(value);\n            this.slot(voffset);\n        }\n    }\n    addFieldFloat64(voffset, value, defaultValue) {\n        if (this.force_defaults || value != defaultValue) {\n            this.addFloat64(value);\n            this.slot(voffset);\n        }\n    }\n    addFieldOffset(voffset, value, defaultValue) {\n        if (this.force_defaults || value != defaultValue) {\n            this.addOffset(value);\n            this.slot(voffset);\n        }\n    }\n    /**\n     * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n     */\n    addFieldStruct(voffset, value, defaultValue) {\n        if (value != defaultValue) {\n            this.nested(value);\n            this.slot(voffset);\n        }\n    }\n    /**\n     * Structures are always stored inline, they need to be created right\n     * where they're used.  You'll get this assertion failure if you\n     * created it elsewhere.\n     */\n    nested(obj) {\n        if (obj != this.offset()) {\n            throw new TypeError('FlatBuffers: struct must be serialized inline.');\n        }\n    }\n    /**\n     * Should not be creating any other object, string or vector\n     * while an object is being constructed\n     */\n    notNested() {\n        if (this.isNested) {\n            throw new TypeError('FlatBuffers: object serialization must not be nested.');\n        }\n    }\n    /**\n     * Set the current vtable at `voffset` to the current location in the buffer.\n     */\n    slot(voffset) {\n        if (this.vtable !== null)\n            this.vtable[voffset] = this.offset();\n    }\n    /**\n     * @returns Offset relative to the end of the buffer.\n     */\n    offset() {\n        return this.bb.capacity() - this.space;\n    }\n    /**\n     * Doubles the size of the backing ByteBuffer and copies the old data towards\n     * the end of the new buffer (since we build the buffer backwards).\n     *\n     * @param bb The current buffer with the existing data\n     * @returns A new byte buffer with the old data copied\n     * to it. The data is located at the end of the buffer.\n     *\n     * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n     * it a uint8Array we need to suppress the type check:\n     * @suppress {checkTypes}\n     */\n    static growByteBuffer(bb) {\n        const old_buf_size = bb.capacity();\n        // Ensure we don't grow beyond what fits in an int.\n        if (old_buf_size & 0xC0000000) {\n            throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n        }\n        const new_buf_size = old_buf_size << 1;\n        const nbb = ByteBuffer.allocate(new_buf_size);\n        nbb.setPosition(new_buf_size - old_buf_size);\n        nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n        return nbb;\n    }\n    /**\n     * Adds on offset, relative to where it will be written.\n     *\n     * @param offset The offset to add.\n     */\n    addOffset(offset) {\n        this.prep(SIZEOF_INT, 0); // Ensure alignment is already done.\n        this.writeInt32(this.offset() - offset + SIZEOF_INT);\n    }\n    /**\n     * Start encoding a new object in the buffer.  Users will not usually need to\n     * call this directly. The FlatBuffers compiler will generate helper methods\n     * that call this method internally.\n     */\n    startObject(numfields) {\n        this.notNested();\n        if (this.vtable == null) {\n            this.vtable = [];\n        }\n        this.vtable_in_use = numfields;\n        for (let i = 0; i < numfields; i++) {\n            this.vtable[i] = 0; // This will push additional elements as needed\n        }\n        this.isNested = true;\n        this.object_start = this.offset();\n    }\n    /**\n     * Finish off writing the object that is under construction.\n     *\n     * @returns The offset to the object inside `dataBuffer`\n     */\n    endObject() {\n        if (this.vtable == null || !this.isNested) {\n            throw new Error('FlatBuffers: endObject called without startObject');\n        }\n        this.addInt32(0);\n        const vtableloc = this.offset();\n        // Trim trailing zeroes.\n        let i = this.vtable_in_use - 1;\n        // eslint-disable-next-line no-empty\n        for (; i >= 0 && this.vtable[i] == 0; i--) { }\n        const trimmed_size = i + 1;\n        // Write out the current vtable.\n        for (; i >= 0; i--) {\n            // Offset relative to the start of the table.\n            this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n        }\n        const standard_fields = 2; // The fields below:\n        this.addInt16(vtableloc - this.object_start);\n        const len = (trimmed_size + standard_fields) * SIZEOF_SHORT;\n        this.addInt16(len);\n        // Search for an existing vtable that matches the current one.\n        let existing_vtable = 0;\n        const vt1 = this.space;\n        outer_loop: for (i = 0; i < this.vtables.length; i++) {\n            const vt2 = this.bb.capacity() - this.vtables[i];\n            if (len == this.bb.readInt16(vt2)) {\n                for (let j = SIZEOF_SHORT; j < len; j += SIZEOF_SHORT) {\n                    if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n                        continue outer_loop;\n                    }\n                }\n                existing_vtable = this.vtables[i];\n                break;\n            }\n        }\n        if (existing_vtable) {\n            // Found a match:\n            // Remove the current vtable.\n            this.space = this.bb.capacity() - vtableloc;\n            // Point table to existing vtable.\n            this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n        }\n        else {\n            // No match:\n            // Add the location of the current vtable to the list of vtables.\n            this.vtables.push(this.offset());\n            // Point table to current vtable.\n            this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n        }\n        this.isNested = false;\n        return vtableloc;\n    }\n    /**\n     * Finalize a buffer, poiting to the given `root_table`.\n     */\n    finish(root_table, opt_file_identifier, opt_size_prefix) {\n        const size_prefix = opt_size_prefix ? SIZE_PREFIX_LENGTH : 0;\n        if (opt_file_identifier) {\n            const file_identifier = opt_file_identifier;\n            this.prep(this.minalign, SIZEOF_INT +\n                FILE_IDENTIFIER_LENGTH + size_prefix);\n            if (file_identifier.length != FILE_IDENTIFIER_LENGTH) {\n                throw new TypeError('FlatBuffers: file identifier must be length ' +\n                    FILE_IDENTIFIER_LENGTH);\n            }\n            for (let i = FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n                this.writeInt8(file_identifier.charCodeAt(i));\n            }\n        }\n        this.prep(this.minalign, SIZEOF_INT + size_prefix);\n        this.addOffset(root_table);\n        if (size_prefix) {\n            this.addInt32(this.bb.capacity() - this.space);\n        }\n        this.bb.setPosition(this.space);\n    }\n    /**\n     * Finalize a size prefixed buffer, pointing to the given `root_table`.\n     */\n    finishSizePrefixed(root_table, opt_file_identifier) {\n        this.finish(root_table, opt_file_identifier, true);\n    }\n    /**\n     * This checks a required field has been set in a given table that has\n     * just been constructed.\n     */\n    requiredField(table, field) {\n        const table_start = this.bb.capacity() - table;\n        const vtable_start = table_start - this.bb.readInt32(table_start);\n        const ok = field < this.bb.readInt16(vtable_start) &&\n            this.bb.readInt16(vtable_start + field) != 0;\n        // If this fails, the caller will show what field needs to be set.\n        if (!ok) {\n            throw new TypeError('FlatBuffers: field ' + field + ' must be set');\n        }\n    }\n    /**\n     * Start a new array/vector of objects.  Users usually will not call\n     * this directly. The FlatBuffers compiler will create a start/end\n     * method for vector types in generated code.\n     *\n     * @param elem_size The size of each element in the array\n     * @param num_elems The number of elements in the array\n     * @param alignment The alignment of the array\n     */\n    startVector(elem_size, num_elems, alignment) {\n        this.notNested();\n        this.vector_num_elems = num_elems;\n        this.prep(SIZEOF_INT, elem_size * num_elems);\n        this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n    }\n    /**\n     * Finish off the creation of an array and all its elements. The array must be\n     * created with `startVector`.\n     *\n     * @returns The offset at which the newly created array\n     * starts.\n     */\n    endVector() {\n        this.writeInt32(this.vector_num_elems);\n        return this.offset();\n    }\n    /**\n     * Encode the string `s` in the buffer using UTF-8. If the string passed has\n     * already been seen, we return the offset of the already written string\n     *\n     * @param s The string to encode\n     * @return The offset in the buffer where the encoded string starts\n     */\n    createSharedString(s) {\n        if (!s) {\n            return 0;\n        }\n        if (!this.string_maps) {\n            this.string_maps = new Map();\n        }\n        if (this.string_maps.has(s)) {\n            return this.string_maps.get(s);\n        }\n        const offset = this.createString(s);\n        this.string_maps.set(s, offset);\n        return offset;\n    }\n    /**\n     * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n     * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n     *\n     * @param s The string to encode\n     * @return The offset in the buffer where the encoded string starts\n     */\n    createString(s) {\n        if (s === null || s === undefined) {\n            return 0;\n        }\n        let utf8;\n        if (s instanceof Uint8Array) {\n            utf8 = s;\n        }\n        else {\n            utf8 = this.text_encoder.encode(s);\n        }\n        this.addInt8(0);\n        this.startVector(1, utf8.length, 1);\n        this.bb.setPosition(this.space -= utf8.length);\n        for (let i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n            bytes[offset++] = utf8[i];\n        }\n        return this.endVector();\n    }\n    /**\n     * A helper function to pack an object\n     *\n     * @returns offset of obj\n     */\n    createObjectOffset(obj) {\n        if (obj === null) {\n            return 0;\n        }\n        if (typeof obj === 'string') {\n            return this.createString(obj);\n        }\n        else {\n            return obj.pack(this);\n        }\n    }\n    /**\n     * A helper function to pack a list of object\n     *\n     * @returns list of offsets of each non null object\n     */\n    createObjectOffsetList(list) {\n        const ret = [];\n        for (let i = 0; i < list.length; ++i) {\n            const val = list[i];\n            if (val !== null) {\n                ret.push(this.createObjectOffset(val));\n            }\n            else {\n                throw new TypeError('FlatBuffers: Argument for createObjectOffsetList cannot contain null.');\n            }\n        }\n        return ret;\n    }\n    createStructOffsetList(list, startFunc) {\n        startFunc(this, list.length);\n        this.createObjectOffsetList(list.slice().reverse());\n        return this.endVector();\n    }\n}\n"],"names":["Builder","opt_initial_size","initial_size","ByteBuffer","forceDefaults","size","additional_bytes","align_size","old_buf_size","byte_size","i","value","voffset","defaultValue","obj","bb","new_buf_size","nbb","offset","SIZEOF_INT","numfields","vtableloc","trimmed_size","standard_fields","len","SIZEOF_SHORT","existing_vtable","vt1","outer_loop","vt2","j","root_table","opt_file_identifier","opt_size_prefix","size_prefix","SIZE_PREFIX_LENGTH","file_identifier","FILE_IDENTIFIER_LENGTH","table","field","table_start","vtable_start","elem_size","num_elems","alignment","s","utf8","bytes","list","ret","val","startFunc"],"mappings":"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","x_google_ignoreList":[0]}