{"version":3,"file":"cori.data.api616.js","sources":["../../node_modules/apache-arrow/builder/binary.mjs"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BufferBuilder } from './buffer.mjs';\nimport { VariableWidthBuilder } from '../builder.mjs';\nimport { toUint8Array } from '../util/buffer.mjs';\n/** @ignore */\nexport class BinaryBuilder extends VariableWidthBuilder {\n    constructor(opts) {\n        super(opts);\n        this._values = new BufferBuilder(Uint8Array);\n    }\n    get byteLength() {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    setValue(index, value) {\n        return super.setValue(index, toUint8Array(value));\n    }\n    _flushPending(pending, pendingLength) {\n        const offsets = this._offsets;\n        const data = this._values.reserve(pendingLength).buffer;\n        let offset = 0;\n        for (const [index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            }\n            else {\n                const length = value.length;\n                data.set(value, offset);\n                offsets.set(index, length);\n                offset += length;\n            }\n        }\n    }\n}\n\n//# sourceMappingURL=binary.mjs.map\n"],"names":["BinaryBuilder","VariableWidthBuilder","opts","BufferBuilder","size","index","value","toUint8Array","pending","pendingLength","offsets","data","offset","length"],"mappings":";;;;;;;;;AAoBO,MAAMA,UAAsBC,EAAqB;AAAA,EACpD,YAAYC,GAAM;AACd,UAAMA,CAAI,GACV,KAAK,UAAU,IAAIC,EAAc,UAAU;AAAA,EAC9C;AAAA,EACD,IAAI,aAAa;AACb,QAAIC,IAAO,KAAK,iBAAkB,KAAK,SAAS;AAChD,gBAAK,aAAaA,KAAQ,KAAK,SAAS,aACxC,KAAK,YAAYA,KAAQ,KAAK,QAAQ,aACtC,KAAK,WAAWA,KAAQ,KAAK,OAAO,aAC7BA;AAAA,EACV;AAAA,EACD,SAASC,GAAOC,GAAO;AACnB,WAAO,MAAM,SAASD,GAAOE,EAAaD,CAAK,CAAC;AAAA,EACnD;AAAA,EACD,cAAcE,GAASC,GAAe;AAClC,UAAMC,IAAU,KAAK,UACfC,IAAO,KAAK,QAAQ,QAAQF,CAAa,EAAE;AACjD,QAAIG,IAAS;AACb,eAAW,CAACP,GAAOC,CAAK,KAAKE;AACzB,UAAIF,MAAU;AACV,QAAAI,EAAQ,IAAIL,GAAO,CAAC;AAAA,WAEnB;AACD,cAAMQ,IAASP,EAAM;AACrB,QAAAK,EAAK,IAAIL,GAAOM,CAAM,GACtBF,EAAQ,IAAIL,GAAOQ,CAAM,GACzBD,KAAUC;AAAA,MACb;AAAA,EAER;AACL;","x_google_ignoreList":[0]}