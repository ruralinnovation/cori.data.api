{"version":3,"file":"cori.data.api682.js","sources":["../../node_modules/micromark-core-commonmark/lib/character-reference.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}"],"names":["characterReference","tokenizeCharacterReference","effects","ok","nok","self","size","max","test","start","code","open","numeric","asciiAlphanumeric","value","asciiHexDigit","asciiDigit","token","decodeNamedCharacterReference"],"mappings":";;;;;;;;AAWY,MAACA,IAAqB;AAAA,EAChC,MAAM;AAAA,EACN,UAAUC;AACZ;AAMA,SAASA,EAA2BC,GAASC,GAAIC,GAAK;AACpD,QAAMC,IAAO;AACb,MAAIC,IAAO,GAEPC,GAEAC;AACJ,SAAOC;AAgBP,WAASA,EAAMC,GAAM;AACnB,WAAAR,EAAQ,MAAM,oBAAoB,GAClCA,EAAQ,MAAM,0BAA0B,GACxCA,EAAQ,QAAQQ,CAAI,GACpBR,EAAQ,KAAK,0BAA0B,GAChCS;AAAA,EACR;AAiBD,WAASA,EAAKD,GAAM;AAClB,WAAIA,MAAS,MACXR,EAAQ,MAAM,iCAAiC,GAC/CA,EAAQ,QAAQQ,CAAI,GACpBR,EAAQ,KAAK,iCAAiC,GACvCU,MAETV,EAAQ,MAAM,yBAAyB,GACvCK,IAAM,IACNC,IAAOK,GACAC,EAAMJ,CAAI;AAAA,EAClB;AAcD,WAASE,EAAQF,GAAM;AACrB,WAAIA,MAAS,MAAMA,MAAS,OAC1BR,EAAQ,MAAM,qCAAqC,GACnDA,EAAQ,QAAQQ,CAAI,GACpBR,EAAQ,KAAK,qCAAqC,GAClDA,EAAQ,MAAM,yBAAyB,GACvCK,IAAM,GACNC,IAAOO,GACAD,MAETZ,EAAQ,MAAM,yBAAyB,GACvCK,IAAM,GACNC,IAAOQ,GACAF,EAAMJ,CAAI;AAAA,EAClB;AAmBD,WAASI,EAAMJ,GAAM;AACnB,QAAIA,MAAS,MAAMJ,GAAM;AACvB,YAAMW,IAAQf,EAAQ,KAAK,yBAAyB;AACpD,aAAIM,MAASK,KAAqB,CAACK,EAA8Bb,EAAK,eAAeY,CAAK,CAAC,IAClFb,EAAIM,CAAI,KAKjBR,EAAQ,MAAM,0BAA0B,GACxCA,EAAQ,QAAQQ,CAAI,GACpBR,EAAQ,KAAK,0BAA0B,GACvCA,EAAQ,KAAK,oBAAoB,GAC1BC;AAAA,IACR;AACD,WAAIK,EAAKE,CAAI,KAAKJ,MAASC,KACzBL,EAAQ,QAAQQ,CAAI,GACbI,KAEFV,EAAIM,CAAI;AAAA,EAChB;AACH;","x_google_ignoreList":[0]}