{"version":3,"file":"cori.data.api362.js","sources":["../../node_modules/mdast-util-to-hast/lib/handlers/code.js"],"sourcesContent":["/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n"],"names":["code","state","node","value","properties","result"],"mappings":";;;;;;AAoBO,SAASA,EAAKC,GAAOC,GAAM;AAChC,QAAMC,IAAQD,EAAK,QAAQA,EAAK,QAAQ;AAAA,IAAO,IAEzCE,IAAa,CAAE;AAErB,EAAIF,EAAK,SACPE,EAAW,YAAY,CAAC,cAAcF,EAAK,IAAI;AAKjD,MAAIG,IAAS;AAAA,IACX,MAAM;AAAA,IACN,SAAS;AAAA,IACT,YAAAD;AAAA,IACA,UAAU,CAAC,EAAC,MAAM,QAAQ,OAAAD,EAAK,CAAC;AAAA,EACjC;AAED,SAAID,EAAK,SACPG,EAAO,OAAO,EAAC,MAAMH,EAAK,KAAI,IAGhCD,EAAM,MAAMC,GAAMG,CAAM,GACxBA,IAASJ,EAAM,UAAUC,GAAMG,CAAM,GAGrCA,IAAS,EAAC,MAAM,WAAW,SAAS,OAAO,YAAY,IAAI,UAAU,CAACA,CAAM,EAAC,GAC7EJ,EAAM,MAAMC,GAAMG,CAAM,GACjBA;AACT;","x_google_ignoreList":[0]}