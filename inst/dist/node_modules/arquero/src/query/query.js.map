{"version":3,"file":"query.js","sources":["../../../../../../node_modules/arquero/src/query/query.js"],"sourcesContent":["import Transformable from '../table/transformable';\nimport { Query as QueryType } from './constants';\nimport { Verb, Verbs } from './verb';\n\n/**\n * Create a new query instance. The query interface provides\n * a table-like verb API to construct a query that can be\n * serialized or evaluated against Arquero tables.\n * @param {string} [tableName] The name of the table to query. If\n *  provided, will be used as the default input table to pull from\n *  a provided catalog to run the query against.\n * @return {Query} A new builder instance.\n */\nexport function query(tableName) {\n  return new Query(null, null, tableName);\n}\n\n/**\n * Create a new query instance from a serialized object.\n * @param {object} object A serialized query representation, such as\n *  those generated by query(...).toObject().\n * @returns {Query} The instantiated query instance.\n */\nexport function queryFrom(object) {\n  return Query.from(object);\n}\n\n/**\n * Model a query as a collection of serializble verbs.\n * Provides a table-like interface for constructing queries.\n */\nexport default class Query extends Transformable {\n\n  /**\n   * Construct a new query instance.\n   * @param {Verb[]} verbs An array of verb instances.\n   * @param {object} [params] Optional query parameters, corresponding\n   *  to parameter references in table expressions.\n   * @param {string} [table] Optional name of the table to query.\n   */\n  constructor(verbs, params, table) {\n    super(params);\n    this._verbs = verbs || [];\n    this._table = table;\n  }\n\n  /**\n   * Create a new query instance from the given serialized object.\n   * @param {QueryObject} object A serialized query representation, such as\n   *  those generated by Query.toObject.\n   * @returns {Query} The instantiated query.\n   */\n  static from({ verbs, table, params }) {\n    return new Query(verbs.map(Verb.from), params, table);\n  }\n\n  /**\n   * Provide an informative object string tag.\n   */\n  get [Symbol.toStringTag]() {\n    if (!this._verbs) return 'Object'; // bail if called on prototype\n    const ns = this._verbs.length;\n    return `Query: ${ns} verbs` + (this._table ? ` on '${this._table}'` : '');\n  }\n\n  /**\n   * Return the number of verbs in this query.\n   */\n  get length() {\n    return this._verbs.length;\n  }\n\n  /**\n   * Return the name of the table this query applies to.\n   * @return {string} The name of the source table, or undefined.\n   */\n  get tableName() {\n    return this._table;\n  }\n\n  /**\n   * Get or set table expression parameter values.\n   * If called with no arguments, returns the current parameter values\n   * as an object. Otherwise, adds the provided parameters to this\n   * query's parameter set and returns the table. Any prior parameters\n   * with names matching the input parameters are overridden.\n   * @param {object} values The parameter values.\n   * @return {Query|object} The current parameter values (if called\n   *  with no arguments) or this query.\n   */\n  params(values) {\n    if (arguments.length) {\n      this._params = { ...this._params, ...values };\n      return this;\n    } else {\n      return this._params;\n    }\n  }\n\n  /**\n   * Evaluate this query against a given table and catalog.\n   * @param {Table} table The Arquero table to process.\n   * @param {Function} catalog A table lookup function that accepts a table\n   *  name string as input and returns a corresponding Arquero table.\n   * @returns {Table} The resulting Arquero table.\n   */\n  evaluate(table, catalog) {\n    table = table || catalog(this._table);\n    for (const verb of this._verbs) {\n      table = verb.evaluate(table.params(this._params), catalog);\n    }\n    return table;\n  }\n\n  /**\n   * Serialize this query as a JSON-compatible object. The resulting\n   * object can be passed to Query.from to re-instantiate this query.\n   * @returns {object} A JSON-compatible object representing this query.\n   */\n  toObject() {\n    return serialize(this, 'toObject');\n  }\n\n  /**\n   * Serialize this query as a JSON-compatible object. The resulting\n   * object can be passed to Query.from to re-instantiate this query.\n   * This method simply returns the result of toObject, but is provided\n   * as a separate method to allow later customization of JSON export.\n   * @returns {object} A JSON-compatible object representing this query.\n   */\n  toJSON() {\n    return this.toObject();\n  }\n\n  /**\n   * Serialize this query to a JSON-compatible abstract syntax tree.\n   * All table expressions will be parsed and represented as AST instances\n   * using a modified form of the Mozilla JavaScript AST format.\n   * This method can be used to output parsed and serialized representations\n   * to translate Arquero queries to alternative data processing platforms.\n   * @returns {object} A JSON-compatible abstract syntax tree object.\n   */\n  toAST() {\n    return serialize(this, 'toAST', { type: QueryType });\n  }\n}\n\n/**\n * Abstract class representing a data table.\n * @typedef {import('../table/table').default} Table\n */\n\n/**\n * Serialized object representation of a query.\n * @typedef {object} QueryObject\n * @property {object[]} verbs An array of verb definitions.\n * @property {object} [params] An object of parameter values.\n * @property {string} [table] The name of the table to query.\n */\n\nfunction serialize(query, method, props) {\n  return {\n    ...props,\n    verbs: query._verbs.map(verb => verb[method]()),\n    ...(query._params ? { params: query._params } : null),\n    ...(query._table ? { table: query._table } : null)\n  };\n}\n\nfunction append(qb, verb) {\n  return new Query(\n    qb._verbs.concat(verb),\n    qb._params,\n    qb._table\n  );\n}\n\nexport function addQueryVerb(name, verb) {\n  Query.prototype[name] = function(...args) {\n    return append(this, verb(...args));\n  };\n}\n\n// Internal verb handlers\nfor (const name in Verbs) {\n  const verb = Verbs[name];\n  Query.prototype['__' + name] = function(qb, ...args) {\n    return append(qb, verb(...args));\n  };\n}"],"names":["QueryType"],"mappings":"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","x_google_ignoreList":[0]}