{"version":3,"file":"cori.data.api586.js","sources":["../../node_modules/apache-arrow/fb/time.mjs"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\nimport { TimeUnit } from './time-unit.mjs';\n/**\n * Time is either a 32-bit or 64-bit signed integer type representing an\n * elapsed time since midnight, stored in either of four units: seconds,\n * milliseconds, microseconds or nanoseconds.\n *\n * The integer `bitWidth` depends on the `unit` and must be one of the following:\n * * SECOND and MILLISECOND: 32 bits\n * * MICROSECOND and NANOSECOND: 64 bits\n *\n * The allowed values are between 0 (inclusive) and 86400 (=24*60*60) seconds\n * (exclusive), adjusted for the time unit (for example, up to 86400000\n * exclusive for the MILLISECOND unit).\n * This definition doesn't allow for leap seconds. Time values from\n * measurements with leap seconds will need to be corrected when ingesting\n * into Arrow (for example by replacing the value 86400 with 86399).\n */\nexport class Time {\n    constructor() {\n        this.bb = null;\n        this.bb_pos = 0;\n    }\n    __init(i, bb) {\n        this.bb_pos = i;\n        this.bb = bb;\n        return this;\n    }\n    static getRootAsTime(bb, obj) {\n        return (obj || new Time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    static getSizePrefixedRootAsTime(bb, obj) {\n        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n        return (obj || new Time()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n    unit() {\n        const offset = this.bb.__offset(this.bb_pos, 4);\n        return offset ? this.bb.readInt16(this.bb_pos + offset) : TimeUnit.MILLISECOND;\n    }\n    bitWidth() {\n        const offset = this.bb.__offset(this.bb_pos, 6);\n        return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n    }\n    static startTime(builder) {\n        builder.startObject(2);\n    }\n    static addUnit(builder, unit) {\n        builder.addFieldInt16(0, unit, TimeUnit.MILLISECOND);\n    }\n    static addBitWidth(builder, bitWidth) {\n        builder.addFieldInt32(1, bitWidth, 32);\n    }\n    static endTime(builder) {\n        const offset = builder.endObject();\n        return offset;\n    }\n    static createTime(builder, unit, bitWidth) {\n        Time.startTime(builder);\n        Time.addUnit(builder, unit);\n        Time.addBitWidth(builder, bitWidth);\n        return Time.endTime(builder);\n    }\n}\n\n//# sourceMappingURL=time.mjs.map\n"],"names":["Time","i","bb","obj","flatbuffers.SIZE_PREFIX_LENGTH","offset","TimeUnit","builder","unit","bitWidth"],"mappings":";;;;;;;;;;AAmBO,MAAMA,EAAK;AAAA,EACd,cAAc;AACV,SAAK,KAAK,MACV,KAAK,SAAS;AAAA,EACjB;AAAA,EACD,OAAOC,GAAGC,GAAI;AACV,gBAAK,SAASD,GACd,KAAK,KAAKC,GACH;AAAA,EACV;AAAA,EACD,OAAO,cAAcA,GAAIC,GAAK;AAC1B,YAAQA,KAAO,IAAIH,EAAI,GAAI,OAAOE,EAAG,UAAUA,EAAG,SAAU,CAAA,IAAIA,EAAG,SAAU,GAAEA,CAAE;AAAA,EACpF;AAAA,EACD,OAAO,0BAA0BA,GAAIC,GAAK;AACtC,WAAAD,EAAG,YAAYA,EAAG,SAAU,IAAGE,CAA8B,IACrDD,KAAO,IAAIH,EAAI,GAAI,OAAOE,EAAG,UAAUA,EAAG,SAAU,CAAA,IAAIA,EAAG,SAAU,GAAEA,CAAE;AAAA,EACpF;AAAA,EACD,OAAO;AACH,UAAMG,IAAS,KAAK,GAAG,SAAS,KAAK,QAAQ,CAAC;AAC9C,WAAOA,IAAS,KAAK,GAAG,UAAU,KAAK,SAASA,CAAM,IAAIC,EAAS;AAAA,EACtE;AAAA,EACD,WAAW;AACP,UAAMD,IAAS,KAAK,GAAG,SAAS,KAAK,QAAQ,CAAC;AAC9C,WAAOA,IAAS,KAAK,GAAG,UAAU,KAAK,SAASA,CAAM,IAAI;AAAA,EAC7D;AAAA,EACD,OAAO,UAAUE,GAAS;AACtB,IAAAA,EAAQ,YAAY,CAAC;AAAA,EACxB;AAAA,EACD,OAAO,QAAQA,GAASC,GAAM;AAC1B,IAAAD,EAAQ,cAAc,GAAGC,GAAMF,EAAS,WAAW;AAAA,EACtD;AAAA,EACD,OAAO,YAAYC,GAASE,GAAU;AAClC,IAAAF,EAAQ,cAAc,GAAGE,GAAU,EAAE;AAAA,EACxC;AAAA,EACD,OAAO,QAAQF,GAAS;AAEpB,WADeA,EAAQ;EAE1B;AAAA,EACD,OAAO,WAAWA,GAASC,GAAMC,GAAU;AACvC,WAAAT,EAAK,UAAUO,CAAO,GACtBP,EAAK,QAAQO,GAASC,CAAI,GAC1BR,EAAK,YAAYO,GAASE,CAAQ,GAC3BT,EAAK,QAAQO,CAAO;AAAA,EAC9B;AACL;","x_google_ignoreList":[0]}