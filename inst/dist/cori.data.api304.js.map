{"version":3,"file":"cori.data.api304.js","sources":["../../node_modules/arquero/src/expression/parse.js"],"sourcesContent":["import { Column, Literal, Op } from './ast/constants';\nimport clean from './ast/clean';\nimport { is } from './ast/util';\nimport codegen from './codegen';\nimport compile from './compile';\nimport entries from '../util/entries';\nimport error from '../util/error';\nimport isFunction from '../util/is-function';\nimport isObject from '../util/is-object';\nimport parseEscape from './parse-escape';\nimport parseExpression from './parse-expression';\n\nconst ANNOTATE = { [Column]: 1, [Op]: 1 };\n\nexport default function(input, opt = {}) {\n  const generate = opt.generate || codegen;\n  const compiler = opt.compiler || compile;\n  const params = getParams(opt);\n  const fields = {};\n  const opcall = {};\n  const names = [];\n  const exprs = [];\n  let fieldId = 0;\n  let opId = -1;\n\n  const compileExpr = opt.join ? compiler.join\n    : opt.index == 1 ? compiler.expr2\n    : compiler.expr;\n\n  // parser context\n  const ctx = {\n    op(op) {\n      const key = opKey(op);\n      return opcall[key] || (op.id = ++opId, opcall[key] = op);\n    },\n    field(node) {\n      const code = generate(node);\n      return fields[code] || (fields[code] = ++fieldId);\n    },\n    param(node) {\n      return is(Literal, node)\n        ? node.value\n        : compiler.param(generate(node), params);\n    },\n    value(name, node) {\n      names.push(name);\n      const e = node.escape || (opt.ast\n        ? clean(node)\n        : compileExpr(generate(node), params));\n      exprs.push(e);\n      // annotate expression if it is a direct column or op access\n      // this permits downstream optimizations\n      if (ANNOTATE[node.type] && e !== node && isObject(e)) {\n        e.field = node.name;\n      }\n    },\n    error(node, msg, note = '') {\n      // both expresions and fields are parsed\n      // with added code prefixes of length 6!\n      const i = node.start - 6;\n      const j = node.end - 6;\n      const snippet = String(ctx.spec).slice(i, j);\n      error(`${msg}: \"${snippet}\"${note}`);\n    }\n  };\n\n  // copy all options to context, potentially overwriting methods\n  Object.assign(ctx, opt, { params });\n\n  // parse each expression\n  for (const [name, value] of entries(input)) {\n    ctx.value(\n      name + '',\n      value.escape\n        ? parseEscape(ctx, value, params)\n        : parseExpression(ctx, value)\n    );\n  }\n\n  // return expression asts if requested\n  if (opt.ast) {\n    return { names, exprs };\n  }\n\n  // compile input field accessors\n  const f = [];\n  for (const key in fields) {\n    f[fields[key]] = compiler.expr(key, params);\n  }\n\n  // resolve input fields to operations\n  const ops = Object.values(opcall);\n  ops.forEach(op => op.fields = op.fields.map(id => f[id]));\n\n  return { names, exprs, ops };\n}\n\nfunction opKey(op) {\n  let key = `${op.name}(${op.fields.concat(op.params).join(',')})`;\n  if (op.frame) {\n    const frame = op.frame.map(v => Number.isFinite(v) ? Math.abs(v) : -1);\n    key += `[${frame},${!!op.peers}]`;\n  }\n  return key;\n}\n\nfunction getParams(opt) {\n  return (opt.table ? getTableParams(opt.table)\n    : opt.join ? {\n        ...getTableParams(opt.join[1]),\n        ...getTableParams(opt.join[0])\n      }\n    : {}) || {};\n}\n\nfunction getTableParams(table) {\n  return table && isFunction(table.params) ? table.params() : {};\n}"],"names":["ANNOTATE","Column","Op","parse","input","opt","generate","codegen","compiler","compile","params","getParams","fields","opcall","names","exprs","fieldId","opId","compileExpr","ctx","op","key","opKey","node","code","is","Literal","name","e","clean","isObject","msg","note","i","j","snippet","error","value","entries","parseEscape","parseExpression","f","ops","id","frame","v","getTableParams","table","isFunction"],"mappings":"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","x_google_ignoreList":[0]}