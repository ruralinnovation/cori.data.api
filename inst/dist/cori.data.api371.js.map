{"version":3,"file":"cori.data.api371.js","sources":["../../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js"],"sourcesContent":["/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n"],"names":["inlineCode","state","node","text","result"],"mappings":";;;;;;AAoBO,SAASA,EAAWC,GAAOC,GAAM;AAEtC,QAAMC,IAAO,EAAC,MAAM,QAAQ,OAAOD,EAAK,MAAM,QAAQ,aAAa,GAAG,EAAC;AACvE,EAAAD,EAAM,MAAMC,GAAMC,CAAI;AAGtB,QAAMC,IAAS;AAAA,IACb,MAAM;AAAA,IACN,SAAS;AAAA,IACT,YAAY,CAAE;AAAA,IACd,UAAU,CAACD,CAAI;AAAA,EAChB;AACD,SAAAF,EAAM,MAAMC,GAAME,CAAM,GACjBH,EAAM,UAAUC,GAAME,CAAM;AACrC;","x_google_ignoreList":[0]}