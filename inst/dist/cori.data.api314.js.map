{"version":3,"file":"cori.data.api314.js","sources":["../../node_modules/arquero/src/expression/ast/walk.js"],"sourcesContent":["export default function walk(node, ctx, visitors, parent) {\n  const visit = visitors[node.type] || visitors['Default'];\n  if (visit && visit(node, ctx, parent) === false) return;\n\n  const walker = walkers[node.type];\n  if (walker) walker(node, ctx, visitors);\n}\n\nconst unary = (node, ctx, visitors) => {\n  walk(node.argument, ctx, visitors, node);\n};\n\nconst binary = (node, ctx, visitors) => {\n  walk(node.left, ctx, visitors, node);\n  walk(node.right, ctx, visitors, node);\n};\n\nconst ternary = (node, ctx, visitors) => {\n  walk(node.test, ctx, visitors, node);\n  walk(node.consequent, ctx, visitors, node);\n  if (node.alternate) walk(node.alternate, ctx, visitors, node);\n};\n\nconst func = (node, ctx, visitors) => {\n  list(node.params, ctx, visitors, node);\n  walk(node.body, ctx, visitors, node);\n};\n\nconst call = (node, ctx, visitors) => {\n  walk(node.callee, ctx, visitors, node);\n  list(node.arguments, ctx, visitors, node);\n};\n\nconst list = (nodes, ctx, visitors, node) => {\n  nodes.forEach(item => walk(item, ctx, visitors, node));\n};\n\nconst walkers = {\n  TemplateLiteral: (node, ctx, visitors) => {\n    list(node.expressions, ctx, visitors, node);\n    list(node.quasis, ctx, visitors, node);\n  },\n  MemberExpression: (node, ctx, visitors) => {\n    walk(node.object, ctx, visitors, node);\n    walk(node.property, ctx, visitors, node);\n  },\n  CallExpression: call,\n  NewExpression: call,\n  ArrayExpression: (node, ctx, visitors) => {\n    list(node.elements, ctx, visitors, node);\n  },\n  AssignmentExpression: binary,\n  AwaitExpression: unary,\n  BinaryExpression: binary,\n  LogicalExpression: binary,\n  UnaryExpression: unary,\n  UpdateExpression: unary,\n  ConditionalExpression: ternary,\n  ObjectExpression: (node, ctx, visitors) => {\n    list(node.properties, ctx, visitors, node);\n  },\n  Property: (node, ctx, visitors) => {\n    walk(node.key, ctx, visitors, node);\n    walk(node.value, ctx, visitors, node);\n  },\n\n  ArrowFunctionExpression: func,\n  FunctionExpression: func,\n  FunctionDeclaration: func,\n\n  VariableDeclaration: (node, ctx, visitors) => {\n    list(node.declarations, ctx, visitors, node);\n  },\n  VariableDeclarator: (node, ctx, visitors) => {\n    walk(node.id, ctx, visitors, node);\n    walk(node.init, ctx, visitors, node);\n  },\n  SpreadElement: (node, ctx, visitors) => {\n    walk(node.argument, ctx, visitors, node);\n  },\n\n  BlockStatement: (node, ctx, visitors) => {\n    list(node.body, ctx, visitors, node);\n  },\n  ExpressionStatement: (node, ctx, visitors) => {\n    walk(node.expression, ctx, visitors, node);\n  },\n  IfStatement: ternary,\n  ForStatement: (node, ctx, visitors) => {\n    walk(node.init, ctx, visitors, node);\n    walk(node.test, ctx, visitors, node);\n    walk(node.update, ctx, visitors, node);\n    walk(node.body, ctx, visitors, node);\n  },\n  WhileStatement: (node, ctx, visitors) => {\n    walk(node.test, ctx, visitors, node);\n    walk(node.body, ctx, visitors, node);\n  },\n  DoWhileStatement: (node, ctx, visitors) => {\n    walk(node.body, ctx, visitors, node);\n    walk(node.test, ctx, visitors, node);\n  },\n  SwitchStatement: (node, ctx, visitors) => {\n    walk(node.discriminant, ctx, visitors, node);\n    list(node.cases, ctx, visitors, node);\n  },\n  SwitchCase: (node, ctx, visitors) => {\n    if (node.test) walk(node.test, ctx, visitors, node);\n    list(node.consequent, ctx, visitors, node);\n  },\n  ReturnStatement: unary,\n\n  Program: (node, ctx, visitors) => {\n    walk(node.body[0], ctx, visitors, node);\n  }\n};"],"names":["walk","node","ctx","visitors","parent","visit","walker","walkers","unary","binary","ternary","func","list","call","nodes","item"],"mappings":"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","x_google_ignoreList":[0]}