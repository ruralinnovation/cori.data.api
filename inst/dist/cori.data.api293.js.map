{"version":3,"file":"cori.data.api293.js","sources":["../../node_modules/arquero/src/format/to-html.js"],"sourcesContent":["import ColumnTable from '../table/column-table'; // eslint-disable-line no-unused-vars\n\nimport formatValue from './value';\nimport { columns, formats, scan } from './util';\nimport isFunction from '../util/is-function';\nimport mapObject from '../util/map-object';\n\n/**\n * Null format function.\n * @callback NullFormat\n * @param {null|undefined} [value] The value to format.\n * @return {string} The formatted HTML string.\n */\n\n/**\n * CSS style function.\n * @callback StyleFunction\n * @param {string} name The column name.\n * @param {number} row The table row index.\n * @return {string} A CSS style string.\n */\n\n/**\n * CSS style options.\n * @typedef {Object.<string, string | StyleFunction>} StyleOptions\n */\n\n/**\n * Options for HTML formatting.\n * @typedef {object} HTMLFormatOptions\n * @property {number} [limit=Infinity] The maximum number of rows to print.\n * @property {number} [offset=0] The row offset indicating how many initial rows to skip.\n * @property {import('./util').ColumnSelectOptions} [columns] Ordered list\n *  of column names to include. If function-valued, the function should\n *  accept a table as input and return an array of column name strings.\n * @property {import('./util').ColumnAlignOptions} [align] Object of column\n *  alignment options. The object keys should be column names. The object\n *  values should be aligment strings, one of 'l' (left), 'c' (center), or\n *  'r' (right). If specified, these override automatically inferred options.\n * @property {import('./util').ColumnFormatOptions} [format] Object of column\n *  format options. The object keys should be column names. The object values\n *  should be formatting functions or specification objects. If specified,\n *  these override automatically inferred options.\n * @property {NullFormat} [null] Format function for null or undefined values.\n *  If specified, this function will be invoked with the null or undefined\n *  value as the sole input, and the return value will be used as the HTML\n *  output for the value.\n * @property {StyleOptions} [style] CSS styles to include in HTML output.\n *  The object keys should be HTML table tag names: 'table', 'thead',\n *  'tbody', 'tr', 'th', or 'td'. The object values should be strings of\n *  valid CSS style directives (such as \"font-weight: bold;\") or functions\n *  that take a column name and row as inputs and return a CSS string.\n * @property {number} [maxdigits=6] The maximum number of fractional digits\n *  to include when formatting numbers. This option is passed to the format\n *  inference method and is overridden by any explicit format options.\n */\n\n/**\n * Format a table as an HTML table string.\n * @param {ColumnTable} table The table to format.\n * @param {HTMLFormatOptions} options The formatting options.\n * @return {string} An HTML table string.\n */\nexport default function(table, options = {}) {\n  const names = columns(table, options.columns);\n  const { align, format } = formats(table, names, options);\n  const style = styles(options);\n  const nullish = options.null;\n\n  const alignValue = a => a === 'c' ? 'center' : a === 'r' ? 'right' : 'left';\n  const escape = s => s.replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n  const baseFormat = (value, opt) => escape(formatValue(value, opt));\n  const formatter = nullish\n    ? (value, opt) => value == null ? nullish(value) : baseFormat(value, opt)\n    : baseFormat;\n\n  let r = -1;\n  let idx = -1;\n\n  const tag = (tag, name, shouldAlign) => {\n    const a = shouldAlign ? alignValue(align[name]) : '';\n    const s = style[tag] ? (style[tag](name, idx, r) || '') : '';\n    const css = (a ? (`text-align: ${a};` + (s ? ' ' : '')) : '') + s;\n    return `<${tag}${css ? ` style=\"${css}\"` : ''}>`;\n  };\n\n  let text = tag('table')\n    + tag('thead')\n    + tag('tr', r)\n    + names.map(name => `${tag('th', name, 1)}${name}</th>`).join('')\n    + '</tr></thead>'\n    + tag('tbody');\n\n  scan(table, names, options.limit, options.offset, {\n    row(row) {\n      r = row;\n      text += (++idx ? '</tr>' : '') + tag('tr');\n    },\n    cell(value, name) {\n      text += tag('td', name, 1)\n        + formatter(value, format[name])\n        + '</td>';\n    }\n  });\n\n  return text + '</tr></tbody></table>';\n}\n\nfunction styles(options) {\n  return mapObject(\n    options.style,\n    value => isFunction(value) ? value : () => value\n  );\n}"],"names":["toHTML","table","options","names","columns","align","format","formats","style","styles","nullish","alignValue","a","escape","s","baseFormat","value","opt","formatValue","formatter","r","idx","tag","name","shouldAlign","css","text","scan","row","mapObject","isFunction"],"mappings":";;;;;;;;;;;;AA+De,SAAAA,EAASC,GAAOC,IAAU,IAAI;AAC3C,QAAMC,IAAQC,EAAQH,GAAOC,EAAQ,OAAO,GACtC,EAAE,OAAAG,GAAO,QAAAC,EAAQ,IAAGC,EAAQN,GAAOE,GAAOD,CAAO,GACjDM,IAAQC,EAAOP,CAAO,GACtBQ,IAAUR,EAAQ,MAElBS,IAAa,CAAAC,MAAKA,MAAM,MAAM,WAAWA,MAAM,MAAM,UAAU,QAC/DC,IAAS,CAAAC,MAAKA,EAAE,QAAQ,MAAM,OAAO,EACxC,QAAQ,MAAM,MAAM,EACpB,QAAQ,MAAM,MAAM,GACjBC,IAAa,CAACC,GAAOC,MAAQJ,EAAOK,EAAYF,GAAOC,CAAG,CAAC,GAC3DE,IAAYT,IACd,CAACM,GAAOC,MAAQD,KAAS,OAAON,EAAQM,CAAK,IAAID,EAAWC,GAAOC,CAAG,IACtEF;AAEJ,MAAIK,IAAI,IACJC,IAAM;AAEV,QAAMC,IAAM,CAACA,GAAKC,GAAMC,MAAgB;AACtC,UAAMZ,IAAIY,IAAcb,EAAWN,EAAMkB,CAAI,CAAC,IAAI,IAC5CT,IAAIN,EAAMc,CAAG,KAAKd,EAAMc,CAAG,EAAEC,GAAMF,GAAKD,CAAC,KAAK,IAC9CK,KAAOb,IAAK,eAAeA,CAAC,OAAOE,IAAI,MAAM,MAAO,MAAMA;AAChE,WAAO,IAAIQ,CAAG,GAAGG,IAAM,WAAWA,CAAG,MAAM,EAAE;AAAA,EACjD;AAEE,MAAIC,IAAOJ,EAAI,OAAO,IAClBA,EAAI,OAAO,IACXA,EAAI,MAAMF,CAAC,IACXjB,EAAM,IAAI,CAAAoB,MAAQ,GAAGD,EAAI,MAAMC,GAAM,CAAC,CAAC,GAAGA,CAAI,OAAO,EAAE,KAAK,EAAE,IAC9D,kBACAD,EAAI,OAAO;AAEf,SAAAK,EAAK1B,GAAOE,GAAOD,EAAQ,OAAOA,EAAQ,QAAQ;AAAA,IAChD,IAAI0B,GAAK;AACP,MAAAR,IAAIQ,GACJF,MAAS,EAAEL,IAAM,UAAU,MAAMC,EAAI,IAAI;AAAA,IAC1C;AAAA,IACD,KAAKN,GAAOO,GAAM;AAChB,MAAAG,KAAQJ,EAAI,MAAMC,GAAM,CAAC,IACrBJ,EAAUH,GAAOV,EAAOiB,CAAI,CAAC,IAC7B;AAAA,IACL;AAAA,EACL,CAAG,GAEMG,IAAO;AAChB;AAEA,SAASjB,EAAOP,GAAS;AACvB,SAAO2B;AAAAA,IACL3B,EAAQ;AAAA,IACR,CAAAc,MAASc,EAAWd,CAAK,IAAIA,IAAQ,MAAMA;AAAA,EAC/C;AACA;","x_google_ignoreList":[0]}