{"version":3,"file":"cori.data.api659.js","sources":["../../node_modules/micromark-core-commonmark/lib/line-ending.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}"],"names":["lineEnding","tokenizeLineEnding","effects","ok","start","code","factorySpace"],"mappings":";;;;;;;AAUY,MAACA,IAAa;AAAA,EACxB,MAAM;AAAA,EACN,UAAUC;AACZ;AAMA,SAASA,EAAmBC,GAASC,GAAI;AACvC,SAAOC;AAGP,WAASA,EAAMC,GAAM;AACnB,WAAAH,EAAQ,MAAM,YAAY,GAC1BA,EAAQ,QAAQG,CAAI,GACpBH,EAAQ,KAAK,YAAY,GAClBI,EAAaJ,GAASC,GAAI,YAAY;AAAA,EAC9C;AACH;","x_google_ignoreList":[0]}