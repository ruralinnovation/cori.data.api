{"version":3,"file":"cori.data.api498.js","sources":["../../node_modules/apache-arrow/enum.mjs"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nexport { MetadataVersion } from './fb/metadata-version.mjs';\nexport { UnionMode } from './fb/union-mode.mjs';\nexport { Precision } from './fb/precision.mjs';\nexport { DateUnit } from './fb/date-unit.mjs';\nexport { TimeUnit } from './fb/time-unit.mjs';\nexport { IntervalUnit } from './fb/interval-unit.mjs';\nexport { MessageHeader } from './fb/message-header.mjs';\n/**\n * Main data type enumeration.\n *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64).\n *\n * **Note**: Only non-negative enum values are written to an Arrow IPC payload.\n *\n * The rest of the values are specified here so TypeScript can narrow the type\n * signatures further beyond the base Arrow Types. The Arrow DataTypes include\n * metadata like `bitWidth` that impact the type signatures of the values we\n * accept and return.\n *\n * For example, the `Int8Vector` reads 1-byte numbers from an `Int8Array`, an\n * `Int32Vector` reads a 4-byte number from an `Int32Array`, and an `Int64Vector`\n * reads a pair of 4-byte lo, hi 32-bit integers as a zero-copy slice from the\n * underlying `Int32Array`.\n *\n * Library consumers benefit by knowing the narrowest type, since we can ensure\n * the types across all public methods are propagated, and never bail to `any`.\n * These values are _never_ used at runtime, and they will _never_ be written\n * to the flatbuffers metadata of serialized Arrow IPC payloads.\n */\nexport var Type;\n(function (Type) {\n    Type[Type[\"NONE\"] = 0] = \"NONE\";\n    Type[Type[\"Null\"] = 1] = \"Null\";\n    Type[Type[\"Int\"] = 2] = \"Int\";\n    Type[Type[\"Float\"] = 3] = \"Float\";\n    Type[Type[\"Binary\"] = 4] = \"Binary\";\n    Type[Type[\"Utf8\"] = 5] = \"Utf8\";\n    Type[Type[\"Bool\"] = 6] = \"Bool\";\n    Type[Type[\"Decimal\"] = 7] = \"Decimal\";\n    Type[Type[\"Date\"] = 8] = \"Date\";\n    Type[Type[\"Time\"] = 9] = \"Time\";\n    Type[Type[\"Timestamp\"] = 10] = \"Timestamp\";\n    Type[Type[\"Interval\"] = 11] = \"Interval\";\n    Type[Type[\"List\"] = 12] = \"List\";\n    Type[Type[\"Struct\"] = 13] = \"Struct\";\n    Type[Type[\"Union\"] = 14] = \"Union\";\n    Type[Type[\"FixedSizeBinary\"] = 15] = \"FixedSizeBinary\";\n    Type[Type[\"FixedSizeList\"] = 16] = \"FixedSizeList\";\n    Type[Type[\"Map\"] = 17] = \"Map\";\n    Type[Type[\"Duration\"] = 18] = \"Duration\";\n    Type[Type[\"LargeBinary\"] = 19] = \"LargeBinary\";\n    Type[Type[\"LargeUtf8\"] = 20] = \"LargeUtf8\";\n    Type[Type[\"Dictionary\"] = -1] = \"Dictionary\";\n    Type[Type[\"Int8\"] = -2] = \"Int8\";\n    Type[Type[\"Int16\"] = -3] = \"Int16\";\n    Type[Type[\"Int32\"] = -4] = \"Int32\";\n    Type[Type[\"Int64\"] = -5] = \"Int64\";\n    Type[Type[\"Uint8\"] = -6] = \"Uint8\";\n    Type[Type[\"Uint16\"] = -7] = \"Uint16\";\n    Type[Type[\"Uint32\"] = -8] = \"Uint32\";\n    Type[Type[\"Uint64\"] = -9] = \"Uint64\";\n    Type[Type[\"Float16\"] = -10] = \"Float16\";\n    Type[Type[\"Float32\"] = -11] = \"Float32\";\n    Type[Type[\"Float64\"] = -12] = \"Float64\";\n    Type[Type[\"DateDay\"] = -13] = \"DateDay\";\n    Type[Type[\"DateMillisecond\"] = -14] = \"DateMillisecond\";\n    Type[Type[\"TimestampSecond\"] = -15] = \"TimestampSecond\";\n    Type[Type[\"TimestampMillisecond\"] = -16] = \"TimestampMillisecond\";\n    Type[Type[\"TimestampMicrosecond\"] = -17] = \"TimestampMicrosecond\";\n    Type[Type[\"TimestampNanosecond\"] = -18] = \"TimestampNanosecond\";\n    Type[Type[\"TimeSecond\"] = -19] = \"TimeSecond\";\n    Type[Type[\"TimeMillisecond\"] = -20] = \"TimeMillisecond\";\n    Type[Type[\"TimeMicrosecond\"] = -21] = \"TimeMicrosecond\";\n    Type[Type[\"TimeNanosecond\"] = -22] = \"TimeNanosecond\";\n    Type[Type[\"DenseUnion\"] = -23] = \"DenseUnion\";\n    Type[Type[\"SparseUnion\"] = -24] = \"SparseUnion\";\n    Type[Type[\"IntervalDayTime\"] = -25] = \"IntervalDayTime\";\n    Type[Type[\"IntervalYearMonth\"] = -26] = \"IntervalYearMonth\";\n    Type[Type[\"DurationSecond\"] = -27] = \"DurationSecond\";\n    Type[Type[\"DurationMillisecond\"] = -28] = \"DurationMillisecond\";\n    Type[Type[\"DurationMicrosecond\"] = -29] = \"DurationMicrosecond\";\n    Type[Type[\"DurationNanosecond\"] = -30] = \"DurationNanosecond\";\n})(Type || (Type = {}));\nexport var BufferType;\n(function (BufferType) {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    BufferType[BufferType[\"OFFSET\"] = 0] = \"OFFSET\";\n    /**\n     * actual data, either fixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    BufferType[BufferType[\"DATA\"] = 1] = \"DATA\";\n    /**\n     * Bit vector indicating if each value is null\n     */\n    BufferType[BufferType[\"VALIDITY\"] = 2] = \"VALIDITY\";\n    /**\n     * Type vector used in Union type\n     */\n    BufferType[BufferType[\"TYPE\"] = 3] = \"TYPE\";\n})(BufferType || (BufferType = {}));\n\n//# sourceMappingURL=enum.mjs.map\n"],"names":["Type","BufferType"],"mappings":"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","x_google_ignoreList":[0]}