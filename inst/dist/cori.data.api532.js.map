{"version":3,"file":"cori.data.api532.js","sources":["../../node_modules/arquero/src/engine/pivot.js"],"sourcesContent":["import { aggregate, aggregateGet, groupOutput } from './reduce/util';\nimport columnSet from '../table/column-set';\n\nconst opt = (value, defaultValue) => value != null ? value : defaultValue;\n\nexport default function(table, on, values, options = {}) {\n  const { keys, keyColumn } = pivotKeys(table, on, options);\n  const vsep = opt(options.valueSeparator, '_');\n  const namefn = values.names.length > 1\n    ? (i, name) => name + vsep + keys[i]\n    : i => keys[i];\n\n  // perform separate aggregate operations for each key\n  // if keys do not match, emit NaN so aggregate skips it\n  // use custom toString method for proper field resolution\n  const results = keys.map(\n    k => aggregate(table, values.ops.map(op => {\n      if (op.name === 'count') { // fix #273\n        const fn = r => k === keyColumn[r] ? 1 : NaN;\n        fn.toString = () => k + ':1';\n        return { ...op, name: 'sum', fields: [fn] };\n      }\n      const fields = op.fields.map(f => {\n        const fn = (r, d) => k === keyColumn[r] ? f(r, d) : NaN;\n        fn.toString = () => k + ':' + f;\n        return fn;\n      });\n      return { ...op, fields };\n    }))\n  );\n\n  return table.create(output(values, namefn, table.groups(), results));\n}\n\nfunction pivotKeys(table, on, options) {\n  const limit = options.limit > 0 ? +options.limit : Infinity;\n  const sort = opt(options.sort, true);\n  const ksep = opt(options.keySeparator, '_');\n\n  // construct key accessor function\n  const get = aggregateGet(table, on.ops, on.exprs);\n  const key = get.length === 1\n    ? get[0]\n    : (row, data) => get.map(fn => fn(row, data)).join(ksep);\n\n  // generate vector of per-row key values\n  const kcol = Array(table.totalRows());\n  table.scan((row, data) => kcol[row] = key(row, data));\n\n  // collect unique key values\n  const uniq = aggregate(\n    table.ungroup(),\n    [ {\n      id: 0,\n      name: 'array_agg_distinct',\n      fields: [(row => kcol[row])], params: []\n    } ]\n  )[0][0];\n\n  // get ordered set of unique key values\n  const keys = sort ? uniq.sort() : uniq;\n\n  // return key values\n  return {\n    keys: Number.isFinite(limit) ? keys.slice(0, limit) : keys,\n    keyColumn: kcol\n  };\n}\n\nfunction output({ names, exprs }, namefn, groups, results) {\n  const size = groups ? groups.size : 1;\n  const cols = columnSet();\n  const m = results.length;\n  const n = names.length;\n\n  let result;\n  const op = (id, row) => result[id][row];\n\n  // write groupby fields to output\n  if (groups) groupOutput(cols, groups);\n\n  // write pivot values to output\n  for (let i = 0; i < n; ++i) {\n    const get = exprs[i];\n    if (get.field != null) {\n      // if expression is op only, use aggregates directly\n      for (let j = 0; j < m; ++j) {\n        cols.add(namefn(j, names[i]), results[j][get.field]);\n      }\n    } else if (size > 1) {\n      // if multiple groups, evaluate expression for each\n      for (let j = 0; j < m; ++j) {\n        result = results[j];\n        const col = cols.add(namefn(j, names[i]), Array(size));\n        for (let k = 0; k < size; ++k) {\n          col[k] = get(k, null, op);\n        }\n      }\n    } else {\n      // if only one group, no need to loop\n      for (let j = 0; j < m; ++j) {\n        result = results[j];\n        cols.add(namefn(j, names[i]), [ get(0, null, op) ]);\n      }\n    }\n  }\n\n  return cols.new();\n}"],"names":["opt","value","defaultValue","_pivot","table","on","values","options","keys","keyColumn","pivotKeys","vsep","namefn","i","name","results","k","aggregate","op","fn","r","fields","f","output","limit","sort","ksep","get","aggregateGet","key","row","data","kcol","uniq","names","exprs","groups","size","cols","columnSet","n","result","id","groupOutput","j","col"],"mappings":"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","x_google_ignoreList":[0]}