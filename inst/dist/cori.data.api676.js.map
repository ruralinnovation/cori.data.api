{"version":3,"file":"cori.data.api676.js","sources":["../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}"],"names":["hardBreakEscape","tokenizeHardBreakEscape","effects","ok","nok","start","code","after","markdownLineEnding"],"mappings":";;;;;;;AASY,MAACA,IAAkB;AAAA,EAC7B,MAAM;AAAA,EACN,UAAUC;AACZ;AAMA,SAASA,EAAwBC,GAASC,GAAIC,GAAK;AACjD,SAAOC;AAaP,WAASA,EAAMC,GAAM;AACnB,WAAAJ,EAAQ,MAAM,iBAAiB,GAC/BA,EAAQ,QAAQI,CAAI,GACbC;AAAA,EACR;AAaD,WAASA,EAAMD,GAAM;AACnB,WAAIE,EAAmBF,CAAI,KACzBJ,EAAQ,KAAK,iBAAiB,GACvBC,EAAGG,CAAI,KAETF,EAAIE,CAAI;AAAA,EAChB;AACH;","x_google_ignoreList":[0]}