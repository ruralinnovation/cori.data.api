{"version":3,"file":"util.js","sources":["../../../../../../node_modules/arquero/src/format/util.js"],"sourcesContent":["import Table from '../table/table'; // eslint-disable-line no-unused-vars\n\nimport inferFormat from './infer';\nimport isFunction from '../util/is-function';\n\n/**\n * Column selection function.\n * @typedef {(table: Table) => string[]} ColumnSelectFunction\n */\n\n/**\n * Column selection options.\n * @typedef {string[]|ColumnSelectFunction} ColumnSelectOptions\n */\n\n/**\n * Column format options. The object keys should be column names.\n * The object values should be formatting functions or objects.\n * If specified, these override any automatically inferred options.\n * @typedef {Object.<string, import('./value').ValueFormatOptions} ColumnFormatOptions\n */\n\n/**\n * Column alignment options. The object keys should be column names.\n * The object values should be aligment strings, one of 'l' (left),\n * 'c' (center), or 'r' (right).\n * If specified, these override any automatically inferred options.\n * @typedef {Object.<string, 'l'|'c'|'r'>} ColumnAlignOptions\n */\n\nexport function columns(table, names) {\n  return isFunction(names)\n    ? names(table)\n    : names || table.columnNames();\n}\n\nexport function formats(table, names, options) {\n  const formatOpt = options.format || {};\n  const alignOpt = options.align || {};\n  const format = {};\n  const align = {};\n\n  names.forEach(name => {\n    const auto = inferFormat(values(table, name), options);\n    align[name] = alignOpt[name] || auto.align;\n    format[name] = formatOpt[name] || auto.format;\n  });\n\n  return { align, format };\n}\n\nfunction values(table, columnName) {\n  const column = table.column(columnName);\n  return fn => table.scan(row => fn(column.get(row)));\n}\n\nexport function scan(table, names, limit = 100, offset, ctx) {\n  const data = table.data();\n  const n = names.length;\n  table.scan(row => {\n    ctx.row(row);\n    for (let i = 0; i < n; ++i) {\n      const name = names[i];\n      ctx.cell(data[names[i]].get(row), name, i);\n    }\n  }, true, limit, offset);\n}"],"names":[],"mappings":";;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,OAAO,CAAC,KAAK,EAAE,KAAK,EAAE;AACtC,EAAE,OAAO,UAAU,CAAC,KAAK,CAAC;AAC1B,MAAM,KAAK,CAAC,KAAK,CAAC;AAClB,MAAM,KAAK,IAAI,KAAK,CAAC,WAAW,EAAE,CAAC;AACnC,CAAC;AACD;AACO,SAAS,OAAO,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE;AAC/C,EAAE,MAAM,SAAS,GAAG,OAAO,CAAC,MAAM,IAAI,EAAE,CAAC;AACzC,EAAE,MAAM,QAAQ,GAAG,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC;AACvC,EAAE,MAAM,MAAM,GAAG,EAAE,CAAC;AACpB,EAAE,MAAM,KAAK,GAAG,EAAE,CAAC;AACnB;AACA,EAAE,KAAK,CAAC,OAAO,CAAC,IAAI,IAAI;AACxB,IAAI,MAAM,IAAI,GAAG,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;AAC3D,IAAI,KAAK,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC;AAC/C,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC;AAClD,GAAG,CAAC,CAAC;AACL;AACA,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;AAC3B,CAAC;AACD;AACA,SAAS,MAAM,CAAC,KAAK,EAAE,UAAU,EAAE;AACnC,EAAE,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AAC1C,EAAE,OAAO,EAAE,IAAI,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC;AACD;AACO,SAAS,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,GAAG,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE;AAC7D,EAAE,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;AAC5B,EAAE,MAAM,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;AACzB,EAAE,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI;AACpB,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACjB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;AAChC,MAAM,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAC5B,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AACjD,KAAK;AACL,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;AAC1B;;;;","x_google_ignoreList":[0]}