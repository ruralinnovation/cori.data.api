{"version":3,"file":"cori.data.api455.js","sources":["../../node_modules/arquero/src/op/aggregate-functions.js"],"sourcesContent":["import bins from '../util/bins';\nimport distinctMap from '../util/distinct-map';\nimport isBigInt from '../util/is-bigint';\nimport noop from '../util/no-op';\nimport NULL from '../util/null';\nimport product from '../util/product';\n\n/**\n * Initialize an aggregate operator.\n */\nfunction initOp(op) {\n  op.init = op.init || noop;\n  op.add = op.add || noop;\n  op.rem = op.rem || noop;\n  return op;\n}\n\nfunction initProduct(s, value) {\n  s.product_v = false;\n  return s.product = value;\n}\n\n/**\n * Initialize an aggregate operator.\n * @callback AggregateInit\n * @param {object} state The aggregate state object.\n * @return {void}\n */\n\n/**\n * Add a value to an aggregate operator.\n * @callback AggregateAdd\n * @param {object} state The aggregate state object.\n * @param {*} value The value to add.\n * @return {void}\n */\n\n/**\n * Remove a value from an aggregate operator.\n * @callback AggregateRem\n * @param {object} state The aggregate state object.\n * @param {*} value The value to remove.\n * @return {void}\n */\n\n/**\n * Retrive an output value from an aggregate operator.\n * @callback AggregateValue\n * @param {object} state The aggregate state object.\n * @return {*} The output value.\n */\n\n/**\n * An operator instance for an aggregate function.\n * @typedef {object} AggregateOperator\n * @property {AggregateInit} init Initialize the operator.\n * @property {AggregateAdd} add Add a value to the operator state.\n * @property {AggregateRem} rem Remove a value from the operator state.\n * @property {AggregateValue} value Retrieve an output value.\n */\n\n/**\n * Create a new aggregate operator instance.\n * @callback AggregateCreate\n * @param {...any} params The aggregate operator parameters.\n * @return {AggregateOperator} The instantiated aggregate operator.\n */\n\n/**\n * An operator definition for an aggregate function.\n * @typedef {object} AggregateDef\n * @property {AggregateCreate} create Create a new operator instance.\n * @property {number[]} param Two-element array containing the\n *  counts of input fields and additional parameters.\n * @property {string[]} [req] Names of operators required by this one.\n * @property {string[]} [stream] Names of operators required by this one\n *  for streaming operations (value removes).\n */\n\n/**\n * Aggregate operator definitions.\n */\nexport default {\n  /** @type {AggregateDef} */\n  count: {\n    create: () => initOp({\n      value: s => s.count\n    }),\n    param: []\n  },\n\n  /** @type {AggregateDef} */\n  array_agg: {\n    create: () => initOp({\n      init: s => s.values = true,\n      value: s => s.list.values(s.stream)\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  object_agg: {\n    create: () => initOp({\n      init:  s => s.values = true,\n      value: s => Object.fromEntries(s.list.values())\n    }),\n    param: [2]\n  },\n\n  /** @type {AggregateDef} */\n  map_agg: {\n    create: () => initOp({\n      init:  s => s.values = true,\n      value: s => new Map(s.list.values())\n    }),\n    param: [2]\n  },\n\n  /** @type {AggregateDef} */\n  entries_agg: {\n    create: () => initOp({\n      init:  s => s.values = true,\n      value: s => s.list.values(s.stream)\n    }),\n    param: [2]\n  },\n\n  /** @type {AggregateDef} */\n  any: {\n    create: () => initOp({\n      add: (s, v) => { if (s.any == null) s.any = v; },\n      value: s => s.valid ? s.any : NULL\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  valid: {\n    create: () => initOp({\n      value: s => s.valid\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  invalid: {\n    create: () => initOp({\n      value: s => s.count - s.valid\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  distinct: {\n    create: () => ({\n      init: s => s.distinct = distinctMap(),\n      value: s => s.distinct.count() + (s.valid === s.count ? 0 : 1),\n      add: (s, v) => s.distinct.increment(v),\n      rem: (s, v) => s.distinct.decrement(v)\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  array_agg_distinct: {\n    create: () => initOp({\n      value: s => s.distinct.values()\n    }),\n    param: [1],\n    req: ['distinct']\n  },\n\n  /** @type {AggregateDef} */\n  mode: {\n    create: () => initOp({\n      value: s => {\n        let mode = NULL;\n        let max = 0;\n        s.distinct.forEach((value, count) => {\n          if (count > max) {\n            max = count;\n            mode = value;\n          }\n        });\n        return mode;\n      }\n    }),\n    param: [1],\n    req: ['distinct']\n  },\n\n  /** @type {AggregateDef} */\n  sum: {\n    create: () => ({\n      init:  s => s.sum = 0,\n      value: s => s.valid ? s.sum : NULL,\n      add: (s, v) => isBigInt(v)\n        ? (s.sum === 0 ? s.sum = v : s.sum += v)\n        : s.sum += +v,\n      rem: (s, v) => s.sum -= v\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  product: {\n    create: () => ({\n      init:  s => initProduct(s, 1),\n      value: s => s.valid\n        ? (\n            s.product_v\n              ? initProduct(s, product(s.list.values()))\n              : s.product\n          )\n        : undefined,\n      add: (s, v) => isBigInt(v)\n        ? (s.product === 1 ? s.product = v : s.product *= v)\n        : s.product *= v,\n      rem: (s, v) => (v == 0 || v === Infinity || v === -Infinity)\n        ? s.product_v = true\n        : s.product /= v\n    }),\n    param: [1],\n    stream: ['array_agg']\n  },\n\n  /** @type {AggregateDef} */\n  mean: {\n    create: () => ({\n      init: s => s.mean = 0,\n      value: s => s.valid ? s.mean : NULL,\n      add: (s, v) => {\n        s.mean_d = v - s.mean;\n        s.mean += s.mean_d / s.valid;\n      },\n      rem: (s, v) => {\n        s.mean_d = v - s.mean;\n        s.mean -= s.valid ? s.mean_d / s.valid : s.mean;\n      }\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  average: {\n    create: () => initOp({\n      value: s => s.valid ? s.mean : NULL\n    }),\n    param: [1],\n    req: ['mean']\n  },\n\n  /** @type {AggregateDef} */\n  variance: {\n    create: () => ({\n      init:  s => s.dev = 0,\n      value: s => s.valid > 1 ? s.dev / (s.valid - 1) : NULL,\n      add: (s, v) => s.dev += s.mean_d * (v - s.mean),\n      rem: (s, v) => s.dev -= s.mean_d * (v - s.mean)\n    }),\n    param: [1],\n    req: ['mean']\n  },\n\n  /** @type {AggregateDef} */\n  variancep: {\n    create: () => initOp({\n      value: s => s.valid > 1 ? s.dev / s.valid : NULL\n    }),\n    param: [1],\n    req: ['variance']\n  },\n\n  /** @type {AggregateDef} */\n  stdev: {\n    create: () => initOp({\n      value: s => s.valid > 1 ? Math.sqrt(s.dev / (s.valid - 1)) : NULL\n    }),\n    param: [1],\n    req: ['variance']\n  },\n\n  /** @type {AggregateDef} */\n  stdevp: {\n    create: () => initOp({\n      value: s => s.valid > 1 ? Math.sqrt(s.dev / s.valid) : NULL\n    }),\n    param: [1],\n    req: ['variance']\n  },\n\n  /** @type {AggregateDef} */\n  min: {\n    create: () => ({\n      init:  s => s.min = NULL,\n      value: s => s.min = (Number.isNaN(s.min) ? s.list.min() : s.min),\n      add: (s, v) => { if (v < s.min || s.min === NULL) s.min = v; },\n      rem: (s, v) => { if (v <= s.min) s.min = NaN; }\n    }),\n    param: [1],\n    stream: ['array_agg']\n  },\n\n  /** @type {AggregateDef} */\n  max: {\n    create: () => ({\n      init:  s => s.max = NULL,\n      value: s => s.max = (Number.isNaN(s.max) ? s.list.max() : s.max),\n      add: (s, v) => { if (v > s.max || s.max === NULL) s.max = v; },\n      rem: (s, v) => { if (v >= s.max) s.max = NaN; }\n    }),\n    param: [1],\n    stream: ['array_agg']\n  },\n\n  /** @type {AggregateDef} */\n  quantile: {\n    create: (p) => initOp({\n      value: s => s.list.quantile(p)\n    }),\n    param: [1, 1],\n    req: ['array_agg']\n  },\n\n  /** @type {AggregateDef} */\n  median: {\n    create: () => initOp({\n      value: s => s.list.quantile(0.5)\n    }),\n    param: [1],\n    req: ['array_agg']\n  },\n\n  /** @type {AggregateDef} */\n  covariance: {\n    create: () => ({\n      init:  s => {\n        s.cov = s.mean_x = s.mean_y = s.dev_x = s.dev_y = 0;\n      },\n      value: s => s.valid > 1 ? s.cov / (s.valid - 1) : NULL,\n      add: (s, x, y) => {\n        const dx = x - s.mean_x;\n        const dy = y - s.mean_y;\n        s.mean_x += dx / s.valid;\n        s.mean_y += dy / s.valid;\n        const dy2 = y - s.mean_y;\n        s.dev_x += dx * (x - s.mean_x);\n        s.dev_y += dy * dy2;\n        s.cov += dx * dy2;\n      },\n      rem: (s, x, y) => {\n        const dx = x - s.mean_x;\n        const dy = y - s.mean_y;\n        s.mean_x -= s.valid ? dx / s.valid : s.mean_x;\n        s.mean_y -= s.valid ? dy / s.valid : s.mean_y;\n        const dy2 = y - s.mean_y;\n        s.dev_x -= dx * (x - s.mean_x);\n        s.dev_y -= dy * dy2;\n        s.cov -= dx * dy2;\n      }\n    }),\n    param: [2]\n  },\n\n  /** @type {AggregateDef} */\n  covariancep: {\n    create: () => initOp({\n      value: s => s.valid > 1 ? s.cov / s.valid : NULL\n    }),\n    param: [2],\n    req: ['covariance']\n  },\n\n  /** @type {AggregateDef} */\n  corr: {\n    create: () => initOp({\n      value: s => s.valid > 1\n        ? s.cov / (Math.sqrt(s.dev_x) * Math.sqrt(s.dev_y))\n        : NULL\n    }),\n    param: [2],\n    req: ['covariance']\n  },\n\n  /** @type {AggregateDef} */\n  bins: {\n    create: (maxbins, nice, minstep, step) => initOp({\n      value: s => bins(s.min, s.max, maxbins, nice, minstep, step)\n    }),\n    param: [1, 4],\n    req: ['min', 'max']\n  }\n};"],"names":["initOp","op","noop","initProduct","s","value","aggregateFunctions","v","NULL","distinctMap","mode","max","count","isBigInt","product","p","x","y","dx","dy","dy2","maxbins","nice","minstep","step","bins"],"mappings":"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","x_google_ignoreList":[0]}