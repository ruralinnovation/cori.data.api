{"version":3,"file":"cori.data.api537.js","sources":["../../node_modules/arquero/src/engine/join.js"],"sourcesContent":["import { indexLookup } from './join/lookup';\nimport columnSet from '../table/column-set';\nimport concat from '../util/concat';\nimport isArray from '../util/is-array';\nimport unroll from '../util/unroll';\n\nfunction emitter(columns, getters) {\n  const args = ['i', 'a', 'j', 'b'];\n  return unroll(\n    args,\n    '{' + concat(columns, (_, i) => `_${i}.push($${i}(${args}));`) + '}',\n    columns, getters\n  );\n}\n\nexport default function(tableL, tableR, predicate, { names, exprs }, options = {}) {\n  // initialize data for left table\n  const dataL = tableL.data();\n  const idxL = tableL.indices(false);\n  const nL = idxL.length;\n  const hitL = new Int32Array(nL);\n\n  // initialize data for right table\n  const dataR = tableR.data();\n  const idxR = tableR.indices(false);\n  const nR = idxR.length;\n  const hitR = new Int32Array(nR);\n\n  // initialize output data\n  const ncols = names.length;\n  const cols = columnSet();\n  const columns = Array(ncols);\n  const getters = Array(ncols);\n  for (let i = 0; i < names.length; ++i) {\n    columns[i] = cols.add(names[i], []);\n    getters[i] = exprs[i];\n  }\n  const emit = emitter(columns, getters);\n\n  // perform join\n  const join = isArray(predicate) ? hashJoin : loopJoin;\n  join(emit, predicate, dataL, dataR, idxL, idxR, hitL, hitR, nL, nR);\n\n  if (options.left) {\n    for (let i = 0; i < nL; ++i) {\n      if (!hitL[i]) {\n        emit(idxL[i], dataL, -1, dataR);\n      }\n    }\n  }\n\n  if (options.right) {\n    for (let j = 0; j < nR; ++j) {\n      if (!hitR[j]) {\n        emit(-1, dataL, idxR[j], dataR);\n      }\n    }\n  }\n\n  return tableL.create(cols.new());\n}\n\nfunction loopJoin(emit, predicate, dataL, dataR, idxL, idxR, hitL, hitR, nL, nR) {\n  // perform nested-loops join\n  for (let i = 0; i < nL; ++i) {\n    const rowL = idxL[i];\n    for (let j = 0; j < nR; ++j) {\n      const rowR = idxR[j];\n      if (predicate(rowL, dataL, rowR, dataR)) {\n        emit(rowL, dataL, rowR, dataR);\n        hitL[i] = 1;\n        hitR[j] = 1;\n      }\n    }\n  }\n}\n\nfunction hashJoin(emit, [keyL, keyR], dataL, dataR, idxL, idxR, hitL, hitR, nL, nR) {\n  // determine which table to hash\n  let dataScan, keyScan, hitScan, idxScan;\n  let dataHash, keyHash, hitHash, idxHash;\n  let emitScan = emit;\n  if (nL >= nR) {\n    dataScan = dataL; keyScan = keyL; hitScan = hitL; idxScan = idxL;\n    dataHash = dataR; keyHash = keyR; hitHash = hitR; idxHash = idxR;\n  } else {\n    dataScan = dataR; keyScan = keyR; hitScan = hitR; idxScan = idxR;\n    dataHash = dataL; keyHash = keyL; hitHash = hitL; idxHash = idxL;\n    emitScan = (i, a, j, b) => emit(j, b, i, a);\n  }\n\n  // build lookup table\n  const lut = indexLookup(idxHash, dataHash, keyHash);\n\n  // scan other table\n  const m = idxScan.length;\n  for (let j = 0; j < m; ++j) {\n    const rowScan = idxScan[j];\n    const list = lut.get(keyScan(rowScan, dataScan));\n    if (list) {\n      const n = list.length;\n      for (let k = 0; k < n; ++k) {\n        const i = list[k];\n        emitScan(rowScan, dataScan, idxHash[i], dataHash);\n        hitHash[i] = 1;\n      }\n      hitScan[j] = 1;\n    }\n  }\n}"],"names":["emitter","columns","getters","args","unroll","concat","_","i","_join","tableL","tableR","predicate","names","exprs","options","dataL","idxL","nL","hitL","dataR","idxR","nR","hitR","ncols","cols","columnSet","emit","isArray","hashJoin","loopJoin","j","rowL","rowR","keyL","keyR","dataScan","keyScan","hitScan","idxScan","dataHash","keyHash","hitHash","idxHash","emitScan","a","b","lut","indexLookup","m","rowScan","list","n","k"],"mappings":"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","x_google_ignoreList":[0]}