{"version":3,"file":"cori.data.api3.js","sources":["../../lib/@cori-risi/components/BarChart.tsx"],"sourcesContent":["import React, { useRef, useEffect, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport { ERCData, MetricMetadata } from '../interfaces';\nimport * as d3textwrap from \"d3-textwrap\";\n\nimport styles from \"./styles/Chart.module.css\";\n\nimport { renderVariable, getMaxYLabelWidth, applyCORIStyles, saveChartAsPNG, getLabel} from '../utils';\nimport { chartStyle } from '../utils/constants';\n\n// import cori_logo from \"../assets/Logo-Mark_CORI_Black.svg\";\n\ninterface BarChartProps {\n  primary_geoid: string;\n  metric: string;\n  data: ERCData[];\n  metadata: MetricMetadata;\n  width: number;\n}\n\nfunction BarChart ({ primary_geoid, metric, data, metadata, width}: BarChartProps) {\n\n  const primary_dta = data.filter(d => d.geoid === primary_geoid && d.metric === metric);\n  const has_valid_data = !primary_dta.every(d => d.value === null);\n\n  const ref = useRef<HTMLDivElement>(null)\n  const svgRef = useRef<SVGSVGElement>(null);\n\n  const bar_thickness = 70;\n  const height = data.length * bar_thickness;\n\n\n  useEffect(() => {\n\n    if (!svgRef.current) return;\n\n    // Need to do a copy instead of reference\n    const margin = {...chartStyle.margin};\n    const tick_number = Math.floor(width / 225);\n\n    const svg = d3.select(svgRef.current)\n        .attr(\"viewBox\", `0 0 ${width} ${height}`)\n        .attr(\"preserveAspectRatio\", \"xMidYMid meet\");\n\n    const xscale_ratio = width < 500? 1.3: 1.1;\n    const xScale = d3\n        .scaleLinear()\n        .domain([0, d3.max(data, (d) => d.value === null? undefined: (+d.value * xscale_ratio))! ])\n        .nice()\n        .range([margin.left, width - margin.right]);\n\n    const yScale = d3\n        .scaleBand()\n        .domain(data.map((d) => {\n\n          if (metadata.yVar === \"variable\") {\n            const variable_str: string = renderVariable(d.variable);\n            return variable_str;\n          }\n\n          const geoid_str: string = d.name; // renderGEOID(d.geoid);\n          return geoid_str;\n\n        }))\n        .range([margin.top, height - margin.bottom])\n        .padding(0.1);\n\n\n    let xAxis = d3.axisBottom<number>(xScale)\n        .ticks(tick_number, metadata.xFormat)\n        .tickSize(chartStyle.xTickSize);\n\n    const yAxis = d3.axisLeft<string>(yScale)\n        .tickSize(chartStyle.yTickSize);\n\n    svg\n        .select<SVGGElement>('.x-axis')\n        .attr('transform', `translate(0, ${height - margin.bottom})`)\n        .call(xAxis);\n\n    svg.select<SVGGElement>('.y-axis')\n        .attr(\"transform\", `translate(${margin.left},0)`)\n        .call(yAxis)\n        .call(g => g.select(\".domain\").remove());\n\n    // style y-axis text before calculating widths\n    svg.selectAll(\".y-axis text\")\n        .style(\"font-family\", chartStyle.tickFontFamily)\n        .style(\"font-size\", chartStyle.tickFontSize)\n        .style(\"color\", chartStyle.tickFontColor);\n\n    const maxw = getMaxYLabelWidth(svg);\n\n\n    // If we need to wrap labels\n    if (maxw > 200) {\n\n      margin.left = 200;\n\n      // wrap the text\n      const text_buffer = 2;\n      const y_wrap = d3textwrap.textwrap().bounds({height: yScale.bandwidth(), width: margin.left - chartStyle.yTickSize});\n      svg.selectAll(\".y-axis text\")\n          .call(y_wrap);\n      svg.selectAll(\"foreignObject\")\n          .style(\n              \"transform\",\n              'translate(-' + (margin.left - chartStyle.yTickSize - text_buffer) + 'px, -' + yScale.bandwidth()/2 + 'px)'\n          )\n          .select(\"div\")\n          .style(\"margin\", 0)\n          .style(\"display\", \"flex\")\n          .style(\"align-items\", \"center\")\n          .style(\"justify-content\", \"end\")\n          .style(\"height\", \"inherit\");\n\n      xScale.range([margin.left, width - margin.right]);\n      xAxis = d3\n          .axisBottom<number>(xScale)\n          .tickSize(chartStyle.xTickSize)\n          .ticks(tick_number, metadata.xFormat);\n\n      svg\n          .select<SVGGElement>('.x-axis')\n          .attr('transform', `translate(0, ${height - margin.bottom})`)\n          .call(xAxis);\n\n      svg.select<SVGGElement>('.y-axis')\n          .attr(\"transform\", `translate(${margin.left},0)`);\n\n    }\n    else {\n\n      margin.left = maxw;\n\n      xScale.range([margin.left, width - margin.right]);\n      xAxis = d3\n          .axisBottom<number>(xScale)\n          .tickSize(chartStyle.xTickSize)\n          .ticks(tick_number, metadata.xFormat);\n\n      svg\n          .select<SVGGElement>('.x-axis')\n          .attr('transform', `translate(0, ${height - margin.bottom})`)\n          .call(xAxis);\n\n      svg.select<SVGGElement>('.y-axis')\n          .attr(\"transform\", `translate(${margin.left},0)`);\n\n    }\n\n    svg\n        .selectAll('.bar')\n        .data(data)\n        .join('rect')\n        .attr('class', 'bar')\n        .attr('x', xScale.range()[0])\n        .attr('height', yScale.bandwidth())\n        .attr('y', (d) => {\n          const y_var: string = metadata.yVar === \"variable\"? renderVariable(d.variable): d.name; // renderGEOID(d.geoid);\n          return yScale(y_var) ?? 0;\n        })\n        .attr('width', (d) => d.value === null? 0: xScale(+d.value) -xScale(0))\n        .attr('fill', chartStyle.defaultBarFill);\n\n    // Data labels\n    svg\n        .selectAll(\".data-label\")\n        .data(data)\n        .join(\"text\")\n        .attr(\"class\", \"data-label\")\n        .attr(\"x\", (d) => d.value === null? xScale.range()[0]: xScale(+d.value))\n        // .attr(\"y\", (d) => yScale(renderVariable(d.variable))! + yScale.bandwidth() / 2)\n        .attr('y', (d) => {\n          const y_var: string = metadata.yVar === \"variable\"? renderVariable(d.variable): d.name; // renderGEOID(d.geoid);\n          return yScale(y_var)! + yScale.bandwidth() / 2;\n        })\n        .attr(\"dy\", \"0.35em\") // Vertical alignment\n        .attr(\"dx\", \"0.35em\") // Horizontal alignment\n        .style(\"font-family\", chartStyle.dataLabelFontFamily)\n        .style(\"font-size\", chartStyle.dataLabelFontSize)\n        .style(\"font-weight\", chartStyle.dataLabelFontWeight)\n        .text((d) => getLabel(metadata.dataLabelFormat, d.value));\n\n    // Style the tick line colors\n    svg.call(applyCORIStyles);\n\n  }, [data, width, height, metadata]);\n\n  const onButtonClick = useCallback(() => {\n    saveChartAsPNG(ref, metric + \".png\");\n  }, [ref, metric])\n\n  return (\n      <div className={styles[\"chart-wrapper\"]}>\n        {data.length > 0 && (\n            <>\n              <div ref={ref} className={styles[\"chart\"]} style={{maxWidth: \"900px\", margin: \"0 auto\", padding: \"5px 20px\"}}>\n                {\n                    has_valid_data === false && (\n                        <div className={styles[\"no-data\"]}>\n                          <p>Note: Chart data is not available for the selected primary county</p>\n                        </div>\n                    )\n                }\n                <>\n                  <h3>{metadata.title}</h3>\n                  {metadata.subtitle.length > 0 ? (\n                      <p><em>{metadata.subtitle}</em></p>\n                  ) : (\n                      <></>\n                  )}\n                  <svg ref={svgRef} style={{width: \"100%\"}}>\n                    <g className=\"x-axis\" />\n                    <g className=\"y-axis\" />\n                  </svg>\n                  <p className={styles['caption']}>{metadata[\"caption\"]}</p>\n                  {/* <img className={styles[\"cori-logo\"]} width={50} height={50} src={cori_logo} alt=\"CORI logo\"></img> */}\n                </>\n              </div>\n              <button className={styles[\"download-chart\"]} onClick={onButtonClick}>Download image</button>\n            </>\n        )}\n      </div>\n  );\n\n};\n\nexport default BarChart;\n"],"names":["BarChart","primary_geoid","metric","data","metadata","width","has_valid_data","d","ref","useRef","svgRef","height","useEffect","margin","chartStyle","tick_number","svg","d3.select","xscale_ratio","xScale","d3.scaleLinear","d3.max","yScale","d3.scaleBand","renderVariable","xAxis","d3.axisBottom","yAxis","d3.axisLeft","g","maxw","getMaxYLabelWidth","text_buffer","y_wrap","d3textwrap.textwrap","y_var","getLabel","applyCORIStyles","onButtonClick","useCallback","saveChartAsPNG","jsx","styles","jsxs","Fragment"],"mappings":"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"}