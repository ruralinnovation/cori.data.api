{"version":3,"file":"cori.data.api629.js","sources":["../../node_modules/apache-arrow/util/bn.mjs"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { toArrayBufferView } from './buffer.mjs';\n/** @ignore */\nexport const isArrowBigNumSymbol = Symbol.for('isArrowBigNum');\n/** @ignore */\nfunction BigNum(x, ...xs) {\n    if (xs.length === 0) {\n        return Object.setPrototypeOf(toArrayBufferView(this['TypedArray'], x), this.constructor.prototype);\n    }\n    return Object.setPrototypeOf(new this['TypedArray'](x, ...xs), this.constructor.prototype);\n}\nBigNum.prototype[isArrowBigNumSymbol] = true;\nBigNum.prototype.toJSON = function () { return `\"${bigNumToString(this)}\"`; };\nBigNum.prototype.valueOf = function () { return bigNumToNumber(this); };\nBigNum.prototype.toString = function () { return bigNumToString(this); };\nBigNum.prototype[Symbol.toPrimitive] = function (hint = 'default') {\n    switch (hint) {\n        case 'number': return bigNumToNumber(this);\n        case 'string': return bigNumToString(this);\n        case 'default': return bigNumToBigInt(this);\n    }\n    // @ts-ignore\n    return bigNumToString(this);\n};\n/** @ignore */\nfunction SignedBigNum(...args) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction UnsignedBigNum(...args) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction DecimalBigNum(...args) { return BigNum.apply(this, args); }\nObject.setPrototypeOf(SignedBigNum.prototype, Object.create(Int32Array.prototype));\nObject.setPrototypeOf(UnsignedBigNum.prototype, Object.create(Uint32Array.prototype));\nObject.setPrototypeOf(DecimalBigNum.prototype, Object.create(Uint32Array.prototype));\nObject.assign(SignedBigNum.prototype, BigNum.prototype, { 'constructor': SignedBigNum, 'signed': true, 'TypedArray': Int32Array, 'BigIntArray': BigInt64Array });\nObject.assign(UnsignedBigNum.prototype, BigNum.prototype, { 'constructor': UnsignedBigNum, 'signed': false, 'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\nObject.assign(DecimalBigNum.prototype, BigNum.prototype, { 'constructor': DecimalBigNum, 'signed': true, 'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\n/** @ignore */\nfunction bigNumToNumber(bn) {\n    const { buffer, byteOffset, length, 'signed': signed } = bn;\n    const words = new BigUint64Array(buffer, byteOffset, length);\n    const negative = signed && words.at(-1) & (BigInt(1) << BigInt(63));\n    let number = negative ? BigInt(1) : BigInt(0);\n    let i = BigInt(0);\n    if (!negative) {\n        for (const word of words) {\n            number += word * (BigInt(1) << (BigInt(32) * i++));\n        }\n    }\n    else {\n        for (const word of words) {\n            number += ~word * (BigInt(1) << (BigInt(32) * i++));\n        }\n        number *= BigInt(-1);\n    }\n    return number;\n}\n/** @ignore */\nexport const bigNumToString = ((a) => {\n    // use BigInt native implementation\n    if (a.byteLength === 8) {\n        const bigIntArray = new a['BigIntArray'](a.buffer, a.byteOffset, 1);\n        return `${bigIntArray[0]}`;\n    }\n    // unsigned numbers\n    if (!a['signed']) {\n        return unsignedBigNumToString(a);\n    }\n    let array = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);\n    // detect positive numbers\n    const highOrderWord = new Int16Array([array.at(-1)])[0];\n    if (highOrderWord >= 0) {\n        return unsignedBigNumToString(a);\n    }\n    // flip the negative value\n    array = array.slice();\n    let carry = 1;\n    for (let i = 0; i < array.length; i++) {\n        const elem = array[i];\n        const updated = ~elem + carry;\n        array[i] = updated;\n        carry &= elem === 0 ? 1 : 0;\n    }\n    const negated = unsignedBigNumToString(array);\n    return `-${negated}`;\n});\n/** @ignore */\nexport const bigNumToBigInt = ((a) => {\n    if (a.byteLength === 8) {\n        const bigIntArray = new a['BigIntArray'](a.buffer, a.byteOffset, 1);\n        return bigIntArray[0];\n    }\n    else {\n        return bigNumToString(a);\n    }\n});\n/** @ignore */\nfunction unsignedBigNumToString(a) {\n    let digits = '';\n    const base64 = new Uint32Array(2);\n    let base32 = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);\n    const checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);\n    let i = -1;\n    const n = base32.length - 1;\n    do {\n        for (base64[0] = base32[i = 0]; i < n;) {\n            base32[i++] = base64[1] = base64[0] / 10;\n            base64[0] = ((base64[0] - base64[1] * 10) << 16) + base32[i];\n        }\n        base32[i] = base64[1] = base64[0] / 10;\n        base64[0] = base64[0] - base64[1] * 10;\n        digits = `${base64[0]}${digits}`;\n    } while (checks[0] || checks[1] || checks[2] || checks[3]);\n    return digits !== null && digits !== void 0 ? digits : `0`;\n}\n/** @ignore */\nexport class BN {\n    /** @nocollapse */\n    static new(num, isSigned) {\n        switch (isSigned) {\n            case true: return new SignedBigNum(num);\n            case false: return new UnsignedBigNum(num);\n        }\n        switch (num.constructor) {\n            case Int8Array:\n            case Int16Array:\n            case Int32Array:\n            case BigInt64Array:\n                return new SignedBigNum(num);\n        }\n        if (num.byteLength === 16) {\n            return new DecimalBigNum(num);\n        }\n        return new UnsignedBigNum(num);\n    }\n    /** @nocollapse */\n    static signed(num) {\n        return new SignedBigNum(num);\n    }\n    /** @nocollapse */\n    static unsigned(num) {\n        return new UnsignedBigNum(num);\n    }\n    /** @nocollapse */\n    static decimal(num) {\n        return new DecimalBigNum(num);\n    }\n    constructor(num, isSigned) {\n        return BN.new(num, isSigned);\n    }\n}\n\n//# sourceMappingURL=bn.mjs.map\n"],"names":["isArrowBigNumSymbol","BigNum","x","xs","toArrayBufferView","bigNumToString","bigNumToNumber","hint","bigNumToBigInt","SignedBigNum","args","UnsignedBigNum","DecimalBigNum","bn","buffer","byteOffset","length","signed","words","negative","number","i","word","a","unsignedBigNumToString","array","carry","elem","updated","digits","base64","base32","checks","n","BN","num","isSigned"],"mappings":"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","x_google_ignoreList":[0]}