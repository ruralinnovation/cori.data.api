{"version":3,"file":"cori.data.api302.js","sources":["../../node_modules/arquero/src/table/columns-from.js"],"sourcesContent":["import error from '../util/error';\nimport isArray from '../util/is-array';\nimport isDate from '../util/is-date';\nimport isFunction from '../util/is-function';\nimport isObject from '../util/is-object';\nimport isRegExp from '../util/is-regexp';\nimport isString from '../util/is-string';\n\nexport default function(values, names) {\n  const raise = type => error(`Illegal argument type: ${type || typeof values}`);\n  return values instanceof Map ? fromKeyValuePairs(values.entries(), names)\n    : isDate(values) ? raise('Date')\n    : isRegExp(values) ? raise('RegExp')\n    : isString(values) ? raise()\n    : isArray(values) ? fromArray(values, names)\n    : isFunction(values[Symbol.iterator]) ? fromIterable(values, names)\n    : isObject(values) ? fromKeyValuePairs(Object.entries(values), names)\n    : raise();\n}\n\nfunction fromKeyValuePairs(entries, names = ['key', 'value']) {\n  const keys = [];\n  const vals = [];\n\n  for (const [key, val] of entries) {\n    keys.push(key);\n    vals.push(val);\n  }\n\n  const columns = {};\n  if (names[0]) columns[names[0]] = keys;\n  if (names[1]) columns[names[1]] = vals;\n  return columns;\n}\n\nfunction fromArray(values, names) {\n  const len = values.length;\n  const columns = {};\n  const add = name => columns[name] = Array(len);\n\n  if (len) {\n    names = names || Object.keys(values[0]);\n    const cols = names.map(add);\n    const n = cols.length;\n    for (let idx = 0; idx < len; ++idx) {\n      const row = values[idx];\n      for (let i = 0; i < n; ++i) {\n        cols[i][idx] = row[names[i]];\n      }\n    }\n  } else if (names) {\n    names.forEach(add);\n  }\n\n  return columns;\n}\n\nfunction fromIterable(values, names) {\n  const columns = {};\n  const add = name => columns[name] = [];\n\n  let cols;\n  let n;\n  for (const row of values) {\n    if (!cols) {\n      names = names || Object.keys(row);\n      cols = names.map(add);\n      n = cols.length;\n    }\n    for (let i = 0; i < n; ++i) {\n      cols[i].push(row[names[i]]);\n    }\n  }\n\n  if (!cols && names) {\n    names.forEach(add);\n  }\n\n  return columns;\n}"],"names":["columnsFrom","values","names","raise","type","error","fromKeyValuePairs","isDate","isRegExp","isString","isArray","fromArray","isFunction","fromIterable","isObject","entries","keys","vals","key","val","columns","len","add","name","cols","n","idx","row","i"],"mappings":";;;;;;;;;;;;;AAQe,SAAAA,EAASC,GAAQC,GAAO;AACrC,QAAMC,IAAQ,CAAAC,MAAQC,EAAM,0BAA0BD,KAAQ,OAAOH,CAAM,EAAE;AAC7E,SAAOA,aAAkB,MAAMK,EAAkBL,EAAO,QAAS,GAAEC,CAAK,IACpEK,EAAON,CAAM,IAAIE,EAAM,MAAM,IAC7BK,EAASP,CAAM,IAAIE,EAAM,QAAQ,IACjCM,EAASR,CAAM,IAAIE,EAAO,IAC1BO,EAAQT,CAAM,IAAIU,EAAUV,GAAQC,CAAK,IACzCU,EAAWX,EAAO,OAAO,QAAQ,CAAC,IAAIY,EAAaZ,GAAQC,CAAK,IAChEY,EAASb,CAAM,IAAIK,EAAkB,OAAO,QAAQL,CAAM,GAAGC,CAAK,IAClEC;AACN;AAEA,SAASG,EAAkBS,GAASb,IAAQ,CAAC,OAAO,OAAO,GAAG;AAC5D,QAAMc,IAAO,CAAA,GACPC,IAAO,CAAA;AAEb,aAAW,CAACC,GAAKC,CAAG,KAAKJ;AACvB,IAAAC,EAAK,KAAKE,CAAG,GACbD,EAAK,KAAKE,CAAG;AAGf,QAAMC,IAAU,CAAA;AAChB,SAAIlB,EAAM,CAAC,MAAGkB,EAAQlB,EAAM,CAAC,CAAC,IAAIc,IAC9Bd,EAAM,CAAC,MAAGkB,EAAQlB,EAAM,CAAC,CAAC,IAAIe,IAC3BG;AACT;AAEA,SAAST,EAAUV,GAAQC,GAAO;AAChC,QAAMmB,IAAMpB,EAAO,QACbmB,IAAU,CAAA,GACVE,IAAM,CAAAC,MAAQH,EAAQG,CAAI,IAAI,MAAMF,CAAG;AAE7C,MAAIA,GAAK;AACP,IAAAnB,IAAQA,KAAS,OAAO,KAAKD,EAAO,CAAC,CAAC;AACtC,UAAMuB,IAAOtB,EAAM,IAAIoB,CAAG,GACpBG,IAAID,EAAK;AACf,aAASE,IAAM,GAAGA,IAAML,GAAK,EAAEK,GAAK;AAClC,YAAMC,IAAM1B,EAAOyB,CAAG;AACtB,eAASE,IAAI,GAAGA,IAAIH,GAAG,EAAEG;AACvB,QAAAJ,EAAKI,CAAC,EAAEF,CAAG,IAAIC,EAAIzB,EAAM0B,CAAC,CAAC;AAAA,IAE9B;AAAA,EACF;AAAM,IAAI1B,KACTA,EAAM,QAAQoB,CAAG;AAGnB,SAAOF;AACT;AAEA,SAASP,EAAaZ,GAAQC,GAAO;AACnC,QAAMkB,IAAU,CAAA,GACVE,IAAM,CAAAC,MAAQH,EAAQG,CAAI,IAAI,CAAA;AAEpC,MAAIC,GACAC;AACJ,aAAWE,KAAO1B,GAAQ;AACxB,IAAKuB,MACHtB,IAAQA,KAAS,OAAO,KAAKyB,CAAG,GAChCH,IAAOtB,EAAM,IAAIoB,CAAG,GACpBG,IAAID,EAAK;AAEX,aAASI,IAAI,GAAGA,IAAIH,GAAG,EAAEG;AACvB,MAAAJ,EAAKI,CAAC,EAAE,KAAKD,EAAIzB,EAAM0B,CAAC,CAAC,CAAC;AAAA,EAE7B;AAED,SAAI,CAACJ,KAAQtB,KACXA,EAAM,QAAQoB,CAAG,GAGZF;AACT;","x_google_ignoreList":[0]}