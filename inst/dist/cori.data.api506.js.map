{"version":3,"file":"cori.data.api506.js","sources":["../../node_modules/apache-arrow/builder/buffer.mjs"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { memcpy } from '../util/buffer.mjs';\n/** @ignore */\nfunction roundLengthUpToNearest64Bytes(len, BPE) {\n    const bytesMinus1 = Math.ceil(len) * BPE - 1;\n    return ((bytesMinus1 - bytesMinus1 % 64 + 64) || 64) / BPE;\n}\n/** @ignore */\nfunction resizeArray(arr, len = 0) {\n    return arr.length >= len ?\n        arr.subarray(0, len) :\n        memcpy(new arr.constructor(len), arr, 0);\n}\n/** @ignore */\nexport class BufferBuilder {\n    constructor(bufferType, initialSize = 0, stride = 1) {\n        this.length = Math.ceil(initialSize / stride);\n        this.buffer = new bufferType(this.length);\n        this.stride = stride;\n        this.BYTES_PER_ELEMENT = bufferType.BYTES_PER_ELEMENT;\n        this.ArrayType = bufferType;\n    }\n    get byteLength() {\n        return Math.ceil(this.length * this.stride) * this.BYTES_PER_ELEMENT;\n    }\n    get reservedLength() { return this.buffer.length / this.stride; }\n    get reservedByteLength() { return this.buffer.byteLength; }\n    // @ts-ignore\n    set(index, value) { return this; }\n    append(value) { return this.set(this.length, value); }\n    reserve(extra) {\n        if (extra > 0) {\n            this.length += extra;\n            const stride = this.stride;\n            const length = this.length * stride;\n            const reserved = this.buffer.length;\n            if (length >= reserved) {\n                this._resize(reserved === 0\n                    ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT)\n                    : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT));\n            }\n        }\n        return this;\n    }\n    flush(length = this.length) {\n        length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n        const array = resizeArray(this.buffer, length);\n        this.clear();\n        return array;\n    }\n    clear() {\n        this.length = 0;\n        this.buffer = new this.ArrayType();\n        return this;\n    }\n    _resize(newLength) {\n        return this.buffer = resizeArray(this.buffer, newLength);\n    }\n}\n/** @ignore */\nexport class DataBufferBuilder extends BufferBuilder {\n    last() { return this.get(this.length - 1); }\n    get(index) { return this.buffer[index]; }\n    set(index, value) {\n        this.reserve(index - this.length + 1);\n        this.buffer[index * this.stride] = value;\n        return this;\n    }\n}\n/** @ignore */\nexport class BitmapBufferBuilder extends DataBufferBuilder {\n    constructor() {\n        super(Uint8Array, 0, 1 / 8);\n        this.numValid = 0;\n    }\n    get numInvalid() { return this.length - this.numValid; }\n    get(idx) { return this.buffer[idx >> 3] >> idx % 8 & 1; }\n    set(idx, val) {\n        const { buffer } = this.reserve(idx - this.length + 1);\n        const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n        val ? cur === 0 && ((buffer[byte] |= (1 << bit)), ++this.numValid)\n            : cur === 1 && ((buffer[byte] &= ~(1 << bit)), --this.numValid);\n        return this;\n    }\n    clear() {\n        this.numValid = 0;\n        return super.clear();\n    }\n}\n/** @ignore */\nexport class OffsetsBufferBuilder extends DataBufferBuilder {\n    constructor(type) {\n        super(type.OffsetArrayType, 1, 1);\n    }\n    append(value) {\n        return this.set(this.length - 1, value);\n    }\n    set(index, value) {\n        const offset = this.length - 1;\n        const buffer = this.reserve(index - offset + 1).buffer;\n        if (offset < index++ && offset >= 0) {\n            buffer.fill(buffer[offset], offset, index);\n        }\n        buffer[index] = buffer[index - 1] + value;\n        return this;\n    }\n    flush(length = this.length - 1) {\n        if (length > this.length) {\n            this.set(length - 1, this.BYTES_PER_ELEMENT > 4 ? BigInt(0) : 0);\n        }\n        return super.flush(length + 1);\n    }\n}\n\n//# sourceMappingURL=buffer.mjs.map\n"],"names":["roundLengthUpToNearest64Bytes","len","BPE","bytesMinus1","resizeArray","arr","memcpy","BufferBuilder","bufferType","initialSize","stride","index","value","extra","length","reserved","array","newLength","DataBufferBuilder","BitmapBufferBuilder","idx","val","buffer","byte","bit","cur","OffsetsBufferBuilder","type","offset"],"mappings":"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","x_google_ignoreList":[0]}