{"version":3,"file":"cori.data.api409.js","sources":["../../node_modules/arquero/src/expression/rewrite.js"],"sourcesContent":["import { Column, Dictionary, Literal } from './ast/constants';\nimport isFunction from '../util/is-function';\n\nconst dictOps = {\n  '==': 1,\n  '!=': 1,\n  '===': 1,\n  '!==': 1\n};\n\n/**\n * Rewrite AST node to be a table column reference.\n * Additionally optimizes dictionary column operations.\n * @param {object} ref AST node to rewrite to a column reference.\n * @param {string} name The name of the column.\n * @param {number} index The table index of the column.\n * @param {object} col The actual table column instance.\n * @param {object} op Parent AST node operating on the column reference.\n */\nexport default function(ref, name, index = 0, col, op) {\n  ref.type = Column;\n  ref.name = name;\n  ref.table = index;\n\n  // proceed only if has parent op and is a dictionary column\n  if (op && col && isFunction(col.keyFor)) {\n    // get other arg if op is an optimizeable operation\n    const lit = dictOps[op.operator]\n      ? op.left === ref ? op.right : op.left\n      : op.callee && op.callee.name === 'equal'\n      ? op.arguments[op.arguments[0] === ref ? 1 : 0]\n      : null;\n\n    // rewrite as dictionary lookup if other arg is a literal\n    if (lit && lit.type === Literal) {\n      rewriteDictionary(op, ref, lit, col.keyFor(lit.value));\n    }\n  }\n\n  return ref;\n}\n\nfunction rewriteDictionary(op, ref, lit, key) {\n  if (key < 0) {\n    // value not in dictionary, rewrite op as false literal\n    op.type = Literal;\n    op.value = false;\n    op.raw = 'false';\n  } else {\n    // rewrite ref as dict key access\n    ref.type = Dictionary;\n\n    // rewrite literal as target dict key\n    lit.value = key;\n    lit.raw = key + '';\n  }\n\n  return true;\n}"],"names":["dictOps","rewrite","ref","name","index","col","op","Column","isFunction","lit","Literal","rewriteDictionary","key","Dictionary"],"mappings":";;;;;;;;AAGA,MAAMA,IAAU;AAAA,EACd,MAAM;AAAA,EACN,MAAM;AAAA,EACN,OAAO;AAAA,EACP,OAAO;AACT;AAWe,SAAAC,EAASC,GAAKC,GAAMC,IAAQ,GAAGC,GAAKC,GAAI;AAMrD,MALAJ,EAAI,OAAOK,GACXL,EAAI,OAAOC,GACXD,EAAI,QAAQE,GAGRE,KAAMD,KAAOG,EAAWH,EAAI,MAAM,GAAG;AAEvC,UAAMI,IAAMT,EAAQM,EAAG,QAAQ,IAC3BA,EAAG,SAASJ,IAAMI,EAAG,QAAQA,EAAG,OAChCA,EAAG,UAAUA,EAAG,OAAO,SAAS,UAChCA,EAAG,UAAUA,EAAG,UAAU,CAAC,MAAMJ,IAAM,IAAI,CAAC,IAC5C;AAGJ,IAAIO,KAAOA,EAAI,SAASC,KACtBC,EAAkBL,GAAIJ,GAAKO,GAAKJ,EAAI,OAAOI,EAAI,KAAK,CAAC;AAAA,EAExD;AAED,SAAOP;AACT;AAEA,SAASS,EAAkBL,GAAIJ,GAAKO,GAAKG,GAAK;AAC5C,SAAIA,IAAM,KAERN,EAAG,OAAOI,GACVJ,EAAG,QAAQ,IACXA,EAAG,MAAM,YAGTJ,EAAI,OAAOW,GAGXJ,EAAI,QAAQG,GACZH,EAAI,MAAMG,IAAM,KAGX;AACT;","x_google_ignoreList":[0]}