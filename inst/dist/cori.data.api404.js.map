{"version":3,"file":"cori.data.api404.js","sources":["../../node_modules/arquero/src/arrow/encode/profiler.js"],"sourcesContent":["import { Field, FixedSizeList, List, Struct, Type } from 'apache-arrow';\nimport resolveType from '../builder/resolve-type';\nimport error from '../../util/error';\nimport isArrayType from '../../util/is-array-type';\nimport isDate from '../../util/is-date';\nimport isExactUTCDate from '../../util/is-exact-utc-date';\n\nexport function profile(scan, column) {\n  const p = profiler();\n  scan(column, p.add);\n  return p;\n}\n\nexport function profiler() {\n  const p = {\n    count: 0,\n    nulls: 0,\n    bools: 0,\n    nums: 0,\n    ints: 0,\n    bigints: 0,\n    min: Infinity,\n    max: -Infinity,\n    digits: 0,\n    dates: 0,\n    utcdays: 0,\n    strings: 0,\n    strlen: 0,\n    arrays: 0,\n    minlen: Infinity,\n    maxlen: 0,\n    structs: 0,\n\n    add(value) {\n      ++p.count;\n      if (value == null) {\n        ++p.nulls;\n        return;\n      }\n\n      const type = typeof value;\n      if (type === 'string') {\n        ++p.strings;\n      } else if (type === 'number') {\n        ++p.nums;\n        if (value < p.min) p.min = value;\n        if (value > p.max) p.max = value;\n        if (Number.isInteger(value)) ++p.ints;\n      } else if (type === 'boolean') {\n        ++p.bools;\n      } else if (type === 'object') {\n        if (isDate(value)) {\n          ++p.dates;\n          if (isExactUTCDate(value)) {\n            ++p.utcdays;\n          }\n        } else if (isArrayType(value)) {\n          ++p.arrays;\n          if (value.length < p.minlen) p.minlen = value.length;\n          if (value.length > p.maxlen) p.maxlen = value.length;\n          const ap = p.array_prof || (p.array_prof = profiler());\n          value.forEach(ap.add);\n        } else {\n          ++p.structs;\n          const sp = p.struct_prof || (p.struct_prof = {});\n          for (const key in value) {\n            const fp = sp[key] || (sp[key] = profiler());\n            fp.add(value[key]);\n          }\n        }\n      } else if (type === 'bigint') {\n        ++p.bigints;\n        if (value < p.min) p.min = value;\n        if (value > p.max) p.max = value;\n      }\n    },\n    type() {\n      return resolveType(infer(p));\n    }\n  };\n\n  return p;\n}\n\nfunction infer(p) {\n  const valid = p.count - p.nulls;\n\n  if (valid === 0) {\n    return Type.Null;\n  }\n  else if (p.ints === valid) {\n    const v = Math.max(Math.abs(p.min) - 1, p.max);\n    return p.min < 0\n      ? v >= 2 ** 31 ? Type.Float64\n        : v < (1 << 7) ? Type.Int8 : v < (1 << 15) ? Type.Int16 : Type.Int32\n      : v >= 2 ** 32 ? Type.Float64\n        : v < (1 << 8) ? Type.Uint8 : v < (1 << 16) ? Type.Uint16 : Type.Uint32;\n  }\n  else if (p.nums === valid) {\n    return Type.Float64;\n  }\n  else if (p.bigints === valid) {\n    const v = -p.min > p.max ? -p.min - 1n : p.max;\n    return p.min < 0\n      ? v < 2 ** 63 ? Type.Int64\n        : error(`BigInt exceeds 64 bits: ${v}`)\n      : p.max < 2 ** 64 ? Type.Uint64\n        : error(`BigInt exceeds 64 bits: ${p.max}`);\n  }\n  else if (p.bools === valid) {\n    return Type.Bool;\n  }\n  else if (p.utcdays === valid) {\n    return Type.DateDay;\n  }\n  else if (p.dates === valid) {\n    return Type.DateMillisecond;\n  }\n  else if (p.arrays === valid) {\n    const type = Field.new('value', p.array_prof.type(), true);\n    return p.minlen === p.maxlen\n      ? new FixedSizeList(p.minlen, type)\n      : new List(type);\n  }\n  else if (p.structs === valid) {\n    const sp = p.struct_prof;\n    return new Struct(\n      Object.keys(sp).map(name => Field.new(name, sp[name].type(), true))\n    );\n  }\n  else if (p.strings > 0) {\n    return Type.Dictionary;\n  }\n  else {\n    error('Type inference failure');\n  }\n}"],"names":["profile","scan","column","p","profiler","value","type","isDate","isExactUTCDate","isArrayType","ap","sp","key","resolveType","infer","valid","Type","v","error","Field","FixedSizeList","List","Struct","name"],"mappings":"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","x_google_ignoreList":[0]}