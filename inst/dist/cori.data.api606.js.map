{"version":3,"file":"cori.data.api606.js","sources":["../../node_modules/apache-arrow/row/struct.mjs"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { valueToString } from '../util/pretty.mjs';\nimport { instance as getVisitor } from '../visitor/get.mjs';\nimport { instance as setVisitor } from '../visitor/set.mjs';\n/** @ignore */ const kParent = Symbol.for('parent');\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\nexport class StructRow {\n    constructor(parent, rowIndex) {\n        this[kParent] = parent;\n        this[kRowIndex] = rowIndex;\n        return new Proxy(this, new StructRowProxyHandler());\n    }\n    toArray() { return Object.values(this.toJSON()); }\n    toJSON() {\n        const i = this[kRowIndex];\n        const parent = this[kParent];\n        const keys = parent.type.children;\n        const json = {};\n        for (let j = -1, n = keys.length; ++j < n;) {\n            json[keys[j].name] = getVisitor.visit(parent.children[j], i);\n        }\n        return json;\n    }\n    toString() {\n        return `{${[...this].map(([key, val]) => `${valueToString(key)}: ${valueToString(val)}`).join(', ')}}`;\n    }\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        return this.toString();\n    }\n    [Symbol.iterator]() {\n        return new StructRowIterator(this[kParent], this[kRowIndex]);\n    }\n}\nclass StructRowIterator {\n    constructor(data, rowIndex) {\n        this.childIndex = 0;\n        this.children = data.children;\n        this.rowIndex = rowIndex;\n        this.childFields = data.type.children;\n        this.numChildren = this.childFields.length;\n    }\n    [Symbol.iterator]() { return this; }\n    next() {\n        const i = this.childIndex;\n        if (i < this.numChildren) {\n            this.childIndex = i + 1;\n            return {\n                done: false,\n                value: [\n                    this.childFields[i].name,\n                    getVisitor.visit(this.children[i], this.rowIndex)\n                ]\n            };\n        }\n        return { done: true, value: null };\n    }\n}\nObject.defineProperties(StructRow.prototype, {\n    [Symbol.toStringTag]: { enumerable: false, configurable: false, value: 'Row' },\n    [kParent]: { writable: true, enumerable: false, configurable: false, value: null },\n    [kRowIndex]: { writable: true, enumerable: false, configurable: false, value: -1 },\n});\nclass StructRowProxyHandler {\n    isExtensible() { return false; }\n    deleteProperty() { return false; }\n    preventExtensions() { return true; }\n    ownKeys(row) {\n        return row[kParent].type.children.map((f) => f.name);\n    }\n    has(row, key) {\n        return row[kParent].type.children.findIndex((f) => f.name === key) !== -1;\n    }\n    getOwnPropertyDescriptor(row, key) {\n        if (row[kParent].type.children.findIndex((f) => f.name === key) !== -1) {\n            return { writable: true, enumerable: true, configurable: true };\n        }\n        return;\n    }\n    get(row, key) {\n        // Look up key in row first\n        if (Reflect.has(row, key)) {\n            return row[key];\n        }\n        const idx = row[kParent].type.children.findIndex((f) => f.name === key);\n        if (idx !== -1) {\n            const val = getVisitor.visit(row[kParent].children[idx], row[kRowIndex]);\n            // Cache key/val lookups\n            Reflect.set(row, key, val);\n            return val;\n        }\n    }\n    set(row, key, val) {\n        const idx = row[kParent].type.children.findIndex((f) => f.name === key);\n        if (idx !== -1) {\n            setVisitor.visit(row[kParent].children[idx], row[kRowIndex], val);\n            // Cache key/val lookups\n            return Reflect.set(row, key, val);\n        }\n        else if (Reflect.has(row, key) || typeof key === 'symbol') {\n            return Reflect.set(row, key, val);\n        }\n        return false;\n    }\n}\n\n//# sourceMappingURL=struct.mjs.map\n"],"names":["kParent","kRowIndex","StructRow","parent","rowIndex","StructRowProxyHandler","i","keys","json","j","n","getVisitor","key","val","valueToString","StructRowIterator","data","row","f","idx","setVisitor"],"mappings":"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","x_google_ignoreList":[0]}