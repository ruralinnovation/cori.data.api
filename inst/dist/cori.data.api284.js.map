{"version":3,"file":"cori.data.api284.js","sources":["../../node_modules/arquero/src/engine/impute.js"],"sourcesContent":["import { aggregateGet } from './reduce/util';\nimport columnSet from '../table/column-set';\nimport isValid from '../util/is-valid';\nimport keyFunction from '../util/key-function';\nimport unroll from '../util/unroll';\n\nexport default function(table, values, keys, arrays) {\n  const write = keys && keys.length;\n  return impute(\n    write ? expand(table, keys, arrays) : table,\n    values,\n    write\n  );\n}\n\nfunction impute(table, { names, exprs, ops }, write) {\n  const gets = aggregateGet(table, ops, exprs);\n  const cols = write ? null : columnSet(table);\n  const rows = table.totalRows();\n\n  names.forEach((name, i) => {\n    const col = table.column(name);\n    const out = write ? col.data : cols.add(name, Array(rows));\n    const get = gets[i];\n\n    table.scan(idx => {\n      const v = col.get(idx);\n      out[idx] = !isValid(v) ? get(idx) : v;\n    });\n  });\n\n  return write ? table : table.create(cols);\n}\n\nfunction expand(table, keys, values) {\n  const groups = table.groups();\n  const data = table.data();\n\n  // expansion keys and accessors\n  const keyNames = (groups ? groups.names : []).concat(keys);\n  const keyGet = (groups ? groups.get : [])\n    .concat(keys.map(key => table.getter(key)));\n\n  // build hash of existing rows\n  const hash = new Set();\n  const keyTable = keyFunction(keyGet);\n  table.scan((idx, data) => hash.add(keyTable(idx, data)));\n\n  // initialize output table data\n  const names = table.columnNames();\n  const cols = columnSet();\n  const out = names.map(name => cols.add(name, []));\n  names.forEach((name, i) => {\n    const old = data[name];\n    const col = out[i];\n    table.scan(row => col.push(old.get(row)));\n  });\n\n  // enumerate expanded value sets and augment output table\n  const keyEnum = keyFunction(keyGet.map((k, i) => a => a[i]));\n  const set = unroll(\n    'v',\n    '{' + out.map((_, i) => `_${i}.push(v[$${i}]);`).join('') + '}',\n    out, names.map(name => keyNames.indexOf(name))\n  );\n\n  if (groups) {\n    let row = groups.keys.length;\n    const prod = values.reduce((p, a) => p * a.length, groups.size);\n    const keys = new Uint32Array(prod + (row - hash.size));\n    keys.set(groups.keys);\n    enumerate(groups, values, (vec, idx) => {\n      if (!hash.has(keyEnum(vec))) {\n        set(vec);\n        keys[row++] = idx[0];\n      }\n    });\n    cols.groupby({ ...groups, keys });\n  } else {\n    enumerate(groups, values, vec => {\n      if (!hash.has(keyEnum(vec))) set(vec);\n    });\n  }\n\n  return table.create(cols.new());\n}\n\nfunction enumerate(groups, values, callback) {\n  const offset = groups ? groups.get.length : 0;\n  const pad = groups ? 1 : 0;\n  const len = pad + values.length;\n  const lens = new Int32Array(len);\n  const idxs = new Int32Array(len);\n  const set = [];\n\n  if (groups) {\n    const { get, rows, size } = groups;\n    lens[0] = size;\n    set.push((vec, idx) => {\n      const row = rows[idx];\n      for (let i = 0; i < offset; ++i) {\n        vec[i] = get[i](row);\n      }\n    });\n  }\n\n  values.forEach((a, i) => {\n    const j = i + offset;\n    lens[i + pad] = a.length;\n    set.push((vec, idx) => vec[j] = a[idx]);\n  });\n\n  const vec = Array(offset + values.length);\n\n  // initialize value vector\n  for (let i = 0; i < len; ++i) {\n    set[i](vec, 0);\n  }\n  callback(vec, idxs);\n\n  // enumerate all combinations of values\n  for (let i = len - 1; i >= 0;) {\n    const idx = ++idxs[i];\n    if (idx < lens[i]) {\n      set[i](vec, idx);\n      callback(vec, idxs);\n      i = len - 1;\n    } else {\n      idxs[i] = 0;\n      set[i](vec, 0);\n      --i;\n    }\n  }\n}"],"names":["_impute","table","values","keys","arrays","write","impute","expand","names","exprs","ops","gets","aggregateGet","cols","columnSet","rows","name","i","col","out","get","idx","v","isValid","groups","data","keyNames","keyGet","key","hash","keyTable","keyFunction","old","row","keyEnum","k","set","unroll","_","prod","p","a","enumerate","vec","callback","offset","pad","len","lens","idxs","size","j"],"mappings":"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","x_google_ignoreList":[0]}