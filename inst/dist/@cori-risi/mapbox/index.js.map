{"version":3,"file":"index.js","sources":["../../../../lib/@cori-risi/mapbox/index.ts"],"sourcesContent":["import axios from \"axios\";\n\n/**\n * This function is a simple wrapper around the [Mapbox Geocoding API](https://docs.mapbox.com/api/search/geocoding/)\n *\n * @param api_key - The Mapbox API (public) token (string)\n * @param text - The search terms (string) that will be passed at the query to the API request\n *\n * ```ts\n * import { mapboxGeocode } from \"@cori-risi/cori.data.api\";\n *\n * // ...\n *\n * const relevant_features = await mapboxGeocode(mapbox_access_token, text);\n *\n * ```\n * */\nexport async function mapboxGeocode (api_key: string, text: string) {\n\n    const search_request = 'https://api.mapbox.com/search/geocode/v6/forward'\n\n    console.log(\"MAPBOX API TOKEN: \", api_key);\n\n    const res = await axios.get(search_request,\n        {\n            params: {\n                access_token: api_key,\n                q: text\n            }\n        }\n    )\n\n    console.log(\"MAPBOX API: \", res);\n\n    const found_features = res.data.features\n        .filter((f: any) => (f.hasOwnProperty(\"geometry\") && f.geometry.type === \"Point\"));\n\n    console.log(\"found_features: \", found_features);\n\n    return found_features\n        .filter((item: any) => {\n            return item.hasOwnProperty(\"properties\")\n                && item[\"properties\"].hasOwnProperty(\"full_address\")\n                && item[\"properties\"].hasOwnProperty(\"context\")\n                && item[\"properties\"][\"context\"].hasOwnProperty(\"country\")\n                && item[\"properties\"][\"context\"][\"country\"].hasOwnProperty(\"country_code\")\n                && item[\"properties\"][\"context\"][\"country\"][\"country_code\"]\n                    .match(/(?:US|AS|GU|MP|PR|VI)/) !== null\n                && \"region\" in item[\"properties\"][\"context\"]\n                && \"postcode\" in item[\"properties\"][\"context\"];\n        })\n        .map((item: any) => {\n            console.log(item);\n            const properties = item[\"properties\"];\n            properties[\"label\"] = item[\"properties\"][\"full_address\"];\n            properties['props'] = JSON.stringify(properties);\n\n            return {\n                ...item,\n                properties\n            };\n        });\n}\n"],"names":[],"mappings":";;;;;;;;AAEA;;;;;;;;;;;;;;AAcK;AACE,eAAe,aAAa,CAAE,OAAe,EAAE,IAAY,EAAA;IAE9D,MAAM,cAAc,GAAG,kDAAkD;AAEzE,IAAA,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,OAAO,CAAC;IAE1C,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,cAAc,EACtC;AACI,QAAA,MAAM,EAAE;AACJ,YAAA,YAAY,EAAE,OAAO;AACrB,YAAA,CAAC,EAAE;AACN;AACJ,KAAA,CACJ;AAED,IAAA,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,GAAG,CAAC;AAEhC,IAAA,MAAM,cAAc,GAAG,GAAG,CAAC,IAAI,CAAC;SAC3B,MAAM,CAAC,CAAC,CAAM,MAAM,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC;AAEtF,IAAA,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,cAAc,CAAC;AAE/C,IAAA,OAAO;AACF,SAAA,MAAM,CAAC,CAAC,IAAS,KAAI;AAClB,QAAA,OAAO,IAAI,CAAC,cAAc,CAAC,YAAY;AAChC,eAAA,IAAI,CAAC,YAAY,CAAC,CAAC,cAAc,CAAC,cAAc;AAChD,eAAA,IAAI,CAAC,YAAY,CAAC,CAAC,cAAc,CAAC,SAAS;eAC3C,IAAI,CAAC,YAAY,CAAC,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,SAAS;AACtD,eAAA,IAAI,CAAC,YAAY,CAAC,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,cAAc;eACtE,IAAI,CAAC,YAAY,CAAC,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,CAAC,cAAc;AACrD,iBAAA,KAAK,CAAC,uBAAuB,CAAC,KAAK;AACrC,eAAA,QAAQ,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,SAAS;eACxC,UAAU,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,SAAS,CAAC;AACtD,KAAC;AACA,SAAA,GAAG,CAAC,CAAC,IAAS,KAAI;AACf,QAAA,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC;AACjB,QAAA,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC;QACrC,UAAU,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,cAAc,CAAC;QACxD,UAAU,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;QAEhD,OACO,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,IAAI,CACP,EAAA,EAAA,UAAU,EACZ,CAAA;AACN,KAAC,CAAC;AACV;;;;"}