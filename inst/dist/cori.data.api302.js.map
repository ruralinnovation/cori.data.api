{"version":3,"file":"cori.data.api302.js","sources":["../../node_modules/arquero/src/arrow/encode/index.js"],"sourcesContent":["import { Table } from 'apache-arrow'; // eslint-disable-line no-unused-vars\n\nimport dataFromObjects from './data-from-objects';\nimport dataFromTable from './data-from-table';\nimport { scanArray, scanTable } from './scan';\nimport { table } from '../arrow-table';\nimport error from '../../util/error';\nimport isArray from '../../util/is-array';\nimport isFunction from '../../util/is-function';\n\n/**\n * Options for Arrow encoding.\n * @typedef {object} ArrowFormatOptions\n * @property {number} [limit=Infinity] The maximum number of rows to include.\n * @property {number} [offset=0] The row offset indicating how many initial\n *  rows to skip.\n * @property {string[]|(data: object) => string[]} [columns] Ordered list of\n *  column names to include. If function-valued, the function should accept\n *  a dataset as input and return an array of column name strings.\n * @property {object} [types] The Arrow data types to use. If specified,\n *  the input should be an object with column names for keys and Arrow data\n *  types for values. If a column type is not explicitly provided, type\n *  inference will be performed to guess an appropriate type.\n */\n\n/**\n * Create an Apache Arrow table for an input dataset.\n * @param {Array|object} data An input dataset to convert to Arrow format.\n *  If array-valued, the data should consist of an array of objects where\n *  each entry represents a row and named properties represent columns.\n *  Otherwise, the input data should be an Arquero table.\n * @param {ArrowFormatOptions} [options] Encoding options, including\n *  column data types.\n * @return {Table} An Apache Arrow Table instance.\n */\nexport default function(data, options = {}) {\n  const { types = {} } = options;\n  const { dataFrom, names, nrows, scan } = init(data, options);\n  const cols = {};\n  names.forEach(name => {\n    const col = dataFrom(data, name, nrows, scan, types[name]);\n    if (col.length !== nrows) {\n      error('Column length mismatch');\n    }\n    cols[name] = col;\n  });\n  const T = table();\n  return new T(cols);\n}\n\nfunction init(data, options) {\n  const { columns, limit = Infinity, offset = 0 } = options;\n  const names = isFunction(columns) ? columns(data)\n    : isArray(columns) ? columns\n    : null;\n  if (isArray(data)) {\n    return {\n      dataFrom: dataFromObjects,\n      names: names || Object.keys(data[0]),\n      nrows: Math.min(limit, data.length - offset),\n      scan: scanArray(data, limit, offset)\n    };\n  } else if (isTable(data)) {\n    return {\n      dataFrom: dataFromTable,\n      names: names || data.columnNames(),\n      nrows: Math.min(limit, data.numRows() - offset),\n      scan: scanTable(data, limit, offset)\n    };\n  } else {\n    error('Unsupported input data type');\n  }\n}\n\nfunction isTable(data) {\n  return data && isFunction(data.reify);\n}"],"names":["toArrow","data","options","types","dataFrom","names","nrows","scan","init","cols","name","col","error","T","table","columns","limit","offset","isFunction","isArray","dataFromObjects","scanArray","isTable","dataFromTable","scanTable"],"mappings":";;;;;;;;;;;;;AAmCe,SAAAA,EAASC,GAAMC,IAAU,IAAI;AAC1C,QAAM,EAAE,OAAAC,IAAQ,GAAI,IAAGD,GACjB,EAAE,UAAAE,GAAU,OAAAC,GAAO,OAAAC,GAAO,MAAAC,EAAI,IAAKC,EAAKP,GAAMC,CAAO,GACrDO,IAAO,CAAA;AACb,EAAAJ,EAAM,QAAQ,CAAAK,MAAQ;AACpB,UAAMC,IAAMP,EAASH,GAAMS,GAAMJ,GAAOC,GAAMJ,EAAMO,CAAI,CAAC;AACzD,IAAIC,EAAI,WAAWL,KACjBM,EAAM,wBAAwB,GAEhCH,EAAKC,CAAI,IAAIC;AAAA,EACjB,CAAG;AACD,QAAME,IAAIC;AACV,SAAO,IAAID,EAAEJ,CAAI;AACnB;AAEA,SAASD,EAAKP,GAAMC,GAAS;AAC3B,QAAM,EAAE,SAAAa,GAAS,OAAAC,IAAQ,OAAU,QAAAC,IAAS,EAAG,IAAGf,GAC5CG,IAAQa,EAAWH,CAAO,IAAIA,EAAQd,CAAI,IAC5CkB,EAAQJ,CAAO,IAAIA,IACnB;AACJ,MAAII,EAAQlB,CAAI;AACd,WAAO;AAAA,MACL,UAAUmB;AAAA,MACV,OAAOf,KAAS,OAAO,KAAKJ,EAAK,CAAC,CAAC;AAAA,MACnC,OAAO,KAAK,IAAIe,GAAOf,EAAK,SAASgB,CAAM;AAAA,MAC3C,MAAMI,EAAUpB,GAAMe,GAAOC,CAAM;AAAA,IACzC;AACS,MAAIK,EAAQrB,CAAI;AACrB,WAAO;AAAA,MACL,UAAUsB;AAAA,MACV,OAAOlB,KAASJ,EAAK,YAAa;AAAA,MAClC,OAAO,KAAK,IAAIe,GAAOf,EAAK,QAAS,IAAGgB,CAAM;AAAA,MAC9C,MAAMO,EAAUvB,GAAMe,GAAOC,CAAM;AAAA,IACzC;AAEI,EAAAL,EAAM,6BAA6B;AAEvC;AAEA,SAASU,EAAQrB,GAAM;AACrB,SAAOA,KAAQiB,EAAWjB,EAAK,KAAK;AACtC;","x_google_ignoreList":[0]}